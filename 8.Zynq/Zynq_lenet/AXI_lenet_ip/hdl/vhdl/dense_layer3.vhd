-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dense_layer3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    input_V_ce0 : OUT STD_LOGIC;
    input_V_q0 : IN STD_LOGIC_VECTOR (6 downto 0);
    output_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    output_V_ce0 : OUT STD_LOGIC;
    output_V_we0 : OUT STD_LOGIC;
    output_V_d0 : OUT STD_LOGIC_VECTOR (9 downto 0) );
end;


architecture behav of dense_layer3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000100";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000001000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000010000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000100000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000001000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000010000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000100000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000001000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000010000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000100000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000001000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000010000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000100000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (24 downto 0) := "0000000001000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (24 downto 0) := "0000000010000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (24 downto 0) := "0000000100000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (24 downto 0) := "0000001000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (24 downto 0) := "0000010000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (24 downto 0) := "0000100000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (24 downto 0) := "0001000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (24 downto 0) := "0010000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (24 downto 0) := "0100000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (24 downto 0) := "1000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv10_54 : STD_LOGIC_VECTOR (9 downto 0) := "0001010100";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv7_54 : STD_LOGIC_VECTOR (6 downto 0) := "1010100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv10_1FF : STD_LOGIC_VECTOR (9 downto 0) := "0111111111";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv10_10 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_const_lv9_10 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_const_lv9_1FF : STD_LOGIC_VECTOR (8 downto 0) := "111111111";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal dense_3_weights_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal dense_3_weights_V_ce0 : STD_LOGIC;
    signal dense_3_weights_V_q0 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Val2_11_reg_193 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_reg_205 : STD_LOGIC_VECTOR (6 downto 0);
    signal next_mul_fu_227_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal next_mul_reg_793 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal exitcond1_fu_233_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_1_fu_239_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_1_reg_802 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_245_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_reg_807 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_tr_cast_fu_249_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_tr_cast_reg_812 : STD_LOGIC_VECTOR (13 downto 0);
    signal exitcond2_fu_253_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond2_reg_817 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal exitcond2_reg_817_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_fu_259_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal p_Result_s_reg_836 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_9_fu_307_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_Val2_9_reg_843 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_Result_1_reg_849 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_reg_855 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_0557_2_fu_484_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal p_0316_5_fu_631_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal j_1_fu_645_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_1_reg_874 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_1_fu_651_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_reg_879 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_fu_639_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal p_0721_1_fu_785_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_0721_1_reg_894 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal temp_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal temp_V_ce0 : STD_LOGIC;
    signal temp_V_we0 : STD_LOGIC;
    signal temp_V_d0 : STD_LOGIC_VECTOR (8 downto 0);
    signal temp_V_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Val2_4_reg_158 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_reg_170 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_mul_reg_181 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_reg_216 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal tmp_16_cast_fu_280_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_6_fu_265_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal read_value_V_fu_536_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_6_cast_fu_270_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_15_fu_274_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_V_fu_293_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal r_V_fu_293_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal r_V_fu_293_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal brmerge2_fu_327_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_331_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge9_demorgan_fu_342_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge9_fu_346_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_fu_352_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_fu_336_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_not_fu_363_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_1371_not_fu_368_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge1_fu_357_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge6_fu_374_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_mux_fu_380_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_s_fu_387_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_Val2_10_fu_394_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal lhs_V_1_fu_402_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal rhs_V_1_fu_406_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal ret_V_fu_410_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal inner_state_V_fu_424_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_Result_3_fu_430_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_2_fu_416_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_438_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal signbit_i_i145_0_not_fu_456_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge10_fu_450_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_3_fu_444_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge11_fu_462_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_mux4_fu_468_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_2_fu_476_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_14_fu_496_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_492_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal inner_state_V_2_fu_504_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal inner_state_V_2_cast_fu_512_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_Val2_3_fu_516_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_Result_4_fu_528_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_5_cast_fu_522_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal lhs_V_fu_549_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal rhs_V_fu_553_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal ret_V_2_fu_557_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal read_value_V_cast_fu_545_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sum_V_fu_571_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_Result_6_fu_577_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_5_fu_563_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_585_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal signbit_i_i_0_not_fu_603_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge7_fu_597_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_2_fu_591_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge8_fu_609_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_mux3_fu_615_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_1_29_fu_623_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_12_fu_656_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_668_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_668_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_668_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_3_fu_693_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Result_8_fu_685_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not_fu_703_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_7_fu_673_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_fu_709_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_715_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not3_fu_733_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newsignbit_i_i_i_i_fu_727_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge3_fu_739_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_1_fu_745_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_1_fu_721_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_1383_not_fu_757_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge4_fu_751_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_1_fu_681_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal brmerge5_fu_763_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_mux1_fu_769_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_7_fu_777_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_668_ap_start : STD_LOGIC;
    signal grp_fu_668_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_668_p00 : STD_LOGIC_VECTOR (13 downto 0);
    signal r_V_fu_293_p10 : STD_LOGIC_VECTOR (10 downto 0);

    component ActivateNetwork_sdiv_15ns_10s_14_19_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component dense_layer3_dense_3_weights_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component dense_layer3_temp_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (8 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;



begin
    dense_3_weights_V_U : component dense_layer3_dense_3_weights_V
    generic map (
        DataWidth => 4,
        AddressRange => 840,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_3_weights_V_address0,
        ce0 => dense_3_weights_V_ce0,
        q0 => dense_3_weights_V_q0);

    temp_V_U : component dense_layer3_temp_V
    generic map (
        DataWidth => 9,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => temp_V_address0,
        ce0 => temp_V_ce0,
        we0 => temp_V_we0,
        d0 => temp_V_d0,
        q0 => temp_V_q0);

    ActivateNetwork_sdiv_15ns_10s_14_19_seq_1_U92 : component ActivateNetwork_sdiv_15ns_10s_14_19_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 19,
        din0_WIDTH => 15,
        din1_WIDTH => 10,
        dout_WIDTH => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_668_ap_start,
        done => grp_fu_668_ap_done,
        din0 => grp_fu_668_p0,
        din1 => grp_fu_668_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_668_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((exitcond1_fu_233_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((exitcond1_fu_233_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_205_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_253_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i_reg_205 <= i_2_fu_259_p2;
            elsif (((exitcond1_fu_233_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_reg_205 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    j_reg_216_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_233_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_reg_216 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                j_reg_216 <= j_1_reg_874;
            end if; 
        end if;
    end process;

    p_Val2_11_reg_193_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_reg_817_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                p_Val2_11_reg_193 <= p_0557_2_fu_484_p3;
            elsif (((exitcond1_fu_233_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                p_Val2_11_reg_193 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    p_Val2_4_reg_158_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_Val2_4_reg_158 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                p_Val2_4_reg_158 <= p_0316_5_fu_631_p3;
            end if; 
        end if;
    end process;

    p_reg_170_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_reg_170 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                p_reg_170 <= p_1_reg_802;
            end if; 
        end if;
    end process;

    phi_mul_reg_181_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_mul_reg_181 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                phi_mul_reg_181 <= next_mul_reg_793;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                exitcond2_reg_817 <= exitcond2_fu_253_p2;
                exitcond2_reg_817_pp0_iter1_reg <= exitcond2_reg_817;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                j_1_reg_874 <= j_1_fu_645_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                next_mul_reg_793 <= next_mul_fu_227_p2;
                p_1_reg_802 <= p_1_fu_239_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                p_0721_1_reg_894 <= p_0721_1_fu_785_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_reg_817 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                p_Result_1_reg_849 <= r_V_fu_293_p2(9 downto 9);
                p_Result_s_reg_836 <= r_V_fu_293_p2(10 downto 10);
                p_Val2_9_reg_843 <= p_Val2_9_fu_307_p1;
                tmp_22_reg_855 <= r_V_fu_293_p2(10 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_639_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    tmp_1_reg_879(3 downto 0) <= tmp_1_fu_651_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_233_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    tmp_s_reg_807(3 downto 0) <= tmp_s_fu_245_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_233_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_tr_cast_reg_812 <= tmp_tr_cast_fu_249_p1;
            end if;
        end if;
    end process;
    tmp_s_reg_807(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    tmp_1_reg_879(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond1_fu_233_p2, exitcond2_fu_253_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_CS_fsm_state7, exitcond_fu_639_p2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond1_fu_233_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((exitcond2_fu_253_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((exitcond2_fu_253_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state7 => 
                if (((exitcond_fu_639_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state26 <= ap_CS_fsm(23);
    ap_CS_fsm_state27 <= ap_CS_fsm(24);
    ap_CS_fsm_state6 <= ap_CS_fsm(3);
    ap_CS_fsm_state7 <= ap_CS_fsm(4);
    ap_CS_fsm_state8 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(exitcond2_fu_253_p2)
    begin
        if ((exitcond2_fu_253_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state7, exitcond_fu_639_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((exitcond_fu_639_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state7, exitcond_fu_639_p2)
    begin
        if (((exitcond_fu_639_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    brmerge10_fu_450_p2 <= (p_Result_3_fu_430_p3 xor p_Result_2_fu_416_p3);
    brmerge11_fu_462_p2 <= (signbit_i_i145_0_not_fu_456_p2 or p_Result_3_fu_430_p3);
    brmerge1_fu_357_p2 <= (underflow_fu_352_p2 or overflow_fu_336_p2);
    brmerge2_fu_327_p2 <= (tmp_22_reg_855 or p_Result_1_reg_849);
    brmerge3_fu_739_p2 <= (p_not3_fu_733_p2 or newsignbit_i_i_i_i_fu_727_p2);
    brmerge4_fu_751_p2 <= (underflow_1_fu_745_p2 or overflow_1_fu_721_p2);
    brmerge5_fu_763_p2 <= (p_1383_not_fu_757_p2 or overflow_1_fu_721_p2);
    brmerge6_fu_374_p2 <= (p_1371_not_fu_368_p2 or overflow_fu_336_p2);
    brmerge7_fu_597_p2 <= (p_Result_6_fu_577_p3 xor p_Result_5_fu_563_p3);
    brmerge8_fu_609_p2 <= (signbit_i_i_0_not_fu_603_p2 or p_Result_6_fu_577_p3);
    brmerge9_demorgan_fu_342_p2 <= (tmp_22_reg_855 and p_Result_1_reg_849);
    brmerge9_fu_346_p2 <= (brmerge9_demorgan_fu_342_p2 xor ap_const_lv1_1);
    brmerge_fu_709_p2 <= (p_not_fu_703_p2 or p_Result_8_fu_685_p3);
    dense_3_weights_V_address0 <= tmp_16_cast_fu_280_p1(10 - 1 downto 0);

    dense_3_weights_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dense_3_weights_V_ce0 <= ap_const_logic_1;
        else 
            dense_3_weights_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_233_p2 <= "1" when (p_reg_170 = ap_const_lv4_A) else "0";
    exitcond2_fu_253_p2 <= "1" when (i_reg_205 = ap_const_lv7_54) else "0";
    exitcond_fu_639_p2 <= "1" when (j_reg_216 = ap_const_lv4_A) else "0";

    grp_fu_668_ap_start_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_668_ap_start <= ap_const_logic_1;
        else 
            grp_fu_668_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_668_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_668_p00),15));
    grp_fu_668_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_656_p3),14));
    grp_fu_668_p1 <= tmp_tr_cast_reg_812(10 - 1 downto 0);
    i_2_fu_259_p2 <= std_logic_vector(unsigned(i_reg_205) + unsigned(ap_const_lv7_1));
    inner_state_V_2_cast_fu_512_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(inner_state_V_2_fu_504_p3),10));
    inner_state_V_2_fu_504_p3 <= 
        ap_const_lv9_0 when (tmp_14_fu_496_p3(0) = '1') else 
        tmp_13_fu_492_p1;
    inner_state_V_fu_424_p2 <= std_logic_vector(signed(p_Val2_10_fu_394_p3) + signed(p_Val2_11_reg_193));
    input_V_address0 <= tmp_6_fu_265_p1(7 - 1 downto 0);

    input_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_V_ce0 <= ap_const_logic_1;
        else 
            input_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j_1_fu_645_p2 <= std_logic_vector(unsigned(j_reg_216) + unsigned(ap_const_lv4_1));
        lhs_V_1_fu_402_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_11_reg_193),11));

        lhs_V_fu_549_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_4_reg_158),11));

    newsignbit_i_i_i_i_fu_727_p2 <= (p_Result_8_fu_685_p3 xor ap_const_lv1_1);
    next_mul_fu_227_p2 <= std_logic_vector(unsigned(phi_mul_reg_181) + unsigned(ap_const_lv10_54));
    output_V_address0 <= tmp_1_reg_879(4 - 1 downto 0);

    output_V_ce0_assign_proc : process(ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            output_V_ce0 <= ap_const_logic_1;
        else 
            output_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_V_d0 <= p_0721_1_reg_894;

    output_V_we0_assign_proc : process(ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            output_V_we0 <= ap_const_logic_1;
        else 
            output_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    overflow_1_fu_721_p2 <= (tmp_8_fu_715_p2 and brmerge_fu_709_p2);
    overflow_fu_336_p2 <= (tmp_9_fu_331_p2 and brmerge2_fu_327_p2);
    p_0316_5_fu_631_p3 <= 
        p_mux3_fu_615_p3 when (brmerge8_fu_609_p2(0) = '1') else 
        p_1_29_fu_623_p3;
    p_0557_2_fu_484_p3 <= 
        p_mux4_fu_468_p3 when (brmerge11_fu_462_p2(0) = '1') else 
        p_2_fu_476_p3;
    p_0721_1_fu_785_p3 <= 
        p_mux1_fu_769_p3 when (brmerge5_fu_763_p2(0) = '1') else 
        p_7_fu_777_p3;
    p_1371_not_fu_368_p2 <= (p_Result_not_fu_363_p2 or brmerge9_demorgan_fu_342_p2);
    p_1383_not_fu_757_p2 <= (underflow_1_fu_745_p2 xor ap_const_lv1_1);
    p_1_29_fu_623_p3 <= 
        ap_const_lv10_200 when (underflow_2_fu_591_p2(0) = '1') else 
        sum_V_fu_571_p2;
    p_1_fu_239_p2 <= std_logic_vector(unsigned(p_reg_170) + unsigned(ap_const_lv4_1));
    p_2_fu_476_p3 <= 
        ap_const_lv10_200 when (underflow_3_fu_444_p2(0) = '1') else 
        inner_state_V_fu_424_p2;
    p_7_fu_777_p3 <= 
        ap_const_lv10_200 when (underflow_1_fu_745_p2(0) = '1') else 
        p_Val2_1_fu_681_p1;
    p_Result_2_fu_416_p3 <= ret_V_fu_410_p2(10 downto 10);
    p_Result_3_fu_430_p3 <= inner_state_V_fu_424_p2(9 downto 9);
    p_Result_4_fu_528_p3 <= p_Val2_3_fu_516_p2(9 downto 9);
    p_Result_5_fu_563_p3 <= ret_V_2_fu_557_p2(10 downto 10);
    p_Result_6_fu_577_p3 <= sum_V_fu_571_p2(9 downto 9);
    p_Result_7_fu_673_p3 <= grp_fu_668_p2(13 downto 13);
    p_Result_8_fu_685_p3 <= grp_fu_668_p2(9 downto 9);
    p_Result_not_fu_363_p2 <= (p_Result_s_reg_836 xor ap_const_lv1_1);
    p_Val2_10_fu_394_p3 <= 
        p_mux_fu_380_p3 when (brmerge6_fu_374_p2(0) = '1') else 
        p_s_fu_387_p3;
    p_Val2_1_fu_681_p1 <= grp_fu_668_p2(10 - 1 downto 0);
    p_Val2_3_fu_516_p2 <= std_logic_vector(unsigned(ap_const_lv10_10) + unsigned(inner_state_V_2_cast_fu_512_p1));
    p_Val2_5_cast_fu_522_p2 <= std_logic_vector(unsigned(ap_const_lv9_10) + unsigned(inner_state_V_2_fu_504_p3));
    p_Val2_9_fu_307_p1 <= r_V_fu_293_p2(10 - 1 downto 0);
    p_mux1_fu_769_p3 <= 
        ap_const_lv10_1FF when (brmerge4_fu_751_p2(0) = '1') else 
        p_Val2_1_fu_681_p1;
    p_mux3_fu_615_p3 <= 
        ap_const_lv10_1FF when (brmerge7_fu_597_p2(0) = '1') else 
        sum_V_fu_571_p2;
    p_mux4_fu_468_p3 <= 
        ap_const_lv10_1FF when (brmerge10_fu_450_p2(0) = '1') else 
        inner_state_V_fu_424_p2;
    p_mux_fu_380_p3 <= 
        ap_const_lv10_1FF when (brmerge1_fu_357_p2(0) = '1') else 
        p_Val2_9_reg_843;
    p_not3_fu_733_p2 <= "0" when (tmp_3_fu_693_p4 = ap_const_lv4_F) else "1";
    p_not_fu_703_p2 <= "0" when (tmp_3_fu_693_p4 = ap_const_lv4_0) else "1";
    p_s_fu_387_p3 <= 
        ap_const_lv10_200 when (underflow_fu_352_p2(0) = '1') else 
        p_Val2_9_reg_843;
    r_V_fu_293_p0 <= dense_3_weights_V_q0;
    r_V_fu_293_p1 <= r_V_fu_293_p10(7 - 1 downto 0);
    r_V_fu_293_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_V_q0),11));
    r_V_fu_293_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_fu_293_p0) * signed('0' &r_V_fu_293_p1))), 11));
    read_value_V_cast_fu_545_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(read_value_V_fu_536_p3),10));
    read_value_V_fu_536_p3 <= 
        ap_const_lv9_1FF when (p_Result_4_fu_528_p3(0) = '1') else 
        p_Val2_5_cast_fu_522_p2;
    ret_V_2_fu_557_p2 <= std_logic_vector(signed(lhs_V_fu_549_p1) + signed(rhs_V_fu_553_p1));
    ret_V_fu_410_p2 <= std_logic_vector(signed(lhs_V_1_fu_402_p1) + signed(rhs_V_1_fu_406_p1));
        rhs_V_1_fu_406_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_10_fu_394_p3),11));

    rhs_V_fu_553_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(read_value_V_fu_536_p3),11));
    signbit_i_i145_0_not_fu_456_p2 <= (p_Result_2_fu_416_p3 xor ap_const_lv1_1);
    signbit_i_i_0_not_fu_603_p2 <= (p_Result_5_fu_563_p3 xor ap_const_lv1_1);
    sum_V_fu_571_p2 <= std_logic_vector(unsigned(read_value_V_cast_fu_545_p1) + unsigned(p_Val2_4_reg_158));

    temp_V_address0_assign_proc : process(ap_CS_fsm_state1, tmp_s_reg_807, ap_CS_fsm_state6, ap_CS_fsm_state7, tmp_1_fu_651_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            temp_V_address0 <= tmp_1_fu_651_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            temp_V_address0 <= tmp_s_reg_807(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            temp_V_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            temp_V_address0 <= "XXXX";
        end if; 
    end process;


    temp_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            temp_V_ce0 <= ap_const_logic_1;
        else 
            temp_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_V_d0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state6, read_value_V_fu_536_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            temp_V_d0 <= read_value_V_fu_536_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            temp_V_d0 <= ap_const_lv9_0;
        else 
            temp_V_d0 <= "XXXXXXXXX";
        end if; 
    end process;


    temp_V_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            temp_V_we0 <= ap_const_logic_1;
        else 
            temp_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_10_fu_438_p2 <= (p_Result_3_fu_430_p3 xor ap_const_lv1_1);
    tmp_12_fu_656_p3 <= (temp_V_q0 & ap_const_lv4_0);
    tmp_13_fu_492_p1 <= p_Val2_11_reg_193(9 - 1 downto 0);
    tmp_14_fu_496_p3 <= p_Val2_11_reg_193(9 downto 9);
    tmp_15_fu_274_p2 <= std_logic_vector(unsigned(phi_mul_reg_181) + unsigned(tmp_6_cast_fu_270_p1));
    tmp_16_cast_fu_280_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_fu_274_p2),64));
    tmp_1_fu_651_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_216),64));
    tmp_3_fu_693_p4 <= grp_fu_668_p2(13 downto 10);
    tmp_4_fu_585_p2 <= (p_Result_6_fu_577_p3 xor ap_const_lv1_1);
    tmp_6_cast_fu_270_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_205),10));
    tmp_6_fu_265_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_205),64));
    tmp_8_fu_715_p2 <= (p_Result_7_fu_673_p3 xor ap_const_lv1_1);
    tmp_9_fu_331_p2 <= (p_Result_s_reg_836 xor ap_const_lv1_1);
    tmp_s_fu_245_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_reg_170),64));
        tmp_tr_cast_fu_249_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_4_reg_158),14));

    underflow_1_fu_745_p2 <= (p_Result_7_fu_673_p3 and brmerge3_fu_739_p2);
    underflow_2_fu_591_p2 <= (tmp_4_fu_585_p2 and p_Result_5_fu_563_p3);
    underflow_3_fu_444_p2 <= (tmp_10_fu_438_p2 and p_Result_2_fu_416_p3);
    underflow_fu_352_p2 <= (p_Result_s_reg_836 and brmerge9_fu_346_p2);
end behav;
