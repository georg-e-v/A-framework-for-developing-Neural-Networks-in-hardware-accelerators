// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module conv_layer1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_V_address0,
        input_V_ce0,
        input_V_q0,
        output_V_address0,
        output_V_ce0,
        output_V_we0,
        output_V_d0,
        output_V_q0,
        output_V_address1,
        output_V_ce1,
        output_V_we1,
        output_V_d1
);

parameter    ap_ST_fsm_state1 = 15'd1;
parameter    ap_ST_fsm_state2 = 15'd2;
parameter    ap_ST_fsm_state3 = 15'd4;
parameter    ap_ST_fsm_pp0_stage0 = 15'd8;
parameter    ap_ST_fsm_pp0_stage1 = 15'd16;
parameter    ap_ST_fsm_pp0_stage2 = 15'd32;
parameter    ap_ST_fsm_pp0_stage3 = 15'd64;
parameter    ap_ST_fsm_pp0_stage4 = 15'd128;
parameter    ap_ST_fsm_pp0_stage5 = 15'd256;
parameter    ap_ST_fsm_pp0_stage6 = 15'd512;
parameter    ap_ST_fsm_pp0_stage7 = 15'd1024;
parameter    ap_ST_fsm_pp0_stage8 = 15'd2048;
parameter    ap_ST_fsm_state17 = 15'd4096;
parameter    ap_ST_fsm_pp1_stage0 = 15'd8192;
parameter    ap_ST_fsm_state22 = 15'd16384;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] input_V_address0;
output   input_V_ce0;
input  [7:0] input_V_q0;
output  [11:0] output_V_address0;
output   output_V_ce0;
output  [1:0] output_V_we0;
output  [15:0] output_V_d0;
input  [15:0] output_V_q0;
output  [11:0] output_V_address1;
output   output_V_ce1;
output  [1:0] output_V_we1;
output  [15:0] output_V_d1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[9:0] input_V_address0;
reg input_V_ce0;
reg[11:0] output_V_address0;
reg output_V_ce0;
reg[1:0] output_V_we0;
reg output_V_ce1;
reg[1:0] output_V_we1;

(* fsm_encoding = "none" *) reg   [14:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] conv_1_weights_V_0_0_address0;
reg    conv_1_weights_V_0_0_ce0;
wire   [3:0] conv_1_weights_V_0_0_q0;
wire   [2:0] conv_1_weights_V_0_0_1_address0;
reg    conv_1_weights_V_0_0_1_ce0;
wire   [3:0] conv_1_weights_V_0_0_1_q0;
wire   [2:0] conv_1_weights_V_0_0_2_address0;
reg    conv_1_weights_V_0_0_2_ce0;
wire   [1:0] conv_1_weights_V_0_0_2_q0;
wire   [2:0] conv_1_weights_V_0_1_address0;
reg    conv_1_weights_V_0_1_ce0;
wire   [3:0] conv_1_weights_V_0_1_q0;
wire   [2:0] conv_1_weights_V_0_1_1_address0;
reg    conv_1_weights_V_0_1_1_ce0;
wire   [2:0] conv_1_weights_V_0_1_1_q0;
wire   [2:0] conv_1_weights_V_0_1_2_address0;
reg    conv_1_weights_V_0_1_2_ce0;
wire   [3:0] conv_1_weights_V_0_1_2_q0;
wire   [2:0] conv_1_weights_V_0_2_address0;
reg    conv_1_weights_V_0_2_ce0;
wire   [3:0] conv_1_weights_V_0_2_q0;
wire   [2:0] conv_1_weights_V_0_2_1_address0;
reg    conv_1_weights_V_0_2_1_ce0;
wire   [3:0] conv_1_weights_V_0_2_1_q0;
wire   [2:0] conv_1_weights_V_0_2_2_address0;
reg    conv_1_weights_V_0_2_2_ce0;
wire   [2:0] conv_1_weights_V_0_2_2_q0;
wire   [2:0] conv_1_biases_V_address0;
reg    conv_1_biases_V_ce0;
wire   [2:0] conv_1_biases_V_q0;
reg   [9:0] indvar_flatten_reg_430;
reg   [4:0] row_reg_441;
reg   [4:0] col_reg_453;
reg   [8:0] indvar_flatten7_reg_464;
reg   [4:0] row1_reg_475;
reg   [4:0] col2_reg_486;
wire   [2:0] p_5_fu_503_p2;
reg   [2:0] p_5_reg_2537;
wire    ap_CS_fsm_state2;
wire   [0:0] exitcond3_fu_497_p2;
wire  signed [9:0] tmp_238_cast_fu_553_p1;
reg  signed [9:0] tmp_238_cast_reg_2592;
wire    ap_CS_fsm_state3;
wire  signed [11:0] tmp_86_fu_557_p1;
reg  signed [11:0] tmp_86_reg_2598;
wire  signed [11:0] tmp_86_0_0_1_fu_561_p1;
reg  signed [11:0] tmp_86_0_0_1_reg_2603;
wire   [9:0] tmp_86_0_0_2_cast_fu_565_p1;
reg   [9:0] tmp_86_0_0_2_cast_reg_2608;
wire  signed [11:0] tmp_86_0_1_fu_569_p1;
reg  signed [11:0] tmp_86_0_1_reg_2613;
wire  signed [10:0] tmp_86_0_1_1_cast_fu_573_p1;
reg  signed [10:0] tmp_86_0_1_1_cast_reg_2618;
wire  signed [11:0] tmp_86_0_1_2_fu_577_p1;
reg  signed [11:0] tmp_86_0_1_2_reg_2623;
wire  signed [11:0] tmp_86_0_2_fu_581_p1;
reg  signed [11:0] tmp_86_0_2_reg_2628;
wire  signed [11:0] tmp_86_0_2_1_fu_585_p1;
reg  signed [11:0] tmp_86_0_2_1_reg_2633;
wire  signed [10:0] tmp_86_0_2_2_cast_fu_589_p1;
reg  signed [10:0] tmp_86_0_2_2_cast_reg_2638;
wire  signed [7:0] p_Val2_24_cast_fu_619_p1;
reg  signed [7:0] p_Val2_24_cast_reg_2643;
wire  signed [8:0] lhs_V_fu_623_p1;
reg  signed [8:0] lhs_V_reg_2648;
wire   [0:0] exitcond_flatten_fu_627_p2;
reg   [0:0] exitcond_flatten_reg_2653;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state4_pp0_stage0_iter0;
wire    ap_block_state13_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] exitcond_flatten_reg_2653_pp0_iter1_reg;
wire   [9:0] indvar_flatten_next_fu_633_p2;
reg   [9:0] indvar_flatten_next_reg_2657;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] exitcond_fu_639_p2;
reg   [0:0] exitcond_reg_2662;
wire   [4:0] col_mid2_fu_645_p3;
reg   [4:0] col_mid2_reg_2668;
wire   [4:0] tmp_68_mid2_v_fu_659_p3;
reg   [4:0] tmp_68_mid2_v_reg_2676;
wire   [4:0] tmp_83_fu_667_p2;
reg   [4:0] tmp_83_reg_2683;
wire   [0:0] tmp_1107_fu_686_p1;
reg   [0:0] tmp_1107_reg_2694;
reg   [3:0] tmp_1108_reg_2699;
wire   [11:0] r_V_12_fu_704_p2;
reg   [11:0] r_V_12_reg_2704;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state5_pp0_stage1_iter0;
wire    ap_block_state14_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
reg   [7:0] p_Val2_24_reg_2709;
reg   [0:0] tmp_1059_reg_2714;
wire  signed [7:0] p_Val2_26_fu_799_p3;
reg  signed [7:0] p_Val2_26_reg_2724;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state6_pp0_stage2_iter0;
wire    ap_block_state15_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_11001;
wire   [11:0] r_V_12_0_0_1_fu_811_p2;
reg   [11:0] r_V_12_0_0_1_reg_2730;
reg   [7:0] p_Val2_28_0_0_1_reg_2735;
reg   [0:0] tmp_1065_reg_2740;
wire   [4:0] tmp_83_0_0_2_fu_834_p2;
reg   [4:0] tmp_83_0_0_2_reg_2745;
wire   [12:0] tmp_130_fu_854_p2;
reg   [12:0] tmp_130_reg_2757;
reg   [12:0] tmp_130_reg_2757_pp0_iter1_reg;
wire   [4:0] tmp_71_0_s_fu_860_p2;
reg   [4:0] tmp_71_0_s_reg_2762;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state7_pp0_stage3_iter0;
wire    ap_block_state16_pp0_stage3_iter1;
wire    ap_block_pp0_stage3_11001;
wire   [4:0] p_v_fu_866_p3;
reg   [4:0] p_v_reg_2767;
wire   [4:0] tmp_71_0_2_mid1_fu_873_p2;
reg   [4:0] tmp_71_0_2_mid1_reg_2774;
wire  signed [7:0] p_0461_5_0_0_1_fu_1010_p3;
reg  signed [7:0] p_0461_5_0_0_1_reg_2784;
wire   [5:0] p_Val2_29_0_0_2_fu_1049_p2;
reg   [5:0] p_Val2_29_0_0_2_reg_2790;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state8_pp0_stage4_iter0;
wire    ap_block_pp0_stage4_11001;
wire  signed [7:0] p_0461_5_0_0_2_fu_1148_p3;
reg  signed [7:0] p_0461_5_0_0_2_reg_2801;
wire   [11:0] r_V_12_0_1_fu_1160_p2;
reg   [11:0] r_V_12_0_1_reg_2807;
reg   [7:0] p_Val2_28_0_1_reg_2812;
reg   [0:0] tmp_1076_reg_2817;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state9_pp0_stage5_iter0;
wire    ap_block_pp0_stage5_11001;
wire  signed [7:0] p_0461_5_0_1_fu_1313_p3;
reg  signed [7:0] p_0461_5_0_1_reg_2827;
wire   [10:0] r_V_12_0_1_1_fu_1325_p2;
reg   [10:0] r_V_12_0_1_1_reg_2833;
reg   [6:0] tmp_103_reg_2838;
reg   [0:0] tmp_1081_reg_2843;
wire   [4:0] p_v4_fu_1348_p3;
reg   [4:0] p_v4_reg_2848;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_state10_pp0_stage6_iter0;
wire    ap_block_pp0_stage6_11001;
wire  signed [7:0] p_0461_5_0_1_1_fu_1488_p3;
reg  signed [7:0] p_0461_5_0_1_1_reg_2859;
wire   [11:0] r_V_12_0_1_2_fu_1500_p2;
reg   [11:0] r_V_12_0_1_2_reg_2865;
reg   [7:0] p_Val2_28_0_1_2_reg_2870;
reg   [0:0] tmp_1086_reg_2875;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_state11_pp0_stage7_iter0;
wire    ap_block_pp0_stage7_11001;
wire  signed [7:0] p_0461_5_0_1_2_fu_1653_p3;
reg  signed [7:0] p_0461_5_0_1_2_reg_2885;
wire   [11:0] r_V_12_0_2_fu_1665_p2;
reg   [11:0] r_V_12_0_2_reg_2891;
reg   [7:0] p_Val2_28_0_2_reg_2896;
reg   [0:0] tmp_1091_reg_2901;
wire    ap_CS_fsm_pp0_stage8;
wire    ap_block_state12_pp0_stage8_iter0;
wire    ap_block_pp0_stage8_11001;
wire  signed [7:0] p_0461_5_0_2_fu_1818_p3;
reg  signed [7:0] p_0461_5_0_2_reg_2911;
wire   [11:0] r_V_12_0_2_1_fu_1830_p2;
reg   [11:0] r_V_12_0_2_1_reg_2917;
reg   [7:0] p_Val2_28_0_2_1_reg_2922;
reg   [0:0] tmp_1096_reg_2927;
wire  signed [7:0] p_0461_5_0_2_1_fu_1972_p3;
reg  signed [7:0] p_0461_5_0_2_1_reg_2932;
wire   [10:0] r_V_12_0_2_2_fu_1984_p2;
reg   [10:0] r_V_12_0_2_2_reg_2938;
reg   [6:0] tmp_105_reg_2943;
reg   [0:0] tmp_1101_reg_2948;
wire   [0:0] tmp_151_cast_cast_fu_2007_p2;
reg   [0:0] tmp_151_cast_cast_reg_2953;
wire   [0:0] tmp_1109_fu_2026_p2;
reg   [0:0] tmp_1109_reg_2958;
wire   [4:0] tmp_1110_fu_2032_p1;
reg   [4:0] tmp_1110_reg_2964;
wire   [15:0] p_demorgan_fu_2082_p2;
reg   [15:0] p_demorgan_reg_2970;
wire  signed [7:0] p_0461_5_0_2_2_fu_2211_p3;
reg  signed [7:0] p_0461_5_0_2_2_reg_2975;
wire   [1:0] mask_fu_2222_p2;
reg   [1:0] mask_reg_2981;
wire   [15:0] tmp_1126_fu_2352_p2;
reg   [15:0] tmp_1126_reg_2986;
wire   [0:0] exitcond_flatten9_fu_2361_p2;
reg   [0:0] exitcond_flatten9_reg_2991;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state18_pp1_stage0_iter0;
wire    ap_block_state19_pp1_stage0_iter1;
wire    ap_block_state20_pp1_stage0_iter2;
wire    ap_block_state21_pp1_stage0_iter3;
wire    ap_block_pp1_stage0_11001;
reg   [0:0] exitcond_flatten9_reg_2991_pp1_iter1_reg;
reg   [0:0] exitcond_flatten9_reg_2991_pp1_iter2_reg;
wire   [8:0] indvar_flatten_next8_fu_2367_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [4:0] tmp_mid2_v_fu_2393_p3;
reg   [4:0] tmp_mid2_v_reg_3000;
reg   [11:0] output_V_addr_reg_3005;
reg   [11:0] output_V_addr_reg_3005_pp1_iter1_reg;
reg   [11:0] output_V_addr_reg_3005_pp1_iter2_reg;
wire   [4:0] col_3_1_fu_2457_p2;
wire   [6:0] p_0514_2_fu_2477_p3;
reg   [6:0] p_0514_2_reg_3016;
wire   [6:0] tmp_150_s_fu_2511_p3;
reg   [6:0] tmp_150_s_reg_3021;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state4;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage8_subdone;
wire    ap_block_pp0_stage3_subdone;
wire    ap_CS_fsm_state17;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state18;
reg    ap_enable_reg_pp1_iter1;
reg    ap_enable_reg_pp1_iter2;
reg    ap_enable_reg_pp1_iter3;
reg   [2:0] p_reg_418;
wire    ap_CS_fsm_state22;
reg   [9:0] ap_phi_mux_indvar_flatten_phi_fu_434_p4;
wire    ap_block_pp0_stage0;
reg   [4:0] ap_phi_mux_row_phi_fu_445_p4;
reg   [4:0] ap_phi_mux_col_phi_fu_457_p4;
reg   [4:0] ap_phi_mux_row1_phi_fu_479_p4;
wire    ap_block_pp1_stage0;
wire   [63:0] tmp_fu_509_p1;
wire   [63:0] tmp_121_fu_681_p1;
wire   [63:0] tmp_124_fu_733_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] tmp_127_fu_846_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] tmp_122_fu_886_p1;
wire    ap_block_pp0_stage3;
wire   [63:0] tmp_125_fu_1061_p1;
wire    ap_block_pp0_stage4;
wire   [63:0] tmp_128_fu_1189_p1;
wire    ap_block_pp0_stage5;
wire   [63:0] tmp_123_fu_1360_p1;
wire    ap_block_pp0_stage6;
wire   [63:0] tmp_126_fu_1529_p1;
wire    ap_block_pp0_stage7;
wire   [63:0] tmp_129_fu_1694_p1;
wire    ap_block_pp0_stage8;
wire   [63:0] tmp_260_cast_fu_2357_p1;
wire   [63:0] tmp_264_cast_fu_2452_p1;
wire   [7:0] tmp_111_fu_523_p3;
wire   [3:0] tmp_113_fu_535_p3;
wire   [8:0] p_shl_cast_fu_531_p1;
wire   [8:0] p_shl1_cast_fu_543_p1;
wire   [8:0] tmp_114_fu_547_p2;
wire   [0:0] tmp_1053_fu_593_p3;
wire   [1:0] p_Val2_cast_fu_601_p3;
wire   [1:0] tmp_76_cast_fu_609_p1;
wire  signed [1:0] p_Val2_s_fu_613_p2;
wire   [4:0] tmp_115_fu_653_p2;
wire   [9:0] tmp_1055_fu_673_p3;
wire  signed [3:0] r_V_12_fu_704_p0;
wire   [7:0] r_V_12_fu_704_p1;
wire   [9:0] tmp_1061_fu_727_p3;
wire   [9:0] tmp_68_mid2_cast_fu_738_p1;
wire  signed [9:0] tmp_118_fu_741_p2;
wire   [8:0] tmp_1054_fu_750_p1;
wire   [12:0] p_shl2_cast_fu_754_p3;
wire  signed [12:0] tmp_242_cast_fu_746_p1;
wire   [7:0] tmp_90_0_cast_fu_775_p1;
wire   [7:0] p_Val2_25_fu_778_p2;
wire   [0:0] tmp_1058_fu_768_p3;
wire   [0:0] tmp_1060_fu_783_p3;
wire   [7:0] phitmp_fu_791_p3;
wire  signed [3:0] r_V_12_0_0_1_fu_811_p0;
wire   [7:0] r_V_12_0_0_1_fu_811_p1;
wire   [9:0] tmp_1069_fu_839_p3;
wire   [12:0] tmp_120_fu_762_p2;
wire   [12:0] tmp_108_cast_fu_851_p1;
wire   [9:0] tmp_1056_fu_879_p3;
wire   [7:0] tmp_90_0_0_1_cast_fu_898_p1;
wire   [7:0] p_Val2_29_0_0_1_fu_901_p2;
wire   [0:0] tmp_1064_fu_891_p3;
wire   [0:0] tmp_1066_fu_906_p3;
wire   [7:0] phitmp_0_0_1_fu_914_p3;
wire  signed [7:0] p_Val2_30_0_0_1_fu_922_p3;
wire  signed [8:0] lhs_V_5_0_0_1_fu_930_p1;
wire  signed [8:0] rhs_V_6_0_0_1_fu_933_p1;
wire   [8:0] ret_V_0_0_1_fu_937_p2;
wire   [7:0] accumulation_V_0_0_1_fu_951_p2;
wire   [0:0] tmp_1068_fu_956_p3;
wire   [0:0] tmp_1067_fu_943_p3;
wire   [0:0] tmp_92_0_0_1_fu_964_p2;
wire   [0:0] signbit_i_i122_0_not_fu_982_p2;
wire   [0:0] brmerge38_0_0_1_fu_976_p2;
wire   [0:0] underflow_0_0_1_fu_970_p2;
wire   [0:0] brmerge39_0_0_1_fu_988_p2;
wire   [7:0] p_mux7_0_0_1_fu_994_p3;
wire   [7:0] p_5_0_0_1_fu_1002_p3;
wire   [1:0] r_V_12_0_0_2_fu_1022_p0;
wire   [7:0] r_V_12_0_0_2_fu_1022_p1;
wire   [9:0] r_V_12_0_0_2_fu_1022_p2;
wire   [0:0] tmp_1072_fu_1037_p3;
wire   [5:0] p_Val2_28_0_0_2_ca_fu_1027_p4;
wire   [5:0] tmp_90_0_0_2_cast_fu_1045_p1;
wire   [9:0] tmp_1062_fu_1055_p3;
wire   [8:0] rhs_V_6_0_0_2_fu_1072_p1;
wire  signed [8:0] lhs_V_5_0_0_2_fu_1069_p1;
wire   [8:0] ret_V_0_0_2_fu_1075_p2;
wire   [7:0] p_Val2_29_0_0_2_ca_fu_1066_p1;
wire   [7:0] accumulation_V_0_0_2_fu_1089_p2;
wire   [0:0] tmp_1074_fu_1094_p3;
wire   [0:0] tmp_1073_fu_1081_p3;
wire   [0:0] tmp_92_0_0_2_fu_1102_p2;
wire   [0:0] signbit_i_i122_0_not_109_fu_1120_p2;
wire   [0:0] brmerge38_0_0_2_fu_1114_p2;
wire   [0:0] underflow_0_0_2_fu_1108_p2;
wire   [0:0] brmerge39_0_0_2_fu_1126_p2;
wire   [7:0] p_mux7_0_0_2_fu_1132_p3;
wire   [7:0] p_5_0_0_2_fu_1140_p3;
wire  signed [3:0] r_V_12_0_1_fu_1160_p0;
wire   [7:0] r_V_12_0_1_fu_1160_p1;
wire   [9:0] tmp_1070_fu_1183_p3;
wire   [7:0] tmp_90_0_1_cast_fu_1201_p1;
wire   [7:0] p_Val2_29_0_1_fu_1204_p2;
wire   [0:0] tmp_1075_fu_1194_p3;
wire   [0:0] tmp_1077_fu_1209_p3;
wire   [7:0] phitmp_0_1_fu_1217_p3;
wire  signed [7:0] p_Val2_30_0_1_fu_1225_p3;
wire  signed [8:0] lhs_V_5_0_1_fu_1233_p1;
wire  signed [8:0] rhs_V_6_0_1_fu_1236_p1;
wire   [8:0] ret_V_0_1_fu_1240_p2;
wire   [7:0] accumulation_V_0_1_fu_1254_p2;
wire   [0:0] tmp_1079_fu_1259_p3;
wire   [0:0] tmp_1078_fu_1246_p3;
wire   [0:0] tmp_92_0_1_fu_1267_p2;
wire   [0:0] signbit_i_i122_0_not_103_fu_1285_p2;
wire   [0:0] brmerge38_0_1_fu_1279_p2;
wire   [0:0] underflow_0_1_fu_1273_p2;
wire   [0:0] brmerge39_0_1_fu_1291_p2;
wire   [7:0] p_mux7_0_1_fu_1297_p3;
wire   [7:0] p_5_0_1_fu_1305_p3;
wire  signed [2:0] r_V_12_0_1_1_fu_1325_p0;
wire   [7:0] r_V_12_0_1_1_fu_1325_p1;
wire   [9:0] tmp_1057_fu_1353_p3;
wire   [7:0] tmp_90_0_1_1_cast_fu_1375_p1;
wire  signed [7:0] tmp_104_fu_1372_p1;
wire   [7:0] p_Val2_29_0_1_1_fu_1378_p2;
wire   [0:0] tmp_1080_fu_1365_p3;
wire   [0:0] tmp_1082_fu_1384_p3;
wire   [7:0] phitmp_0_1_1_fu_1392_p3;
wire  signed [7:0] p_Val2_30_0_1_1_fu_1400_p3;
wire  signed [8:0] lhs_V_5_0_1_1_fu_1408_p1;
wire  signed [8:0] rhs_V_6_0_1_1_fu_1411_p1;
wire   [8:0] ret_V_0_1_1_fu_1415_p2;
wire   [7:0] accumulation_V_0_1_1_fu_1429_p2;
wire   [0:0] tmp_1084_fu_1434_p3;
wire   [0:0] tmp_1083_fu_1421_p3;
wire   [0:0] tmp_92_0_1_1_fu_1442_p2;
wire   [0:0] signbit_i_i122_0_not_104_fu_1460_p2;
wire   [0:0] brmerge38_0_1_1_fu_1454_p2;
wire   [0:0] underflow_0_1_1_fu_1448_p2;
wire   [0:0] brmerge39_0_1_1_fu_1466_p2;
wire   [7:0] p_mux7_0_1_1_fu_1472_p3;
wire   [7:0] p_5_0_1_1_fu_1480_p3;
wire  signed [3:0] r_V_12_0_1_2_fu_1500_p0;
wire   [7:0] r_V_12_0_1_2_fu_1500_p1;
wire   [9:0] tmp_1063_fu_1523_p3;
wire   [7:0] tmp_90_0_1_2_cast_fu_1541_p1;
wire   [7:0] p_Val2_29_0_1_2_fu_1544_p2;
wire   [0:0] tmp_1085_fu_1534_p3;
wire   [0:0] tmp_1087_fu_1549_p3;
wire   [7:0] phitmp_0_1_2_fu_1557_p3;
wire  signed [7:0] p_Val2_30_0_1_2_fu_1565_p3;
wire  signed [8:0] lhs_V_5_0_1_2_fu_1573_p1;
wire  signed [8:0] rhs_V_6_0_1_2_fu_1576_p1;
wire   [8:0] ret_V_0_1_2_fu_1580_p2;
wire   [7:0] accumulation_V_0_1_2_fu_1594_p2;
wire   [0:0] tmp_1089_fu_1599_p3;
wire   [0:0] tmp_1088_fu_1586_p3;
wire   [0:0] tmp_92_0_1_2_fu_1607_p2;
wire   [0:0] signbit_i_i122_0_not_105_fu_1625_p2;
wire   [0:0] brmerge38_0_1_2_fu_1619_p2;
wire   [0:0] underflow_0_1_2_fu_1613_p2;
wire   [0:0] brmerge39_0_1_2_fu_1631_p2;
wire   [7:0] p_mux7_0_1_2_fu_1637_p3;
wire   [7:0] p_5_0_1_2_fu_1645_p3;
wire  signed [3:0] r_V_12_0_2_fu_1665_p0;
wire   [7:0] r_V_12_0_2_fu_1665_p1;
wire   [9:0] tmp_1071_fu_1688_p3;
wire   [7:0] tmp_90_0_2_cast_fu_1706_p1;
wire   [7:0] p_Val2_29_0_2_fu_1709_p2;
wire   [0:0] tmp_1090_fu_1699_p3;
wire   [0:0] tmp_1092_fu_1714_p3;
wire   [7:0] phitmp_0_2_fu_1722_p3;
wire  signed [7:0] p_Val2_30_0_2_fu_1730_p3;
wire  signed [8:0] lhs_V_5_0_2_fu_1738_p1;
wire  signed [8:0] rhs_V_6_0_2_fu_1741_p1;
wire   [8:0] ret_V_0_2_fu_1745_p2;
wire   [7:0] accumulation_V_0_2_fu_1759_p2;
wire   [0:0] tmp_1094_fu_1764_p3;
wire   [0:0] tmp_1093_fu_1751_p3;
wire   [0:0] tmp_92_0_2_fu_1772_p2;
wire   [0:0] signbit_i_i122_0_not_106_fu_1790_p2;
wire   [0:0] brmerge38_0_2_fu_1784_p2;
wire   [0:0] underflow_0_2_fu_1778_p2;
wire   [0:0] brmerge39_0_2_fu_1796_p2;
wire   [7:0] p_mux7_0_2_fu_1802_p3;
wire   [7:0] p_5_0_2_fu_1810_p3;
wire  signed [3:0] r_V_12_0_2_1_fu_1830_p0;
wire   [7:0] r_V_12_0_2_1_fu_1830_p1;
wire   [7:0] tmp_90_0_2_1_cast_fu_1860_p1;
wire   [7:0] p_Val2_29_0_2_1_fu_1863_p2;
wire   [0:0] tmp_1095_fu_1853_p3;
wire   [0:0] tmp_1097_fu_1868_p3;
wire   [7:0] phitmp_0_2_1_fu_1876_p3;
wire  signed [7:0] p_Val2_30_0_2_1_fu_1884_p3;
wire  signed [8:0] lhs_V_5_0_2_1_fu_1892_p1;
wire  signed [8:0] rhs_V_6_0_2_1_fu_1895_p1;
wire   [8:0] ret_V_0_2_1_fu_1899_p2;
wire   [7:0] accumulation_V_0_2_1_fu_1913_p2;
wire   [0:0] tmp_1099_fu_1918_p3;
wire   [0:0] tmp_1098_fu_1905_p3;
wire   [0:0] tmp_92_0_2_1_fu_1926_p2;
wire   [0:0] signbit_i_i122_0_not_107_fu_1944_p2;
wire   [0:0] brmerge38_0_2_1_fu_1938_p2;
wire   [0:0] underflow_0_2_1_fu_1932_p2;
wire   [0:0] brmerge39_0_2_1_fu_1950_p2;
wire   [7:0] p_mux7_0_2_1_fu_1956_p3;
wire   [7:0] p_5_0_2_1_fu_1964_p3;
wire  signed [2:0] r_V_12_0_2_2_fu_1984_p0;
wire   [7:0] r_V_12_0_2_2_fu_1984_p1;
wire   [3:0] tmp_109_fu_2012_p3;
wire   [3:0] tmp_110_fu_2020_p2;
wire   [4:0] tmp_1111_fu_2036_p1;
wire   [4:0] tmp_1114_fu_2040_p3;
wire   [4:0] tmp_1115_fu_2048_p3;
wire   [4:0] tmp_1117_fu_2056_p2;
wire   [15:0] tmp_1119_fu_2062_p1;
wire   [15:0] tmp_1120_fu_2066_p1;
wire   [15:0] tmp_1124_fu_2070_p2;
wire   [15:0] tmp_1125_fu_2076_p2;
wire   [7:0] tmp_90_0_2_2_cast_fu_2098_p1;
wire  signed [7:0] tmp_106_fu_2095_p1;
wire   [7:0] p_Val2_29_0_2_2_fu_2101_p2;
wire   [0:0] tmp_1100_fu_2088_p3;
wire   [0:0] tmp_1102_fu_2107_p3;
wire   [7:0] phitmp_0_2_2_fu_2115_p3;
wire  signed [7:0] p_Val2_30_0_2_2_fu_2123_p3;
wire  signed [8:0] lhs_V_5_0_2_2_fu_2131_p1;
wire  signed [8:0] rhs_V_6_0_2_2_fu_2134_p1;
wire   [8:0] ret_V_0_2_2_fu_2138_p2;
wire   [7:0] accumulation_V_0_2_2_fu_2152_p2;
wire   [0:0] tmp_1104_fu_2157_p3;
wire   [0:0] tmp_1103_fu_2144_p3;
wire   [0:0] tmp_92_0_2_2_fu_2165_p2;
wire   [0:0] signbit_i_i122_0_not_108_fu_2183_p2;
wire   [0:0] brmerge38_0_2_2_fu_2177_p2;
wire   [0:0] underflow_0_2_2_fu_2171_p2;
wire   [0:0] brmerge39_0_2_2_fu_2189_p2;
wire   [7:0] p_mux7_0_2_2_fu_2195_p3;
wire   [7:0] p_5_0_2_2_fu_2203_p3;
wire   [1:0] tmp_1127_fu_2219_p1;
wire  signed [8:0] rhs_V_fu_2228_p1;
wire   [8:0] ret_V_7_fu_2231_p2;
wire   [7:0] p_Val2_21_fu_2244_p2;
wire   [0:0] tmp_1106_fu_2248_p3;
wire   [0:0] tmp_1105_fu_2236_p3;
wire   [0:0] tmp_80_fu_2256_p2;
wire   [0:0] signbit_i_i_i_i77_0_s_fu_2274_p2;
wire   [0:0] brmerge_fu_2268_p2;
wire   [0:0] underflow_12_fu_2262_p2;
wire   [0:0] brmerge17_fu_2280_p2;
wire   [7:0] p_mux_fu_2286_p3;
wire   [7:0] p_s_fu_2294_p3;
wire   [7:0] p_0306_1_fu_2302_p3;
wire   [4:0] tmp_1113_fu_2314_p2;
wire   [4:0] tmp_1116_fu_2319_p3;
wire   [15:0] tmp_1112_fu_2310_p1;
wire   [15:0] tmp_1118_fu_2325_p1;
wire   [15:0] tmp_1121_fu_2329_p2;
reg   [15:0] tmp_1122_fu_2335_p4;
wire   [15:0] tmp_1123_fu_2345_p3;
wire   [0:0] exitcond2_fu_2379_p2;
wire   [4:0] row_3_fu_2373_p2;
wire   [9:0] tmp_mid2_cast_fu_2401_p1;
wire  signed [9:0] tmp_131_fu_2405_p2;
wire   [8:0] tmp_1128_fu_2414_p1;
wire   [12:0] p_shl3_cast_fu_2418_p3;
wire  signed [12:0] tmp_261_cast_fu_2410_p1;
wire   [4:0] col2_mid2_fu_2385_p3;
wire   [3:0] tmp_1129_fu_2432_p4;
wire   [12:0] tmp_132_fu_2426_p2;
wire   [12:0] tmp_114_cast_fu_2442_p1;
wire   [12:0] tmp_133_fu_2446_p2;
wire   [7:0] tmp_1130_fu_2463_p1;
wire   [0:0] tmp_70_fu_2471_p2;
wire   [6:0] tmp_1131_fu_2467_p1;
wire   [7:0] tmp_116_fu_2485_p4;
wire   [0:0] tmp_70_1_fu_2505_p2;
wire   [6:0] tmp_149_cast_fu_2495_p4;
wire   [7:0] p_0514_2_cast_fu_2519_p1;
wire   [14:0] tmp_119_fu_2522_p3;
reg   [14:0] ap_NS_fsm;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage4_subdone;
wire    ap_block_pp0_stage5_subdone;
wire    ap_block_pp0_stage6_subdone;
wire    ap_block_pp0_stage7_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire   [11:0] r_V_12_0_0_1_fu_811_p10;
wire   [9:0] r_V_12_0_0_2_fu_1022_p10;
wire   [10:0] r_V_12_0_1_1_fu_1325_p10;
wire   [11:0] r_V_12_0_1_2_fu_1500_p10;
wire   [11:0] r_V_12_0_1_fu_1160_p10;
wire   [11:0] r_V_12_0_2_1_fu_1830_p10;
wire   [10:0] r_V_12_0_2_2_fu_1984_p10;
wire   [11:0] r_V_12_0_2_fu_1665_p10;
wire   [11:0] r_V_12_fu_704_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 15'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
end

conv_layer1_conv_1_weights_V_0_0 #(
    .DataWidth( 4 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
conv_1_weights_V_0_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_1_weights_V_0_0_address0),
    .ce0(conv_1_weights_V_0_0_ce0),
    .q0(conv_1_weights_V_0_0_q0)
);

conv_layer1_conv_1_weights_V_0_0_1 #(
    .DataWidth( 4 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
conv_1_weights_V_0_0_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_1_weights_V_0_0_1_address0),
    .ce0(conv_1_weights_V_0_0_1_ce0),
    .q0(conv_1_weights_V_0_0_1_q0)
);

conv_layer1_conv_1_weights_V_0_0_2 #(
    .DataWidth( 2 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
conv_1_weights_V_0_0_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_1_weights_V_0_0_2_address0),
    .ce0(conv_1_weights_V_0_0_2_ce0),
    .q0(conv_1_weights_V_0_0_2_q0)
);

conv_layer1_conv_1_weights_V_0_1 #(
    .DataWidth( 4 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
conv_1_weights_V_0_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_1_weights_V_0_1_address0),
    .ce0(conv_1_weights_V_0_1_ce0),
    .q0(conv_1_weights_V_0_1_q0)
);

conv_layer1_conv_1_weights_V_0_1_1 #(
    .DataWidth( 3 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
conv_1_weights_V_0_1_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_1_weights_V_0_1_1_address0),
    .ce0(conv_1_weights_V_0_1_1_ce0),
    .q0(conv_1_weights_V_0_1_1_q0)
);

conv_layer1_conv_1_weights_V_0_1_2 #(
    .DataWidth( 4 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
conv_1_weights_V_0_1_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_1_weights_V_0_1_2_address0),
    .ce0(conv_1_weights_V_0_1_2_ce0),
    .q0(conv_1_weights_V_0_1_2_q0)
);

conv_layer1_conv_1_weights_V_0_2 #(
    .DataWidth( 4 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
conv_1_weights_V_0_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_1_weights_V_0_2_address0),
    .ce0(conv_1_weights_V_0_2_ce0),
    .q0(conv_1_weights_V_0_2_q0)
);

conv_layer1_conv_1_weights_V_0_2_1 #(
    .DataWidth( 4 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
conv_1_weights_V_0_2_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_1_weights_V_0_2_1_address0),
    .ce0(conv_1_weights_V_0_2_1_ce0),
    .q0(conv_1_weights_V_0_2_1_q0)
);

conv_layer1_conv_1_weights_V_0_2_2 #(
    .DataWidth( 3 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
conv_1_weights_V_0_2_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_1_weights_V_0_2_2_address0),
    .ce0(conv_1_weights_V_0_2_2_ce0),
    .q0(conv_1_weights_V_0_2_2_q0)
);

conv_layer1_conv_1_biases_V #(
    .DataWidth( 3 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
conv_1_biases_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_1_biases_V_address0),
    .ce0(conv_1_biases_V_ce0),
    .q0(conv_1_biases_V_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state4) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage8_subdone) & (1'b1 == ap_CS_fsm_pp0_stage8)) | ((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state18) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state17)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state18)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state18);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end else if ((1'b1 == ap_CS_fsm_state17)) begin
            ap_enable_reg_pp1_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_flatten9_fu_2361_p2 == 1'd0))) begin
        col2_reg_486 <= col_3_1_fu_2457_p2;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        col2_reg_486 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_2653 == 1'd0))) begin
        col_reg_453 <= tmp_83_0_0_2_reg_2745;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        col_reg_453 <= 5'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_flatten9_fu_2361_p2 == 1'd0))) begin
        indvar_flatten7_reg_464 <= indvar_flatten_next8_fu_2367_p2;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        indvar_flatten7_reg_464 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_2653 == 1'd0))) begin
        indvar_flatten_reg_430 <= indvar_flatten_next_reg_2657;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        indvar_flatten_reg_430 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        p_reg_418 <= p_5_reg_2537;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_reg_418 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_flatten9_reg_2991 == 1'd0))) begin
        row1_reg_475 <= tmp_mid2_v_reg_3000;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        row1_reg_475 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_2653 == 1'd0))) begin
        row_reg_441 <= p_v_reg_2767;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        row_reg_441 <= 5'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_fu_627_p2 == 1'd0))) begin
        col_mid2_reg_2668 <= col_mid2_fu_645_p3;
        exitcond_reg_2662 <= exitcond_fu_639_p2;
        tmp_1107_reg_2694 <= tmp_1107_fu_686_p1;
        tmp_1108_reg_2699 <= {{tmp_83_fu_667_p2[4:1]}};
        tmp_68_mid2_v_reg_2676 <= tmp_68_mid2_v_fu_659_p3;
        tmp_83_reg_2683 <= tmp_83_fu_667_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        exitcond_flatten9_reg_2991 <= exitcond_flatten9_fu_2361_p2;
        exitcond_flatten9_reg_2991_pp1_iter1_reg <= exitcond_flatten9_reg_2991;
        output_V_addr_reg_3005_pp1_iter1_reg <= output_V_addr_reg_3005;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        exitcond_flatten9_reg_2991_pp1_iter2_reg <= exitcond_flatten9_reg_2991_pp1_iter1_reg;
        output_V_addr_reg_3005_pp1_iter2_reg <= output_V_addr_reg_3005_pp1_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond_flatten_reg_2653 <= exitcond_flatten_fu_627_p2;
        exitcond_flatten_reg_2653_pp0_iter1_reg <= exitcond_flatten_reg_2653;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_next_reg_2657 <= indvar_flatten_next_fu_633_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        lhs_V_reg_2648 <= lhs_V_fu_623_p1;
        p_Val2_24_cast_reg_2643 <= p_Val2_24_cast_fu_619_p1;
        tmp_238_cast_reg_2592[9 : 1] <= tmp_238_cast_fu_553_p1[9 : 1];
        tmp_86_0_0_1_reg_2603 <= tmp_86_0_0_1_fu_561_p1;
        tmp_86_0_0_2_cast_reg_2608[1 : 0] <= tmp_86_0_0_2_cast_fu_565_p1[1 : 0];
        tmp_86_0_1_1_cast_reg_2618 <= tmp_86_0_1_1_cast_fu_573_p1;
        tmp_86_0_1_2_reg_2623 <= tmp_86_0_1_2_fu_577_p1;
        tmp_86_0_1_reg_2613 <= tmp_86_0_1_fu_569_p1;
        tmp_86_0_2_1_reg_2633 <= tmp_86_0_2_1_fu_585_p1;
        tmp_86_0_2_2_cast_reg_2638 <= tmp_86_0_2_2_cast_fu_589_p1;
        tmp_86_0_2_reg_2628 <= tmp_86_0_2_fu_581_p1;
        tmp_86_reg_2598 <= tmp_86_fu_557_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (exitcond_flatten_reg_2653_pp0_iter1_reg == 1'd0))) begin
        mask_reg_2981 <= mask_fu_2222_p2;
        p_0461_5_0_2_2_reg_2975 <= p_0461_5_0_2_2_fu_2211_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_flatten9_fu_2361_p2 == 1'd0))) begin
        output_V_addr_reg_3005 <= tmp_264_cast_fu_2452_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (exitcond_flatten_reg_2653 == 1'd0))) begin
        p_0461_5_0_0_1_reg_2784 <= p_0461_5_0_0_1_fu_1010_p3;
        p_Val2_29_0_0_2_reg_2790 <= p_Val2_29_0_0_2_fu_1049_p2;
        tmp_71_0_s_reg_2762 <= tmp_71_0_s_fu_860_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (exitcond_flatten_reg_2653 == 1'd0))) begin
        p_0461_5_0_0_2_reg_2801 <= p_0461_5_0_0_2_fu_1148_p3;
        p_Val2_28_0_1_reg_2812 <= {{r_V_12_0_1_fu_1160_p2[11:4]}};
        r_V_12_0_1_reg_2807 <= r_V_12_0_1_fu_1160_p2;
        tmp_1076_reg_2817 <= r_V_12_0_1_fu_1160_p2[32'd3];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6) & (exitcond_flatten_reg_2653 == 1'd0))) begin
        p_0461_5_0_1_1_reg_2859 <= p_0461_5_0_1_1_fu_1488_p3;
        p_Val2_28_0_1_2_reg_2870 <= {{r_V_12_0_1_2_fu_1500_p2[11:4]}};
        p_v4_reg_2848 <= p_v4_fu_1348_p3;
        r_V_12_0_1_2_reg_2865 <= r_V_12_0_1_2_fu_1500_p2;
        tmp_1086_reg_2875 <= r_V_12_0_1_2_fu_1500_p2[32'd3];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7) & (exitcond_flatten_reg_2653 == 1'd0))) begin
        p_0461_5_0_1_2_reg_2885 <= p_0461_5_0_1_2_fu_1653_p3;
        p_Val2_28_0_2_reg_2896 <= {{r_V_12_0_2_fu_1665_p2[11:4]}};
        r_V_12_0_2_reg_2891 <= r_V_12_0_2_fu_1665_p2;
        tmp_1091_reg_2901 <= r_V_12_0_2_fu_1665_p2[32'd3];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5) & (exitcond_flatten_reg_2653 == 1'd0))) begin
        p_0461_5_0_1_reg_2827 <= p_0461_5_0_1_fu_1313_p3;
        r_V_12_0_1_1_reg_2833 <= r_V_12_0_1_1_fu_1325_p2;
        tmp_103_reg_2838 <= {{r_V_12_0_1_1_fu_1325_p2[10:4]}};
        tmp_1081_reg_2843 <= r_V_12_0_1_1_fu_1325_p2[32'd3];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_2653 == 1'd0))) begin
        p_0461_5_0_2_1_reg_2932 <= p_0461_5_0_2_1_fu_1972_p3;
        p_demorgan_reg_2970 <= p_demorgan_fu_2082_p2;
        r_V_12_0_2_2_reg_2938 <= r_V_12_0_2_2_fu_1984_p2;
        tmp_105_reg_2943 <= {{r_V_12_0_2_2_fu_1984_p2[10:4]}};
        tmp_1101_reg_2948 <= r_V_12_0_2_2_fu_1984_p2[32'd3];
        tmp_1109_reg_2958 <= tmp_1109_fu_2026_p2;
        tmp_1110_reg_2964[3] <= tmp_1110_fu_2032_p1[3];
        tmp_151_cast_cast_reg_2953 <= tmp_151_cast_cast_fu_2007_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8) & (exitcond_flatten_reg_2653 == 1'd0))) begin
        p_0461_5_0_2_reg_2911 <= p_0461_5_0_2_fu_1818_p3;
        p_Val2_28_0_2_1_reg_2922 <= {{r_V_12_0_2_1_fu_1830_p2[11:4]}};
        r_V_12_0_2_1_reg_2917 <= r_V_12_0_2_1_fu_1830_p2;
        tmp_1096_reg_2927 <= r_V_12_0_2_1_fu_1830_p2[32'd3];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond_flatten9_reg_2991_pp1_iter1_reg == 1'd0))) begin
        p_0514_2_reg_3016 <= p_0514_2_fu_2477_p3;
        tmp_150_s_reg_3021 <= tmp_150_s_fu_2511_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        p_5_reg_2537 <= p_5_fu_503_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (exitcond_flatten_reg_2653 == 1'd0))) begin
        p_Val2_24_reg_2709 <= {{r_V_12_fu_704_p2[11:4]}};
        r_V_12_reg_2704 <= r_V_12_fu_704_p2;
        tmp_1059_reg_2714 <= r_V_12_fu_704_p2[32'd3];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (exitcond_flatten_reg_2653 == 1'd0))) begin
        p_Val2_26_reg_2724 <= p_Val2_26_fu_799_p3;
        p_Val2_28_0_0_1_reg_2735 <= {{r_V_12_0_0_1_fu_811_p2[11:4]}};
        r_V_12_0_0_1_reg_2730 <= r_V_12_0_0_1_fu_811_p2;
        tmp_1065_reg_2740 <= r_V_12_0_0_1_fu_811_p2[32'd3];
        tmp_130_reg_2757 <= tmp_130_fu_854_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_flatten_reg_2653 == 1'd0))) begin
        p_v_reg_2767 <= p_v_fu_866_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (exitcond_flatten_reg_2653_pp0_iter1_reg == 1'd0))) begin
        tmp_1126_reg_2986 <= tmp_1126_fu_2352_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        tmp_130_reg_2757_pp0_iter1_reg <= tmp_130_reg_2757;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (exitcond_reg_2662 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (exitcond_flatten_reg_2653 == 1'd0))) begin
        tmp_71_0_2_mid1_reg_2774 <= tmp_71_0_2_mid1_fu_873_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_flatten_reg_2653 == 1'd0))) begin
        tmp_83_0_0_2_reg_2745 <= tmp_83_0_0_2_fu_834_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_flatten9_fu_2361_p2 == 1'd0))) begin
        tmp_mid2_v_reg_3000 <= tmp_mid2_v_fu_2393_p3;
    end
end

always @ (*) begin
    if ((exitcond_flatten_fu_627_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_flatten9_fu_2361_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state18 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state18 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_497_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_2653 == 1'd0))) begin
        ap_phi_mux_col_phi_fu_457_p4 = tmp_83_0_0_2_reg_2745;
    end else begin
        ap_phi_mux_col_phi_fu_457_p4 = col_reg_453;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_2653 == 1'd0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_434_p4 = indvar_flatten_next_reg_2657;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_434_p4 = indvar_flatten_reg_430;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_flatten9_reg_2991 == 1'd0))) begin
        ap_phi_mux_row1_phi_fu_479_p4 = tmp_mid2_v_reg_3000;
    end else begin
        ap_phi_mux_row1_phi_fu_479_p4 = row1_reg_475;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_2653 == 1'd0))) begin
        ap_phi_mux_row_phi_fu_445_p4 = p_v_reg_2767;
    end else begin
        ap_phi_mux_row_phi_fu_445_p4 = row_reg_441;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_497_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        conv_1_biases_V_ce0 = 1'b1;
    end else begin
        conv_1_biases_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        conv_1_weights_V_0_0_1_ce0 = 1'b1;
    end else begin
        conv_1_weights_V_0_0_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        conv_1_weights_V_0_0_2_ce0 = 1'b1;
    end else begin
        conv_1_weights_V_0_0_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        conv_1_weights_V_0_0_ce0 = 1'b1;
    end else begin
        conv_1_weights_V_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        conv_1_weights_V_0_1_1_ce0 = 1'b1;
    end else begin
        conv_1_weights_V_0_1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        conv_1_weights_V_0_1_2_ce0 = 1'b1;
    end else begin
        conv_1_weights_V_0_1_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        conv_1_weights_V_0_1_ce0 = 1'b1;
    end else begin
        conv_1_weights_V_0_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        conv_1_weights_V_0_2_1_ce0 = 1'b1;
    end else begin
        conv_1_weights_V_0_2_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        conv_1_weights_V_0_2_2_ce0 = 1'b1;
    end else begin
        conv_1_weights_V_0_2_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        conv_1_weights_V_0_2_ce0 = 1'b1;
    end else begin
        conv_1_weights_V_0_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage8) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
            input_V_address0 = tmp_129_fu_1694_p1;
        end else if (((1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
            input_V_address0 = tmp_126_fu_1529_p1;
        end else if (((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
            input_V_address0 = tmp_123_fu_1360_p1;
        end else if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            input_V_address0 = tmp_128_fu_1189_p1;
        end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            input_V_address0 = tmp_125_fu_1061_p1;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            input_V_address0 = tmp_122_fu_886_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            input_V_address0 = tmp_127_fu_846_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            input_V_address0 = tmp_124_fu_733_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            input_V_address0 = tmp_121_fu_681_p1;
        end else begin
            input_V_address0 = 'bx;
        end
    end else begin
        input_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        input_V_ce0 = 1'b1;
    end else begin
        input_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        output_V_address0 = output_V_addr_reg_3005;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        output_V_address0 = tmp_260_cast_fu_2357_p1;
    end else begin
        output_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
        output_V_ce0 = 1'b1;
    end else begin
        output_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        output_V_ce1 = 1'b1;
    end else begin
        output_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (exitcond_flatten_reg_2653_pp0_iter1_reg == 1'd0))) begin
        output_V_we0 = mask_reg_2981;
    end else begin
        output_V_we0 = 2'd0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1) & (exitcond_flatten9_reg_2991_pp1_iter2_reg == 1'd0))) begin
        output_V_we1 = 2'd3;
    end else begin
        output_V_we1 = 2'd0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_497_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_flatten_fu_627_p2 == 1'd1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_flatten_fu_627_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((~((1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) & (1'b0 == ap_block_pp0_stage3_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else if (((1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_pp0_stage8 : begin
            if ((1'b0 == ap_block_pp0_stage8_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (exitcond_flatten9_fu_2361_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1)) & ~((ap_enable_reg_pp1_iter2 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter3 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter2 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter3 == 1'b1)) | ((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (exitcond_flatten9_fu_2361_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign accumulation_V_0_0_1_fu_951_p2 = ($signed(p_Val2_30_0_0_1_fu_922_p3) + $signed(p_Val2_26_reg_2724));

assign accumulation_V_0_0_2_fu_1089_p2 = ($signed(p_0461_5_0_0_1_reg_2784) + $signed(p_Val2_29_0_0_2_ca_fu_1066_p1));

assign accumulation_V_0_1_1_fu_1429_p2 = ($signed(p_Val2_30_0_1_1_fu_1400_p3) + $signed(p_0461_5_0_1_reg_2827));

assign accumulation_V_0_1_2_fu_1594_p2 = ($signed(p_Val2_30_0_1_2_fu_1565_p3) + $signed(p_0461_5_0_1_1_reg_2859));

assign accumulation_V_0_1_fu_1254_p2 = ($signed(p_Val2_30_0_1_fu_1225_p3) + $signed(p_0461_5_0_0_2_reg_2801));

assign accumulation_V_0_2_1_fu_1913_p2 = ($signed(p_Val2_30_0_2_1_fu_1884_p3) + $signed(p_0461_5_0_2_reg_2911));

assign accumulation_V_0_2_2_fu_2152_p2 = ($signed(p_Val2_30_0_2_2_fu_2123_p3) + $signed(p_0461_5_0_2_1_reg_2932));

assign accumulation_V_0_2_fu_1759_p2 = ($signed(p_Val2_30_0_2_fu_1730_p3) + $signed(p_0461_5_0_1_2_reg_2885));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp0_stage8 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage8_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign brmerge17_fu_2280_p2 = (tmp_1106_fu_2248_p3 | signbit_i_i_i_i77_0_s_fu_2274_p2);

assign brmerge38_0_0_1_fu_976_p2 = (tmp_1068_fu_956_p3 ^ tmp_1067_fu_943_p3);

assign brmerge38_0_0_2_fu_1114_p2 = (tmp_1074_fu_1094_p3 ^ tmp_1073_fu_1081_p3);

assign brmerge38_0_1_1_fu_1454_p2 = (tmp_1084_fu_1434_p3 ^ tmp_1083_fu_1421_p3);

assign brmerge38_0_1_2_fu_1619_p2 = (tmp_1089_fu_1599_p3 ^ tmp_1088_fu_1586_p3);

assign brmerge38_0_1_fu_1279_p2 = (tmp_1079_fu_1259_p3 ^ tmp_1078_fu_1246_p3);

assign brmerge38_0_2_1_fu_1938_p2 = (tmp_1099_fu_1918_p3 ^ tmp_1098_fu_1905_p3);

assign brmerge38_0_2_2_fu_2177_p2 = (tmp_1104_fu_2157_p3 ^ tmp_1103_fu_2144_p3);

assign brmerge38_0_2_fu_1784_p2 = (tmp_1094_fu_1764_p3 ^ tmp_1093_fu_1751_p3);

assign brmerge39_0_0_1_fu_988_p2 = (tmp_1068_fu_956_p3 | signbit_i_i122_0_not_fu_982_p2);

assign brmerge39_0_0_2_fu_1126_p2 = (tmp_1074_fu_1094_p3 | signbit_i_i122_0_not_109_fu_1120_p2);

assign brmerge39_0_1_1_fu_1466_p2 = (tmp_1084_fu_1434_p3 | signbit_i_i122_0_not_104_fu_1460_p2);

assign brmerge39_0_1_2_fu_1631_p2 = (tmp_1089_fu_1599_p3 | signbit_i_i122_0_not_105_fu_1625_p2);

assign brmerge39_0_1_fu_1291_p2 = (tmp_1079_fu_1259_p3 | signbit_i_i122_0_not_103_fu_1285_p2);

assign brmerge39_0_2_1_fu_1950_p2 = (tmp_1099_fu_1918_p3 | signbit_i_i122_0_not_107_fu_1944_p2);

assign brmerge39_0_2_2_fu_2189_p2 = (tmp_1104_fu_2157_p3 | signbit_i_i122_0_not_108_fu_2183_p2);

assign brmerge39_0_2_fu_1796_p2 = (tmp_1094_fu_1764_p3 | signbit_i_i122_0_not_106_fu_1790_p2);

assign brmerge_fu_2268_p2 = (tmp_1106_fu_2248_p3 ^ tmp_1105_fu_2236_p3);

assign col2_mid2_fu_2385_p3 = ((exitcond2_fu_2379_p2[0:0] === 1'b1) ? 5'd0 : col2_reg_486);

assign col_3_1_fu_2457_p2 = (5'd2 + col2_mid2_fu_2385_p3);

assign col_mid2_fu_645_p3 = ((exitcond_fu_639_p2[0:0] === 1'b1) ? 5'd1 : ap_phi_mux_col_phi_fu_457_p4);

assign conv_1_biases_V_address0 = tmp_fu_509_p1;

assign conv_1_weights_V_0_0_1_address0 = tmp_fu_509_p1;

assign conv_1_weights_V_0_0_2_address0 = tmp_fu_509_p1;

assign conv_1_weights_V_0_0_address0 = tmp_fu_509_p1;

assign conv_1_weights_V_0_1_1_address0 = tmp_fu_509_p1;

assign conv_1_weights_V_0_1_2_address0 = tmp_fu_509_p1;

assign conv_1_weights_V_0_1_address0 = tmp_fu_509_p1;

assign conv_1_weights_V_0_2_1_address0 = tmp_fu_509_p1;

assign conv_1_weights_V_0_2_2_address0 = tmp_fu_509_p1;

assign conv_1_weights_V_0_2_address0 = tmp_fu_509_p1;

assign exitcond2_fu_2379_p2 = ((col2_reg_486 == 5'd30) ? 1'b1 : 1'b0);

assign exitcond3_fu_497_p2 = ((p_reg_418 == 3'd6) ? 1'b1 : 1'b0);

assign exitcond_flatten9_fu_2361_p2 = ((indvar_flatten7_reg_464 == 9'd450) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_627_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_434_p4 == 10'd900) ? 1'b1 : 1'b0);

assign exitcond_fu_639_p2 = ((ap_phi_mux_col_phi_fu_457_p4 == 5'd31) ? 1'b1 : 1'b0);

assign indvar_flatten_next8_fu_2367_p2 = (indvar_flatten7_reg_464 + 9'd1);

assign indvar_flatten_next_fu_633_p2 = (ap_phi_mux_indvar_flatten_phi_fu_434_p4 + 10'd1);

assign lhs_V_5_0_0_1_fu_930_p1 = p_Val2_26_reg_2724;

assign lhs_V_5_0_0_2_fu_1069_p1 = p_0461_5_0_0_1_reg_2784;

assign lhs_V_5_0_1_1_fu_1408_p1 = p_0461_5_0_1_reg_2827;

assign lhs_V_5_0_1_2_fu_1573_p1 = p_0461_5_0_1_1_reg_2859;

assign lhs_V_5_0_1_fu_1233_p1 = p_0461_5_0_0_2_reg_2801;

assign lhs_V_5_0_2_1_fu_1892_p1 = p_0461_5_0_2_reg_2911;

assign lhs_V_5_0_2_2_fu_2131_p1 = p_0461_5_0_2_1_reg_2932;

assign lhs_V_5_0_2_fu_1738_p1 = p_0461_5_0_1_2_reg_2885;

assign lhs_V_fu_623_p1 = p_Val2_s_fu_613_p2;

assign mask_fu_2222_p2 = 2'd1 << tmp_1127_fu_2219_p1;

assign output_V_address1 = output_V_addr_reg_3005_pp1_iter2_reg;

assign output_V_d0 = tmp_1126_reg_2986;

assign output_V_d1 = tmp_119_fu_2522_p3;

assign p_0306_1_fu_2302_p3 = ((brmerge17_fu_2280_p2[0:0] === 1'b1) ? p_mux_fu_2286_p3 : p_s_fu_2294_p3);

assign p_0461_5_0_0_1_fu_1010_p3 = ((brmerge39_0_0_1_fu_988_p2[0:0] === 1'b1) ? p_mux7_0_0_1_fu_994_p3 : p_5_0_0_1_fu_1002_p3);

assign p_0461_5_0_0_2_fu_1148_p3 = ((brmerge39_0_0_2_fu_1126_p2[0:0] === 1'b1) ? p_mux7_0_0_2_fu_1132_p3 : p_5_0_0_2_fu_1140_p3);

assign p_0461_5_0_1_1_fu_1488_p3 = ((brmerge39_0_1_1_fu_1466_p2[0:0] === 1'b1) ? p_mux7_0_1_1_fu_1472_p3 : p_5_0_1_1_fu_1480_p3);

assign p_0461_5_0_1_2_fu_1653_p3 = ((brmerge39_0_1_2_fu_1631_p2[0:0] === 1'b1) ? p_mux7_0_1_2_fu_1637_p3 : p_5_0_1_2_fu_1645_p3);

assign p_0461_5_0_1_fu_1313_p3 = ((brmerge39_0_1_fu_1291_p2[0:0] === 1'b1) ? p_mux7_0_1_fu_1297_p3 : p_5_0_1_fu_1305_p3);

assign p_0461_5_0_2_1_fu_1972_p3 = ((brmerge39_0_2_1_fu_1950_p2[0:0] === 1'b1) ? p_mux7_0_2_1_fu_1956_p3 : p_5_0_2_1_fu_1964_p3);

assign p_0461_5_0_2_2_fu_2211_p3 = ((brmerge39_0_2_2_fu_2189_p2[0:0] === 1'b1) ? p_mux7_0_2_2_fu_2195_p3 : p_5_0_2_2_fu_2203_p3);

assign p_0461_5_0_2_fu_1818_p3 = ((brmerge39_0_2_fu_1796_p2[0:0] === 1'b1) ? p_mux7_0_2_fu_1802_p3 : p_5_0_2_fu_1810_p3);

assign p_0514_2_cast_fu_2519_p1 = p_0514_2_reg_3016;

assign p_0514_2_fu_2477_p3 = ((tmp_70_fu_2471_p2[0:0] === 1'b1) ? tmp_1131_fu_2467_p1 : 7'd0);

assign p_5_0_0_1_fu_1002_p3 = ((underflow_0_0_1_fu_970_p2[0:0] === 1'b1) ? 8'd128 : accumulation_V_0_0_1_fu_951_p2);

assign p_5_0_0_2_fu_1140_p3 = ((underflow_0_0_2_fu_1108_p2[0:0] === 1'b1) ? 8'd128 : accumulation_V_0_0_2_fu_1089_p2);

assign p_5_0_1_1_fu_1480_p3 = ((underflow_0_1_1_fu_1448_p2[0:0] === 1'b1) ? 8'd128 : accumulation_V_0_1_1_fu_1429_p2);

assign p_5_0_1_2_fu_1645_p3 = ((underflow_0_1_2_fu_1613_p2[0:0] === 1'b1) ? 8'd128 : accumulation_V_0_1_2_fu_1594_p2);

assign p_5_0_1_fu_1305_p3 = ((underflow_0_1_fu_1273_p2[0:0] === 1'b1) ? 8'd128 : accumulation_V_0_1_fu_1254_p2);

assign p_5_0_2_1_fu_1964_p3 = ((underflow_0_2_1_fu_1932_p2[0:0] === 1'b1) ? 8'd128 : accumulation_V_0_2_1_fu_1913_p2);

assign p_5_0_2_2_fu_2203_p3 = ((underflow_0_2_2_fu_2171_p2[0:0] === 1'b1) ? 8'd128 : accumulation_V_0_2_2_fu_2152_p2);

assign p_5_0_2_fu_1810_p3 = ((underflow_0_2_fu_1778_p2[0:0] === 1'b1) ? 8'd128 : accumulation_V_0_2_fu_1759_p2);

assign p_5_fu_503_p2 = (p_reg_418 + 3'd1);

assign p_Val2_21_fu_2244_p2 = ($signed(p_0461_5_0_2_2_reg_2975) + $signed(p_Val2_24_cast_reg_2643));

assign p_Val2_24_cast_fu_619_p1 = p_Val2_s_fu_613_p2;

assign p_Val2_25_fu_778_p2 = (tmp_90_0_cast_fu_775_p1 + p_Val2_24_reg_2709);

assign p_Val2_26_fu_799_p3 = ((tmp_1060_fu_783_p3[0:0] === 1'b1) ? phitmp_fu_791_p3 : p_Val2_25_fu_778_p2);

assign p_Val2_28_0_0_2_ca_fu_1027_p4 = {{r_V_12_0_0_2_fu_1022_p2[9:4]}};

assign p_Val2_29_0_0_1_fu_901_p2 = (tmp_90_0_0_1_cast_fu_898_p1 + p_Val2_28_0_0_1_reg_2735);

assign p_Val2_29_0_0_2_ca_fu_1066_p1 = p_Val2_29_0_0_2_reg_2790;

assign p_Val2_29_0_0_2_fu_1049_p2 = (p_Val2_28_0_0_2_ca_fu_1027_p4 + tmp_90_0_0_2_cast_fu_1045_p1);

assign p_Val2_29_0_1_1_fu_1378_p2 = ($signed(tmp_90_0_1_1_cast_fu_1375_p1) + $signed(tmp_104_fu_1372_p1));

assign p_Val2_29_0_1_2_fu_1544_p2 = (tmp_90_0_1_2_cast_fu_1541_p1 + p_Val2_28_0_1_2_reg_2870);

assign p_Val2_29_0_1_fu_1204_p2 = (tmp_90_0_1_cast_fu_1201_p1 + p_Val2_28_0_1_reg_2812);

assign p_Val2_29_0_2_1_fu_1863_p2 = (tmp_90_0_2_1_cast_fu_1860_p1 + p_Val2_28_0_2_1_reg_2922);

assign p_Val2_29_0_2_2_fu_2101_p2 = ($signed(tmp_90_0_2_2_cast_fu_2098_p1) + $signed(tmp_106_fu_2095_p1));

assign p_Val2_29_0_2_fu_1709_p2 = (tmp_90_0_2_cast_fu_1706_p1 + p_Val2_28_0_2_reg_2896);

assign p_Val2_30_0_0_1_fu_922_p3 = ((tmp_1066_fu_906_p3[0:0] === 1'b1) ? phitmp_0_0_1_fu_914_p3 : p_Val2_29_0_0_1_fu_901_p2);

assign p_Val2_30_0_1_1_fu_1400_p3 = ((tmp_1082_fu_1384_p3[0:0] === 1'b1) ? phitmp_0_1_1_fu_1392_p3 : p_Val2_29_0_1_1_fu_1378_p2);

assign p_Val2_30_0_1_2_fu_1565_p3 = ((tmp_1087_fu_1549_p3[0:0] === 1'b1) ? phitmp_0_1_2_fu_1557_p3 : p_Val2_29_0_1_2_fu_1544_p2);

assign p_Val2_30_0_1_fu_1225_p3 = ((tmp_1077_fu_1209_p3[0:0] === 1'b1) ? phitmp_0_1_fu_1217_p3 : p_Val2_29_0_1_fu_1204_p2);

assign p_Val2_30_0_2_1_fu_1884_p3 = ((tmp_1097_fu_1868_p3[0:0] === 1'b1) ? phitmp_0_2_1_fu_1876_p3 : p_Val2_29_0_2_1_fu_1863_p2);

assign p_Val2_30_0_2_2_fu_2123_p3 = ((tmp_1102_fu_2107_p3[0:0] === 1'b1) ? phitmp_0_2_2_fu_2115_p3 : p_Val2_29_0_2_2_fu_2101_p2);

assign p_Val2_30_0_2_fu_1730_p3 = ((tmp_1092_fu_1714_p3[0:0] === 1'b1) ? phitmp_0_2_fu_1722_p3 : p_Val2_29_0_2_fu_1709_p2);

assign p_Val2_cast_fu_601_p3 = ((tmp_1053_fu_593_p3[0:0] === 1'b1) ? 2'd3 : 2'd0);

assign p_Val2_s_fu_613_p2 = (p_Val2_cast_fu_601_p3 + tmp_76_cast_fu_609_p1);

assign p_demorgan_fu_2082_p2 = (tmp_1125_fu_2076_p2 & tmp_1124_fu_2070_p2);

assign p_mux7_0_0_1_fu_994_p3 = ((brmerge38_0_0_1_fu_976_p2[0:0] === 1'b1) ? 8'd127 : accumulation_V_0_0_1_fu_951_p2);

assign p_mux7_0_0_2_fu_1132_p3 = ((brmerge38_0_0_2_fu_1114_p2[0:0] === 1'b1) ? 8'd127 : accumulation_V_0_0_2_fu_1089_p2);

assign p_mux7_0_1_1_fu_1472_p3 = ((brmerge38_0_1_1_fu_1454_p2[0:0] === 1'b1) ? 8'd127 : accumulation_V_0_1_1_fu_1429_p2);

assign p_mux7_0_1_2_fu_1637_p3 = ((brmerge38_0_1_2_fu_1619_p2[0:0] === 1'b1) ? 8'd127 : accumulation_V_0_1_2_fu_1594_p2);

assign p_mux7_0_1_fu_1297_p3 = ((brmerge38_0_1_fu_1279_p2[0:0] === 1'b1) ? 8'd127 : accumulation_V_0_1_fu_1254_p2);

assign p_mux7_0_2_1_fu_1956_p3 = ((brmerge38_0_2_1_fu_1938_p2[0:0] === 1'b1) ? 8'd127 : accumulation_V_0_2_1_fu_1913_p2);

assign p_mux7_0_2_2_fu_2195_p3 = ((brmerge38_0_2_2_fu_2177_p2[0:0] === 1'b1) ? 8'd127 : accumulation_V_0_2_2_fu_2152_p2);

assign p_mux7_0_2_fu_1802_p3 = ((brmerge38_0_2_fu_1784_p2[0:0] === 1'b1) ? 8'd127 : accumulation_V_0_2_fu_1759_p2);

assign p_mux_fu_2286_p3 = ((brmerge_fu_2268_p2[0:0] === 1'b1) ? 8'd127 : p_Val2_21_fu_2244_p2);

assign p_s_fu_2294_p3 = ((underflow_12_fu_2262_p2[0:0] === 1'b1) ? 8'd128 : p_Val2_21_fu_2244_p2);

assign p_shl1_cast_fu_543_p1 = tmp_113_fu_535_p3;

assign p_shl2_cast_fu_754_p3 = {{tmp_1054_fu_750_p1}, {4'd0}};

assign p_shl3_cast_fu_2418_p3 = {{tmp_1128_fu_2414_p1}, {4'd0}};

assign p_shl_cast_fu_531_p1 = tmp_111_fu_523_p3;

assign p_v4_fu_1348_p3 = ((exitcond_reg_2662[0:0] === 1'b1) ? tmp_71_0_2_mid1_reg_2774 : tmp_71_0_s_reg_2762);

assign p_v_fu_866_p3 = ((exitcond_reg_2662[0:0] === 1'b1) ? tmp_71_0_s_fu_860_p2 : row_reg_441);

assign phitmp_0_0_1_fu_914_p3 = ((tmp_1064_fu_891_p3[0:0] === 1'b1) ? p_Val2_29_0_0_1_fu_901_p2 : 8'd127);

assign phitmp_0_1_1_fu_1392_p3 = ((tmp_1080_fu_1365_p3[0:0] === 1'b1) ? p_Val2_29_0_1_1_fu_1378_p2 : 8'd127);

assign phitmp_0_1_2_fu_1557_p3 = ((tmp_1085_fu_1534_p3[0:0] === 1'b1) ? p_Val2_29_0_1_2_fu_1544_p2 : 8'd127);

assign phitmp_0_1_fu_1217_p3 = ((tmp_1075_fu_1194_p3[0:0] === 1'b1) ? p_Val2_29_0_1_fu_1204_p2 : 8'd127);

assign phitmp_0_2_1_fu_1876_p3 = ((tmp_1095_fu_1853_p3[0:0] === 1'b1) ? p_Val2_29_0_2_1_fu_1863_p2 : 8'd127);

assign phitmp_0_2_2_fu_2115_p3 = ((tmp_1100_fu_2088_p3[0:0] === 1'b1) ? p_Val2_29_0_2_2_fu_2101_p2 : 8'd127);

assign phitmp_0_2_fu_1722_p3 = ((tmp_1090_fu_1699_p3[0:0] === 1'b1) ? p_Val2_29_0_2_fu_1709_p2 : 8'd127);

assign phitmp_fu_791_p3 = ((tmp_1058_fu_768_p3[0:0] === 1'b1) ? p_Val2_25_fu_778_p2 : 8'd127);

assign r_V_12_0_0_1_fu_811_p0 = tmp_86_0_0_1_reg_2603;

assign r_V_12_0_0_1_fu_811_p1 = r_V_12_0_0_1_fu_811_p10;

assign r_V_12_0_0_1_fu_811_p10 = input_V_q0;

assign r_V_12_0_0_1_fu_811_p2 = ($signed(r_V_12_0_0_1_fu_811_p0) * $signed({{1'b0}, {r_V_12_0_0_1_fu_811_p1}}));

assign r_V_12_0_0_2_fu_1022_p0 = tmp_86_0_0_2_cast_reg_2608;

assign r_V_12_0_0_2_fu_1022_p1 = r_V_12_0_0_2_fu_1022_p10;

assign r_V_12_0_0_2_fu_1022_p10 = input_V_q0;

assign r_V_12_0_0_2_fu_1022_p2 = (r_V_12_0_0_2_fu_1022_p0 * r_V_12_0_0_2_fu_1022_p1);

assign r_V_12_0_1_1_fu_1325_p0 = tmp_86_0_1_1_cast_reg_2618;

assign r_V_12_0_1_1_fu_1325_p1 = r_V_12_0_1_1_fu_1325_p10;

assign r_V_12_0_1_1_fu_1325_p10 = input_V_q0;

assign r_V_12_0_1_1_fu_1325_p2 = ($signed(r_V_12_0_1_1_fu_1325_p0) * $signed({{1'b0}, {r_V_12_0_1_1_fu_1325_p1}}));

assign r_V_12_0_1_2_fu_1500_p0 = tmp_86_0_1_2_reg_2623;

assign r_V_12_0_1_2_fu_1500_p1 = r_V_12_0_1_2_fu_1500_p10;

assign r_V_12_0_1_2_fu_1500_p10 = input_V_q0;

assign r_V_12_0_1_2_fu_1500_p2 = ($signed(r_V_12_0_1_2_fu_1500_p0) * $signed({{1'b0}, {r_V_12_0_1_2_fu_1500_p1}}));

assign r_V_12_0_1_fu_1160_p0 = tmp_86_0_1_reg_2613;

assign r_V_12_0_1_fu_1160_p1 = r_V_12_0_1_fu_1160_p10;

assign r_V_12_0_1_fu_1160_p10 = input_V_q0;

assign r_V_12_0_1_fu_1160_p2 = ($signed(r_V_12_0_1_fu_1160_p0) * $signed({{1'b0}, {r_V_12_0_1_fu_1160_p1}}));

assign r_V_12_0_2_1_fu_1830_p0 = tmp_86_0_2_1_reg_2633;

assign r_V_12_0_2_1_fu_1830_p1 = r_V_12_0_2_1_fu_1830_p10;

assign r_V_12_0_2_1_fu_1830_p10 = input_V_q0;

assign r_V_12_0_2_1_fu_1830_p2 = ($signed(r_V_12_0_2_1_fu_1830_p0) * $signed({{1'b0}, {r_V_12_0_2_1_fu_1830_p1}}));

assign r_V_12_0_2_2_fu_1984_p0 = tmp_86_0_2_2_cast_reg_2638;

assign r_V_12_0_2_2_fu_1984_p1 = r_V_12_0_2_2_fu_1984_p10;

assign r_V_12_0_2_2_fu_1984_p10 = input_V_q0;

assign r_V_12_0_2_2_fu_1984_p2 = ($signed(r_V_12_0_2_2_fu_1984_p0) * $signed({{1'b0}, {r_V_12_0_2_2_fu_1984_p1}}));

assign r_V_12_0_2_fu_1665_p0 = tmp_86_0_2_reg_2628;

assign r_V_12_0_2_fu_1665_p1 = r_V_12_0_2_fu_1665_p10;

assign r_V_12_0_2_fu_1665_p10 = input_V_q0;

assign r_V_12_0_2_fu_1665_p2 = ($signed(r_V_12_0_2_fu_1665_p0) * $signed({{1'b0}, {r_V_12_0_2_fu_1665_p1}}));

assign r_V_12_fu_704_p0 = tmp_86_reg_2598;

assign r_V_12_fu_704_p1 = r_V_12_fu_704_p10;

assign r_V_12_fu_704_p10 = input_V_q0;

assign r_V_12_fu_704_p2 = ($signed(r_V_12_fu_704_p0) * $signed({{1'b0}, {r_V_12_fu_704_p1}}));

assign ret_V_0_0_1_fu_937_p2 = ($signed(lhs_V_5_0_0_1_fu_930_p1) + $signed(rhs_V_6_0_0_1_fu_933_p1));

assign ret_V_0_0_2_fu_1075_p2 = ($signed(rhs_V_6_0_0_2_fu_1072_p1) + $signed(lhs_V_5_0_0_2_fu_1069_p1));

assign ret_V_0_1_1_fu_1415_p2 = ($signed(lhs_V_5_0_1_1_fu_1408_p1) + $signed(rhs_V_6_0_1_1_fu_1411_p1));

assign ret_V_0_1_2_fu_1580_p2 = ($signed(lhs_V_5_0_1_2_fu_1573_p1) + $signed(rhs_V_6_0_1_2_fu_1576_p1));

assign ret_V_0_1_fu_1240_p2 = ($signed(lhs_V_5_0_1_fu_1233_p1) + $signed(rhs_V_6_0_1_fu_1236_p1));

assign ret_V_0_2_1_fu_1899_p2 = ($signed(lhs_V_5_0_2_1_fu_1892_p1) + $signed(rhs_V_6_0_2_1_fu_1895_p1));

assign ret_V_0_2_2_fu_2138_p2 = ($signed(lhs_V_5_0_2_2_fu_2131_p1) + $signed(rhs_V_6_0_2_2_fu_2134_p1));

assign ret_V_0_2_fu_1745_p2 = ($signed(lhs_V_5_0_2_fu_1738_p1) + $signed(rhs_V_6_0_2_fu_1741_p1));

assign ret_V_7_fu_2231_p2 = ($signed(lhs_V_reg_2648) + $signed(rhs_V_fu_2228_p1));

assign rhs_V_6_0_0_1_fu_933_p1 = p_Val2_30_0_0_1_fu_922_p3;

assign rhs_V_6_0_0_2_fu_1072_p1 = p_Val2_29_0_0_2_reg_2790;

assign rhs_V_6_0_1_1_fu_1411_p1 = p_Val2_30_0_1_1_fu_1400_p3;

assign rhs_V_6_0_1_2_fu_1576_p1 = p_Val2_30_0_1_2_fu_1565_p3;

assign rhs_V_6_0_1_fu_1236_p1 = p_Val2_30_0_1_fu_1225_p3;

assign rhs_V_6_0_2_1_fu_1895_p1 = p_Val2_30_0_2_1_fu_1884_p3;

assign rhs_V_6_0_2_2_fu_2134_p1 = p_Val2_30_0_2_2_fu_2123_p3;

assign rhs_V_6_0_2_fu_1741_p1 = p_Val2_30_0_2_fu_1730_p3;

assign rhs_V_fu_2228_p1 = p_0461_5_0_2_2_reg_2975;

assign row_3_fu_2373_p2 = (5'd1 + ap_phi_mux_row1_phi_fu_479_p4);

assign signbit_i_i122_0_not_103_fu_1285_p2 = (tmp_1078_fu_1246_p3 ^ 1'd1);

assign signbit_i_i122_0_not_104_fu_1460_p2 = (tmp_1083_fu_1421_p3 ^ 1'd1);

assign signbit_i_i122_0_not_105_fu_1625_p2 = (tmp_1088_fu_1586_p3 ^ 1'd1);

assign signbit_i_i122_0_not_106_fu_1790_p2 = (tmp_1093_fu_1751_p3 ^ 1'd1);

assign signbit_i_i122_0_not_107_fu_1944_p2 = (tmp_1098_fu_1905_p3 ^ 1'd1);

assign signbit_i_i122_0_not_108_fu_2183_p2 = (tmp_1103_fu_2144_p3 ^ 1'd1);

assign signbit_i_i122_0_not_109_fu_1120_p2 = (tmp_1073_fu_1081_p3 ^ 1'd1);

assign signbit_i_i122_0_not_fu_982_p2 = (tmp_1067_fu_943_p3 ^ 1'd1);

assign signbit_i_i_i_i77_0_s_fu_2274_p2 = (tmp_1105_fu_2236_p3 ^ 1'd1);

assign tmp_104_fu_1372_p1 = $signed(tmp_103_reg_2838);

assign tmp_1053_fu_593_p3 = conv_1_biases_V_q0[32'd2];

assign tmp_1054_fu_750_p1 = tmp_118_fu_741_p2[8:0];

assign tmp_1055_fu_673_p3 = {{tmp_68_mid2_v_fu_659_p3}, {tmp_83_fu_667_p2}};

assign tmp_1056_fu_879_p3 = {{p_v_fu_866_p3}, {tmp_83_reg_2683}};

assign tmp_1057_fu_1353_p3 = {{p_v4_fu_1348_p3}, {tmp_83_reg_2683}};

assign tmp_1058_fu_768_p3 = r_V_12_reg_2704[32'd11];

assign tmp_1060_fu_783_p3 = p_Val2_25_fu_778_p2[32'd7];

assign tmp_1061_fu_727_p3 = {{tmp_68_mid2_v_reg_2676}, {col_mid2_reg_2668}};

assign tmp_1062_fu_1055_p3 = {{p_v_reg_2767}, {col_mid2_reg_2668}};

assign tmp_1063_fu_1523_p3 = {{p_v4_reg_2848}, {col_mid2_reg_2668}};

assign tmp_1064_fu_891_p3 = r_V_12_0_0_1_reg_2730[32'd10];

assign tmp_1066_fu_906_p3 = p_Val2_29_0_0_1_fu_901_p2[32'd7];

assign tmp_1067_fu_943_p3 = ret_V_0_0_1_fu_937_p2[32'd8];

assign tmp_1068_fu_956_p3 = accumulation_V_0_0_1_fu_951_p2[32'd7];

assign tmp_1069_fu_839_p3 = {{tmp_68_mid2_v_reg_2676}, {tmp_83_0_0_2_fu_834_p2}};

assign tmp_106_fu_2095_p1 = $signed(tmp_105_reg_2943);

assign tmp_1070_fu_1183_p3 = {{p_v_reg_2767}, {tmp_83_0_0_2_reg_2745}};

assign tmp_1071_fu_1688_p3 = {{p_v4_reg_2848}, {tmp_83_0_0_2_reg_2745}};

assign tmp_1072_fu_1037_p3 = r_V_12_0_0_2_fu_1022_p2[32'd3];

assign tmp_1073_fu_1081_p3 = ret_V_0_0_2_fu_1075_p2[32'd8];

assign tmp_1074_fu_1094_p3 = accumulation_V_0_0_2_fu_1089_p2[32'd7];

assign tmp_1075_fu_1194_p3 = r_V_12_0_1_reg_2807[32'd11];

assign tmp_1077_fu_1209_p3 = p_Val2_29_0_1_fu_1204_p2[32'd7];

assign tmp_1078_fu_1246_p3 = ret_V_0_1_fu_1240_p2[32'd8];

assign tmp_1079_fu_1259_p3 = accumulation_V_0_1_fu_1254_p2[32'd7];

assign tmp_1080_fu_1365_p3 = r_V_12_0_1_1_reg_2833[32'd10];

assign tmp_1082_fu_1384_p3 = p_Val2_29_0_1_1_fu_1378_p2[32'd7];

assign tmp_1083_fu_1421_p3 = ret_V_0_1_1_fu_1415_p2[32'd8];

assign tmp_1084_fu_1434_p3 = accumulation_V_0_1_1_fu_1429_p2[32'd7];

assign tmp_1085_fu_1534_p3 = r_V_12_0_1_2_reg_2865[32'd11];

assign tmp_1087_fu_1549_p3 = p_Val2_29_0_1_2_fu_1544_p2[32'd7];

assign tmp_1088_fu_1586_p3 = ret_V_0_1_2_fu_1580_p2[32'd8];

assign tmp_1089_fu_1599_p3 = accumulation_V_0_1_2_fu_1594_p2[32'd7];

assign tmp_108_cast_fu_851_p1 = tmp_1108_reg_2699;

assign tmp_1090_fu_1699_p3 = r_V_12_0_2_reg_2891[32'd11];

assign tmp_1092_fu_1714_p3 = p_Val2_29_0_2_fu_1709_p2[32'd7];

assign tmp_1093_fu_1751_p3 = ret_V_0_2_fu_1745_p2[32'd8];

assign tmp_1094_fu_1764_p3 = accumulation_V_0_2_fu_1759_p2[32'd7];

assign tmp_1095_fu_1853_p3 = r_V_12_0_2_1_reg_2917[32'd11];

assign tmp_1097_fu_1868_p3 = p_Val2_29_0_2_1_fu_1863_p2[32'd7];

assign tmp_1098_fu_1905_p3 = ret_V_0_2_1_fu_1899_p2[32'd8];

assign tmp_1099_fu_1918_p3 = accumulation_V_0_2_1_fu_1913_p2[32'd7];

assign tmp_109_fu_2012_p3 = {{tmp_151_cast_cast_fu_2007_p2}, {3'd0}};

assign tmp_1100_fu_2088_p3 = r_V_12_0_2_2_reg_2938[32'd10];

assign tmp_1102_fu_2107_p3 = p_Val2_29_0_2_2_fu_2101_p2[32'd7];

assign tmp_1103_fu_2144_p3 = ret_V_0_2_2_fu_2138_p2[32'd8];

assign tmp_1104_fu_2157_p3 = accumulation_V_0_2_2_fu_2152_p2[32'd7];

assign tmp_1105_fu_2236_p3 = ret_V_7_fu_2231_p2[32'd8];

assign tmp_1106_fu_2248_p3 = p_Val2_21_fu_2244_p2[32'd7];

assign tmp_1107_fu_686_p1 = col_mid2_fu_645_p3[0:0];

assign tmp_1109_fu_2026_p2 = ((tmp_109_fu_2012_p3 > tmp_110_fu_2020_p2) ? 1'b1 : 1'b0);

assign tmp_110_fu_2020_p2 = (tmp_109_fu_2012_p3 | 4'd7);

assign tmp_1110_fu_2032_p1 = tmp_109_fu_2012_p3;

assign tmp_1111_fu_2036_p1 = tmp_110_fu_2020_p2;

assign tmp_1112_fu_2310_p1 = p_0306_1_fu_2302_p3;

assign tmp_1113_fu_2314_p2 = (tmp_1110_reg_2964 ^ 5'd15);

assign tmp_1114_fu_2040_p3 = ((tmp_1109_fu_2026_p2[0:0] === 1'b1) ? tmp_1110_fu_2032_p1 : tmp_1111_fu_2036_p1);

assign tmp_1115_fu_2048_p3 = ((tmp_1109_fu_2026_p2[0:0] === 1'b1) ? tmp_1111_fu_2036_p1 : tmp_1110_fu_2032_p1);

assign tmp_1116_fu_2319_p3 = ((tmp_1109_reg_2958[0:0] === 1'b1) ? tmp_1113_fu_2314_p2 : tmp_1110_reg_2964);

assign tmp_1117_fu_2056_p2 = (tmp_1114_fu_2040_p3 ^ 5'd15);

assign tmp_1118_fu_2325_p1 = tmp_1116_fu_2319_p3;

assign tmp_1119_fu_2062_p1 = tmp_1115_fu_2048_p3;

assign tmp_111_fu_523_p3 = {{p_reg_418}, {5'd0}};

assign tmp_1120_fu_2066_p1 = tmp_1117_fu_2056_p2;

assign tmp_1121_fu_2329_p2 = tmp_1112_fu_2310_p1 << tmp_1118_fu_2325_p1;

integer ap_tvar_int_0;

always @ (tmp_1121_fu_2329_p2) begin
    for (ap_tvar_int_0 = 16 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 15 - 0) begin
            tmp_1122_fu_2335_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_1122_fu_2335_p4[ap_tvar_int_0] = tmp_1121_fu_2329_p2[15 - ap_tvar_int_0];
        end
    end
end

assign tmp_1123_fu_2345_p3 = ((tmp_1109_reg_2958[0:0] === 1'b1) ? tmp_1122_fu_2335_p4 : tmp_1121_fu_2329_p2);

assign tmp_1124_fu_2070_p2 = 16'd65535 << tmp_1119_fu_2062_p1;

assign tmp_1125_fu_2076_p2 = 16'd65535 >> tmp_1120_fu_2066_p1;

assign tmp_1126_fu_2352_p2 = (tmp_1123_fu_2345_p3 & p_demorgan_reg_2970);

assign tmp_1127_fu_2219_p1 = tmp_151_cast_cast_reg_2953;

assign tmp_1128_fu_2414_p1 = tmp_131_fu_2405_p2[8:0];

assign tmp_1129_fu_2432_p4 = {{col2_mid2_fu_2385_p3[4:1]}};

assign tmp_1130_fu_2463_p1 = output_V_q0[7:0];

assign tmp_1131_fu_2467_p1 = output_V_q0[6:0];

assign tmp_113_fu_535_p3 = {{p_reg_418}, {1'd0}};

assign tmp_114_cast_fu_2442_p1 = tmp_1129_fu_2432_p4;

assign tmp_114_fu_547_p2 = (p_shl_cast_fu_531_p1 - p_shl1_cast_fu_543_p1);

assign tmp_115_fu_653_p2 = ($signed(5'd31) + $signed(ap_phi_mux_row_phi_fu_445_p4));

assign tmp_116_fu_2485_p4 = {{output_V_q0[15:8]}};

assign tmp_118_fu_741_p2 = ($signed(tmp_238_cast_reg_2592) + $signed(tmp_68_mid2_cast_fu_738_p1));

assign tmp_119_fu_2522_p3 = {{tmp_150_s_reg_3021}, {p_0514_2_cast_fu_2519_p1}};

assign tmp_120_fu_762_p2 = ($signed(p_shl2_cast_fu_754_p3) - $signed(tmp_242_cast_fu_746_p1));

assign tmp_121_fu_681_p1 = tmp_1055_fu_673_p3;

assign tmp_122_fu_886_p1 = tmp_1056_fu_879_p3;

assign tmp_123_fu_1360_p1 = tmp_1057_fu_1353_p3;

assign tmp_124_fu_733_p1 = tmp_1061_fu_727_p3;

assign tmp_125_fu_1061_p1 = tmp_1062_fu_1055_p3;

assign tmp_126_fu_1529_p1 = tmp_1063_fu_1523_p3;

assign tmp_127_fu_846_p1 = tmp_1069_fu_839_p3;

assign tmp_128_fu_1189_p1 = tmp_1070_fu_1183_p3;

assign tmp_129_fu_1694_p1 = tmp_1071_fu_1688_p3;

assign tmp_130_fu_854_p2 = (tmp_120_fu_762_p2 + tmp_108_cast_fu_851_p1);

assign tmp_131_fu_2405_p2 = ($signed(tmp_238_cast_reg_2592) + $signed(tmp_mid2_cast_fu_2401_p1));

assign tmp_132_fu_2426_p2 = ($signed(p_shl3_cast_fu_2418_p3) - $signed(tmp_261_cast_fu_2410_p1));

assign tmp_133_fu_2446_p2 = (tmp_132_fu_2426_p2 + tmp_114_cast_fu_2442_p1);

assign tmp_149_cast_fu_2495_p4 = {{output_V_q0[14:8]}};

assign tmp_150_s_fu_2511_p3 = ((tmp_70_1_fu_2505_p2[0:0] === 1'b1) ? tmp_149_cast_fu_2495_p4 : 7'd0);

assign tmp_151_cast_cast_fu_2007_p2 = (tmp_1107_reg_2694 ^ 1'd1);

assign tmp_238_cast_fu_553_p1 = $signed(tmp_114_fu_547_p2);

assign tmp_242_cast_fu_746_p1 = tmp_118_fu_741_p2;

assign tmp_260_cast_fu_2357_p1 = tmp_130_reg_2757_pp0_iter1_reg;

assign tmp_261_cast_fu_2410_p1 = tmp_131_fu_2405_p2;

assign tmp_264_cast_fu_2452_p1 = tmp_133_fu_2446_p2;

assign tmp_68_mid2_cast_fu_738_p1 = tmp_68_mid2_v_reg_2676;

assign tmp_68_mid2_v_fu_659_p3 = ((exitcond_fu_639_p2[0:0] === 1'b1) ? ap_phi_mux_row_phi_fu_445_p4 : tmp_115_fu_653_p2);

assign tmp_70_1_fu_2505_p2 = (($signed(tmp_116_fu_2485_p4) > $signed(8'd0)) ? 1'b1 : 1'b0);

assign tmp_70_fu_2471_p2 = (($signed(tmp_1130_fu_2463_p1) > $signed(8'd0)) ? 1'b1 : 1'b0);

assign tmp_71_0_2_mid1_fu_873_p2 = (5'd2 + row_reg_441);

assign tmp_71_0_s_fu_860_p2 = (5'd1 + row_reg_441);

assign tmp_76_cast_fu_609_p1 = tmp_1053_fu_593_p3;

assign tmp_80_fu_2256_p2 = (tmp_1106_fu_2248_p3 ^ 1'd1);

assign tmp_83_0_0_2_fu_834_p2 = (5'd1 + col_mid2_reg_2668);

assign tmp_83_fu_667_p2 = ($signed(5'd31) + $signed(col_mid2_fu_645_p3));

assign tmp_86_0_0_1_fu_561_p1 = $signed(conv_1_weights_V_0_0_1_q0);

assign tmp_86_0_0_2_cast_fu_565_p1 = conv_1_weights_V_0_0_2_q0;

assign tmp_86_0_1_1_cast_fu_573_p1 = $signed(conv_1_weights_V_0_1_1_q0);

assign tmp_86_0_1_2_fu_577_p1 = $signed(conv_1_weights_V_0_1_2_q0);

assign tmp_86_0_1_fu_569_p1 = $signed(conv_1_weights_V_0_1_q0);

assign tmp_86_0_2_1_fu_585_p1 = $signed(conv_1_weights_V_0_2_1_q0);

assign tmp_86_0_2_2_cast_fu_589_p1 = $signed(conv_1_weights_V_0_2_2_q0);

assign tmp_86_0_2_fu_581_p1 = $signed(conv_1_weights_V_0_2_q0);

assign tmp_86_fu_557_p1 = $signed(conv_1_weights_V_0_0_q0);

assign tmp_90_0_0_1_cast_fu_898_p1 = tmp_1065_reg_2740;

assign tmp_90_0_0_2_cast_fu_1045_p1 = tmp_1072_fu_1037_p3;

assign tmp_90_0_1_1_cast_fu_1375_p1 = tmp_1081_reg_2843;

assign tmp_90_0_1_2_cast_fu_1541_p1 = tmp_1086_reg_2875;

assign tmp_90_0_1_cast_fu_1201_p1 = tmp_1076_reg_2817;

assign tmp_90_0_2_1_cast_fu_1860_p1 = tmp_1096_reg_2927;

assign tmp_90_0_2_2_cast_fu_2098_p1 = tmp_1101_reg_2948;

assign tmp_90_0_2_cast_fu_1706_p1 = tmp_1091_reg_2901;

assign tmp_90_0_cast_fu_775_p1 = tmp_1059_reg_2714;

assign tmp_92_0_0_1_fu_964_p2 = (tmp_1068_fu_956_p3 ^ 1'd1);

assign tmp_92_0_0_2_fu_1102_p2 = (tmp_1074_fu_1094_p3 ^ 1'd1);

assign tmp_92_0_1_1_fu_1442_p2 = (tmp_1084_fu_1434_p3 ^ 1'd1);

assign tmp_92_0_1_2_fu_1607_p2 = (tmp_1089_fu_1599_p3 ^ 1'd1);

assign tmp_92_0_1_fu_1267_p2 = (tmp_1079_fu_1259_p3 ^ 1'd1);

assign tmp_92_0_2_1_fu_1926_p2 = (tmp_1099_fu_1918_p3 ^ 1'd1);

assign tmp_92_0_2_2_fu_2165_p2 = (tmp_1104_fu_2157_p3 ^ 1'd1);

assign tmp_92_0_2_fu_1772_p2 = (tmp_1094_fu_1764_p3 ^ 1'd1);

assign tmp_fu_509_p1 = p_reg_418;

assign tmp_mid2_cast_fu_2401_p1 = tmp_mid2_v_fu_2393_p3;

assign tmp_mid2_v_fu_2393_p3 = ((exitcond2_fu_2379_p2[0:0] === 1'b1) ? row_3_fu_2373_p2 : ap_phi_mux_row1_phi_fu_479_p4);

assign underflow_0_0_1_fu_970_p2 = (tmp_92_0_0_1_fu_964_p2 & tmp_1067_fu_943_p3);

assign underflow_0_0_2_fu_1108_p2 = (tmp_92_0_0_2_fu_1102_p2 & tmp_1073_fu_1081_p3);

assign underflow_0_1_1_fu_1448_p2 = (tmp_92_0_1_1_fu_1442_p2 & tmp_1083_fu_1421_p3);

assign underflow_0_1_2_fu_1613_p2 = (tmp_92_0_1_2_fu_1607_p2 & tmp_1088_fu_1586_p3);

assign underflow_0_1_fu_1273_p2 = (tmp_92_0_1_fu_1267_p2 & tmp_1078_fu_1246_p3);

assign underflow_0_2_1_fu_1932_p2 = (tmp_92_0_2_1_fu_1926_p2 & tmp_1098_fu_1905_p3);

assign underflow_0_2_2_fu_2171_p2 = (tmp_92_0_2_2_fu_2165_p2 & tmp_1103_fu_2144_p3);

assign underflow_0_2_fu_1778_p2 = (tmp_92_0_2_fu_1772_p2 & tmp_1093_fu_1751_p3);

assign underflow_12_fu_2262_p2 = (tmp_80_fu_2256_p2 & tmp_1105_fu_2236_p3);

always @ (posedge ap_clk) begin
    tmp_238_cast_reg_2592[0] <= 1'b0;
    tmp_86_0_0_2_cast_reg_2608[9:2] <= 8'b00000000;
    tmp_1110_reg_2964[2:0] <= 3'b000;
    tmp_1110_reg_2964[4] <= 1'b0;
end

endmodule //conv_layer1
