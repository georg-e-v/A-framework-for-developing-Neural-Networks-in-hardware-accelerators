// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module avg_pooling_layer1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_V_address0,
        input_V_ce0,
        input_V_q0,
        input_V_address1,
        input_V_ce1,
        input_V_q1,
        output_0_V_address0,
        output_0_V_ce0,
        output_0_V_we0,
        output_0_V_d0,
        output_1_V_address0,
        output_1_V_ce0,
        output_1_V_we0,
        output_1_V_d0,
        output_2_V_address0,
        output_2_V_ce0,
        output_2_V_we0,
        output_2_V_d0,
        output_3_V_address0,
        output_3_V_ce0,
        output_3_V_we0,
        output_3_V_d0,
        output_4_V_address0,
        output_4_V_ce0,
        output_4_V_we0,
        output_4_V_d0,
        output_5_V_address0,
        output_5_V_ce0,
        output_5_V_we0,
        output_5_V_d0,
        output_6_V_address0,
        output_6_V_ce0,
        output_6_V_we0,
        output_6_V_d0,
        output_7_V_address0,
        output_7_V_ce0,
        output_7_V_we0,
        output_7_V_d0,
        output_8_V_address0,
        output_8_V_ce0,
        output_8_V_we0,
        output_8_V_d0,
        output_9_V_address0,
        output_9_V_ce0,
        output_9_V_we0,
        output_9_V_d0,
        output_10_V_address0,
        output_10_V_ce0,
        output_10_V_we0,
        output_10_V_d0,
        output_11_V_address0,
        output_11_V_ce0,
        output_11_V_we0,
        output_11_V_d0,
        output_12_V_address0,
        output_12_V_ce0,
        output_12_V_we0,
        output_12_V_d0,
        output_13_V_address0,
        output_13_V_ce0,
        output_13_V_we0,
        output_13_V_d0,
        output_14_V_address0,
        output_14_V_ce0,
        output_14_V_we0,
        output_14_V_d0
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state7 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] input_V_address0;
output   input_V_ce0;
input  [15:0] input_V_q0;
output  [11:0] input_V_address1;
output   input_V_ce1;
input  [15:0] input_V_q1;
output  [6:0] output_0_V_address0;
output   output_0_V_ce0;
output   output_0_V_we0;
output  [8:0] output_0_V_d0;
output  [6:0] output_1_V_address0;
output   output_1_V_ce0;
output   output_1_V_we0;
output  [8:0] output_1_V_d0;
output  [6:0] output_2_V_address0;
output   output_2_V_ce0;
output   output_2_V_we0;
output  [8:0] output_2_V_d0;
output  [6:0] output_3_V_address0;
output   output_3_V_ce0;
output   output_3_V_we0;
output  [8:0] output_3_V_d0;
output  [6:0] output_4_V_address0;
output   output_4_V_ce0;
output   output_4_V_we0;
output  [8:0] output_4_V_d0;
output  [6:0] output_5_V_address0;
output   output_5_V_ce0;
output   output_5_V_we0;
output  [8:0] output_5_V_d0;
output  [6:0] output_6_V_address0;
output   output_6_V_ce0;
output   output_6_V_we0;
output  [8:0] output_6_V_d0;
output  [6:0] output_7_V_address0;
output   output_7_V_ce0;
output   output_7_V_we0;
output  [8:0] output_7_V_d0;
output  [6:0] output_8_V_address0;
output   output_8_V_ce0;
output   output_8_V_we0;
output  [8:0] output_8_V_d0;
output  [6:0] output_9_V_address0;
output   output_9_V_ce0;
output   output_9_V_we0;
output  [8:0] output_9_V_d0;
output  [6:0] output_10_V_address0;
output   output_10_V_ce0;
output   output_10_V_we0;
output  [8:0] output_10_V_d0;
output  [6:0] output_11_V_address0;
output   output_11_V_ce0;
output   output_11_V_we0;
output  [8:0] output_11_V_d0;
output  [6:0] output_12_V_address0;
output   output_12_V_ce0;
output   output_12_V_we0;
output  [8:0] output_12_V_d0;
output  [6:0] output_13_V_address0;
output   output_13_V_ce0;
output   output_13_V_we0;
output  [8:0] output_13_V_d0;
output  [6:0] output_14_V_address0;
output   output_14_V_ce0;
output   output_14_V_we0;
output  [8:0] output_14_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_V_ce0;
reg input_V_ce1;
reg output_0_V_ce0;
reg output_0_V_we0;
reg output_1_V_ce0;
reg output_1_V_we0;
reg output_2_V_ce0;
reg output_2_V_we0;
reg output_3_V_ce0;
reg output_3_V_we0;
reg output_4_V_ce0;
reg output_4_V_we0;
reg output_5_V_ce0;
reg output_5_V_we0;
reg output_6_V_ce0;
reg output_6_V_we0;
reg output_7_V_ce0;
reg output_7_V_we0;
reg output_8_V_ce0;
reg output_8_V_we0;
reg output_9_V_ce0;
reg output_9_V_we0;
reg output_10_V_ce0;
reg output_10_V_we0;
reg output_11_V_ce0;
reg output_11_V_we0;
reg output_12_V_ce0;
reg output_12_V_we0;
reg output_13_V_ce0;
reg output_13_V_we0;
reg output_14_V_ce0;
reg output_14_V_we0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [10:0] indvar_flatten4_reg_376;
reg   [2:0] fmap_reg_387;
reg   [7:0] indvar_flatten_reg_398;
reg   [4:0] height_reg_409;
reg   [4:0] width_reg_420;
wire   [0:0] exitcond_flatten4_fu_447_p2;
reg   [0:0] exitcond_flatten4_reg_1026;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] exitcond_flatten4_reg_1026_pp0_iter1_reg;
reg   [0:0] exitcond_flatten4_reg_1026_pp0_iter2_reg;
wire   [10:0] indvar_flatten_next4_fu_453_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [2:0] tmp_mid2_v_fu_487_p3;
reg   [2:0] tmp_mid2_v_reg_1035;
reg   [2:0] tmp_mid2_v_reg_1035_pp0_iter1_reg;
reg   [2:0] tmp_mid2_v_reg_1035_pp0_iter2_reg;
reg   [2:0] tmp_mid2_v_reg_1035_pp0_iter3_reg;
wire   [3:0] tmp_38_mid2_fu_581_p3;
reg   [3:0] tmp_38_mid2_reg_1042;
reg   [3:0] tmp_38_mid2_reg_1042_pp0_iter1_reg;
reg   [3:0] tmp_38_mid2_reg_1042_pp0_iter2_reg;
reg   [3:0] tmp_38_mid2_reg_1042_pp0_iter3_reg;
wire   [4:0] tmp_39_mid2_fu_589_p3;
reg   [4:0] tmp_39_mid2_reg_1047;
wire  signed [9:0] tmp_150_fu_601_p2;
reg  signed [9:0] tmp_150_reg_1052;
wire   [8:0] tmp_1141_fu_607_p1;
reg   [8:0] tmp_1141_reg_1057;
wire  signed [9:0] tmp_152_fu_629_p2;
reg  signed [9:0] tmp_152_reg_1062;
wire   [8:0] tmp_1142_fu_635_p1;
reg   [8:0] tmp_1142_reg_1067;
reg   [3:0] tmp_131_reg_1072;
reg   [3:0] tmp_131_reg_1072_pp0_iter1_reg;
reg   [3:0] tmp_131_reg_1072_pp0_iter2_reg;
reg   [3:0] tmp_131_reg_1072_pp0_iter3_reg;
wire   [4:0] width_2_fu_649_p2;
wire   [7:0] indvar_flatten_next_fu_661_p3;
wire  signed [8:0] ret_V_fu_748_p2;
reg  signed [8:0] ret_V_reg_1097;
wire  signed [7:0] p_Val2_34_fu_754_p1;
reg  signed [7:0] p_Val2_34_reg_1103;
reg  signed [7:0] p_Val2_36_reg_1109;
wire  signed [8:0] p_Val2_41_fu_894_p3;
reg  signed [8:0] p_Val2_41_reg_1115;
reg   [0:0] tmp_1148_reg_1120;
reg   [6:0] tmp_137_reg_1125;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg   [2:0] ap_phi_mux_fmap_phi_fu_391_p4;
wire    ap_block_pp0_stage0;
reg   [4:0] ap_phi_mux_height_phi_fu_413_p4;
wire   [63:0] tmp_287_cast_fu_710_p1;
wire   [63:0] tmp_288_cast_fu_721_p1;
wire  signed [63:0] tmp_280_cast_fu_949_p1;
wire   [8:0] r_V_fu_1004_p3;
wire   [0:0] exitcond_flatten_fu_465_p2;
wire   [2:0] fmap_2_fu_459_p2;
wire   [7:0] tmp_fu_495_p3;
wire   [3:0] tmp_144_fu_507_p3;
wire   [8:0] p_shl3_cast_fu_503_p1;
wire   [8:0] p_shl4_cast_fu_515_p1;
wire   [8:0] tmp_145_fu_519_p2;
wire   [3:0] tmp_s_fu_431_p4;
wire   [4:0] tmp_40_fu_441_p2;
wire   [0:0] tmp_148_fu_545_p2;
wire   [4:0] height_mid_fu_471_p3;
wire   [0:0] tmp_42_mid_fu_551_p2;
wire   [4:0] width_mid_fu_479_p3;
wire   [4:0] height_2_fu_557_p2;
wire   [3:0] tmp_38_mid_fu_529_p3;
wire   [3:0] tmp_134_mid1_fu_571_p4;
wire   [9:0] tmp_39_mid2_cast_fu_597_p1;
wire  signed [9:0] tmp_277_cast_fu_525_p1;
wire   [4:0] tmp_41_mid_fu_537_p3;
wire   [4:0] tmp_40_mid1_fu_611_p2;
wire   [4:0] tmp_41_mid2_fu_617_p3;
wire   [9:0] tmp_41_mid2_cast_fu_625_p1;
wire   [4:0] width_mid2_fu_563_p3;
wire   [7:0] indvar_flatten_op_fu_655_p2;
wire   [12:0] p_shl1_cast_fu_672_p3;
wire  signed [12:0] tmp_281_cast_fu_669_p1;
wire   [12:0] p_shl_cast_fu_688_p3;
wire  signed [12:0] tmp_284_cast_fu_685_p1;
wire   [12:0] tmp_132_cast_fu_701_p1;
wire   [12:0] tmp_151_fu_679_p2;
wire   [12:0] tmp_154_fu_704_p2;
wire   [12:0] tmp_153_fu_695_p2;
wire   [12:0] tmp_155_fu_715_p2;
wire   [7:0] p_Val2_s_fu_726_p1;
wire   [7:0] p_Val2_32_fu_734_p4;
wire  signed [8:0] lhs_V_fu_730_p1;
wire  signed [8:0] rhs_V_fu_744_p1;
wire  signed [9:0] lhs_V_3_fu_768_p1;
wire  signed [9:0] rhs_V_3_fu_771_p1;
wire   [9:0] ret_V_5_fu_777_p2;
wire  signed [9:0] rhs_V_6_cast_fu_783_p1;
wire   [9:0] ret_V_6_fu_789_p2;
wire  signed [8:0] tmp_133_fu_774_p1;
wire  signed [8:0] tmp_134_fu_786_p1;
wire   [8:0] tmp1_fu_803_p2;
wire   [8:0] p_Val2_38_fu_809_p2;
wire   [0:0] p_Result_13_fu_814_p3;
wire   [0:0] tmp_1147_fu_822_p3;
wire   [0:0] p_Result_s_fu_795_p3;
wire   [0:0] brmerge_fu_830_p2;
wire   [0:0] tmp_43_fu_836_p2;
wire   [0:0] brmerge23_demorgan_fu_848_p2;
wire   [0:0] brmerge20_fu_854_p2;
wire   [0:0] underflow_fu_860_p2;
wire   [0:0] overflow_fu_842_p2;
wire   [0:0] brmerge21_fu_866_p2;
wire   [0:0] p_392_not_fu_872_p2;
wire   [8:0] p_mux_fu_878_p3;
wire   [8:0] p_s_fu_886_p3;
wire   [6:0] tmp_146_fu_923_p3;
wire   [7:0] p_shl2_cast_fu_930_p1;
wire   [7:0] tmp_mid2_cast_fu_920_p1;
wire   [7:0] tmp_38_mid2_cast_fu_940_p1;
wire   [7:0] tmp_147_fu_934_p2;
wire   [7:0] tmp_149_fu_943_p2;
wire  signed [9:0] tmp_122_tr_fu_968_p1;
wire   [9:0] p_neg_fu_971_p2;
wire   [7:0] tmp_156_fu_977_p4;
wire   [8:0] p_lshr_cast_fu_987_p1;
wire  signed [7:0] tmp_138_fu_997_p1;
wire   [8:0] p_neg_t_fu_991_p2;
wire   [8:0] p_lshr_f_cast_fu_1000_p1;
wire    ap_CS_fsm_state7;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten4_reg_1026 == 1'd0))) begin
        fmap_reg_387 <= tmp_mid2_v_reg_1035;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        fmap_reg_387 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten4_reg_1026 == 1'd0))) begin
        height_reg_409 <= tmp_39_mid2_reg_1047;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        height_reg_409 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten4_fu_447_p2 == 1'd0))) begin
        indvar_flatten4_reg_376 <= indvar_flatten_next4_fu_453_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten4_reg_376 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten4_fu_447_p2 == 1'd0))) begin
        indvar_flatten_reg_398 <= indvar_flatten_next_fu_661_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_398 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten4_fu_447_p2 == 1'd0))) begin
        width_reg_420 <= width_2_fu_649_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        width_reg_420 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exitcond_flatten4_reg_1026 <= exitcond_flatten4_fu_447_p2;
        exitcond_flatten4_reg_1026_pp0_iter1_reg <= exitcond_flatten4_reg_1026;
        tmp_131_reg_1072_pp0_iter1_reg <= tmp_131_reg_1072;
        tmp_38_mid2_reg_1042_pp0_iter1_reg <= tmp_38_mid2_reg_1042;
        tmp_mid2_v_reg_1035_pp0_iter1_reg <= tmp_mid2_v_reg_1035;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        exitcond_flatten4_reg_1026_pp0_iter2_reg <= exitcond_flatten4_reg_1026_pp0_iter1_reg;
        tmp_131_reg_1072_pp0_iter2_reg <= tmp_131_reg_1072_pp0_iter1_reg;
        tmp_131_reg_1072_pp0_iter3_reg <= tmp_131_reg_1072_pp0_iter2_reg;
        tmp_38_mid2_reg_1042_pp0_iter2_reg <= tmp_38_mid2_reg_1042_pp0_iter1_reg;
        tmp_38_mid2_reg_1042_pp0_iter3_reg <= tmp_38_mid2_reg_1042_pp0_iter2_reg;
        tmp_mid2_v_reg_1035_pp0_iter2_reg <= tmp_mid2_v_reg_1035_pp0_iter1_reg;
        tmp_mid2_v_reg_1035_pp0_iter3_reg <= tmp_mid2_v_reg_1035_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten4_reg_1026_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_Val2_34_reg_1103 <= p_Val2_34_fu_754_p1;
        p_Val2_36_reg_1109 <= {{input_V_q1[15:8]}};
        ret_V_reg_1097 <= ret_V_fu_748_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten4_reg_1026_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_Val2_41_reg_1115 <= p_Val2_41_fu_894_p3;
        tmp_1148_reg_1120 <= p_Val2_41_fu_894_p3[32'd8];
        tmp_137_reg_1125 <= {{p_Val2_41_fu_894_p3[8:2]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten4_fu_447_p2 == 1'd0))) begin
        tmp_1141_reg_1057 <= tmp_1141_fu_607_p1;
        tmp_1142_reg_1067[8 : 1] <= tmp_1142_fu_635_p1[8 : 1];
        tmp_131_reg_1072 <= {{width_mid2_fu_563_p3[4:1]}};
        tmp_150_reg_1052 <= tmp_150_fu_601_p2;
        tmp_152_reg_1062[9 : 1] <= tmp_152_fu_629_p2[9 : 1];
        tmp_38_mid2_reg_1042 <= tmp_38_mid2_fu_581_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten4_fu_447_p2 == 1'd0))) begin
        tmp_39_mid2_reg_1047 <= tmp_39_mid2_fu_589_p3;
        tmp_mid2_v_reg_1035 <= tmp_mid2_v_fu_487_p3;
    end
end

always @ (*) begin
    if ((exitcond_flatten4_fu_447_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten4_reg_1026 == 1'd0))) begin
        ap_phi_mux_fmap_phi_fu_391_p4 = tmp_mid2_v_reg_1035;
    end else begin
        ap_phi_mux_fmap_phi_fu_391_p4 = fmap_reg_387;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten4_reg_1026 == 1'd0))) begin
        ap_phi_mux_height_phi_fu_413_p4 = tmp_39_mid2_reg_1047;
    end else begin
        ap_phi_mux_height_phi_fu_413_p4 = height_reg_409;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        input_V_ce0 = 1'b1;
    end else begin
        input_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        input_V_ce1 = 1'b1;
    end else begin
        input_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_0_V_ce0 = 1'b1;
    end else begin
        output_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_131_reg_1072_pp0_iter3_reg == 4'd0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_0_V_we0 = 1'b1;
    end else begin
        output_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_10_V_ce0 = 1'b1;
    end else begin
        output_10_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_131_reg_1072_pp0_iter3_reg == 4'd10) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_10_V_we0 = 1'b1;
    end else begin
        output_10_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_11_V_ce0 = 1'b1;
    end else begin
        output_11_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_131_reg_1072_pp0_iter3_reg == 4'd11) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_11_V_we0 = 1'b1;
    end else begin
        output_11_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_12_V_ce0 = 1'b1;
    end else begin
        output_12_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_131_reg_1072_pp0_iter3_reg == 4'd12) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_12_V_we0 = 1'b1;
    end else begin
        output_12_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_13_V_ce0 = 1'b1;
    end else begin
        output_13_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_131_reg_1072_pp0_iter3_reg == 4'd13) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_13_V_we0 = 1'b1;
    end else begin
        output_13_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_14_V_ce0 = 1'b1;
    end else begin
        output_14_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & ((tmp_131_reg_1072_pp0_iter3_reg == 4'd14) | (tmp_131_reg_1072_pp0_iter3_reg == 4'd15)))) begin
        output_14_V_we0 = 1'b1;
    end else begin
        output_14_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_1_V_ce0 = 1'b1;
    end else begin
        output_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_131_reg_1072_pp0_iter3_reg == 4'd1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_1_V_we0 = 1'b1;
    end else begin
        output_1_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_2_V_ce0 = 1'b1;
    end else begin
        output_2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_131_reg_1072_pp0_iter3_reg == 4'd2) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_2_V_we0 = 1'b1;
    end else begin
        output_2_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_3_V_ce0 = 1'b1;
    end else begin
        output_3_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_131_reg_1072_pp0_iter3_reg == 4'd3) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_3_V_we0 = 1'b1;
    end else begin
        output_3_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_4_V_ce0 = 1'b1;
    end else begin
        output_4_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_131_reg_1072_pp0_iter3_reg == 4'd4) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_4_V_we0 = 1'b1;
    end else begin
        output_4_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_5_V_ce0 = 1'b1;
    end else begin
        output_5_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_131_reg_1072_pp0_iter3_reg == 4'd5) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_5_V_we0 = 1'b1;
    end else begin
        output_5_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_6_V_ce0 = 1'b1;
    end else begin
        output_6_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_131_reg_1072_pp0_iter3_reg == 4'd6) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_6_V_we0 = 1'b1;
    end else begin
        output_6_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_7_V_ce0 = 1'b1;
    end else begin
        output_7_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_131_reg_1072_pp0_iter3_reg == 4'd7) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_7_V_we0 = 1'b1;
    end else begin
        output_7_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_8_V_ce0 = 1'b1;
    end else begin
        output_8_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_131_reg_1072_pp0_iter3_reg == 4'd8) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_8_V_we0 = 1'b1;
    end else begin
        output_8_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_9_V_ce0 = 1'b1;
    end else begin
        output_9_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_131_reg_1072_pp0_iter3_reg == 4'd9) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_9_V_we0 = 1'b1;
    end else begin
        output_9_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_flatten4_fu_447_p2 == 1'd1)) & ~((ap_enable_reg_pp0_iter3 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter4 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter3 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_flatten4_fu_447_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign brmerge20_fu_854_p2 = (brmerge23_demorgan_fu_848_p2 ^ 1'd1);

assign brmerge21_fu_866_p2 = (underflow_fu_860_p2 | overflow_fu_842_p2);

assign brmerge23_demorgan_fu_848_p2 = (tmp_1147_fu_822_p3 & p_Result_13_fu_814_p3);

assign brmerge_fu_830_p2 = (tmp_1147_fu_822_p3 | p_Result_13_fu_814_p3);

assign exitcond_flatten4_fu_447_p2 = ((indvar_flatten4_reg_376 == 11'd1350) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_465_p2 = ((indvar_flatten_reg_398 == 8'd225) ? 1'b1 : 1'b0);

assign fmap_2_fu_459_p2 = (3'd1 + ap_phi_mux_fmap_phi_fu_391_p4);

assign height_2_fu_557_p2 = (5'd2 + height_mid_fu_471_p3);

assign height_mid_fu_471_p3 = ((exitcond_flatten_fu_465_p2[0:0] === 1'b1) ? 5'd0 : ap_phi_mux_height_phi_fu_413_p4);

assign indvar_flatten_next4_fu_453_p2 = (indvar_flatten4_reg_376 + 11'd1);

assign indvar_flatten_next_fu_661_p3 = ((exitcond_flatten_fu_465_p2[0:0] === 1'b1) ? 8'd1 : indvar_flatten_op_fu_655_p2);

assign indvar_flatten_op_fu_655_p2 = (indvar_flatten_reg_398 + 8'd1);

assign input_V_address0 = tmp_287_cast_fu_710_p1;

assign input_V_address1 = tmp_288_cast_fu_721_p1;

assign lhs_V_3_fu_768_p1 = ret_V_reg_1097;

assign lhs_V_fu_730_p1 = $signed(p_Val2_s_fu_726_p1);

assign output_0_V_address0 = tmp_280_cast_fu_949_p1;

assign output_0_V_d0 = r_V_fu_1004_p3;

assign output_10_V_address0 = tmp_280_cast_fu_949_p1;

assign output_10_V_d0 = r_V_fu_1004_p3;

assign output_11_V_address0 = tmp_280_cast_fu_949_p1;

assign output_11_V_d0 = r_V_fu_1004_p3;

assign output_12_V_address0 = tmp_280_cast_fu_949_p1;

assign output_12_V_d0 = r_V_fu_1004_p3;

assign output_13_V_address0 = tmp_280_cast_fu_949_p1;

assign output_13_V_d0 = r_V_fu_1004_p3;

assign output_14_V_address0 = tmp_280_cast_fu_949_p1;

assign output_14_V_d0 = r_V_fu_1004_p3;

assign output_1_V_address0 = tmp_280_cast_fu_949_p1;

assign output_1_V_d0 = r_V_fu_1004_p3;

assign output_2_V_address0 = tmp_280_cast_fu_949_p1;

assign output_2_V_d0 = r_V_fu_1004_p3;

assign output_3_V_address0 = tmp_280_cast_fu_949_p1;

assign output_3_V_d0 = r_V_fu_1004_p3;

assign output_4_V_address0 = tmp_280_cast_fu_949_p1;

assign output_4_V_d0 = r_V_fu_1004_p3;

assign output_5_V_address0 = tmp_280_cast_fu_949_p1;

assign output_5_V_d0 = r_V_fu_1004_p3;

assign output_6_V_address0 = tmp_280_cast_fu_949_p1;

assign output_6_V_d0 = r_V_fu_1004_p3;

assign output_7_V_address0 = tmp_280_cast_fu_949_p1;

assign output_7_V_d0 = r_V_fu_1004_p3;

assign output_8_V_address0 = tmp_280_cast_fu_949_p1;

assign output_8_V_d0 = r_V_fu_1004_p3;

assign output_9_V_address0 = tmp_280_cast_fu_949_p1;

assign output_9_V_d0 = r_V_fu_1004_p3;

assign overflow_fu_842_p2 = (tmp_43_fu_836_p2 & brmerge_fu_830_p2);

assign p_392_not_fu_872_p2 = (tmp_43_fu_836_p2 | brmerge23_demorgan_fu_848_p2);

assign p_Result_13_fu_814_p3 = p_Val2_38_fu_809_p2[32'd8];

assign p_Result_s_fu_795_p3 = ret_V_6_fu_789_p2[32'd9];

assign p_Val2_32_fu_734_p4 = {{input_V_q0[15:8]}};

assign p_Val2_34_fu_754_p1 = input_V_q1[7:0];

assign p_Val2_38_fu_809_p2 = ($signed(tmp1_fu_803_p2) + $signed(ret_V_reg_1097));

assign p_Val2_41_fu_894_p3 = ((p_392_not_fu_872_p2[0:0] === 1'b1) ? p_mux_fu_878_p3 : p_s_fu_886_p3);

assign p_Val2_s_fu_726_p1 = input_V_q0[7:0];

assign p_lshr_cast_fu_987_p1 = tmp_156_fu_977_p4;

assign p_lshr_f_cast_fu_1000_p1 = $unsigned(tmp_138_fu_997_p1);

assign p_mux_fu_878_p3 = ((brmerge21_fu_866_p2[0:0] === 1'b1) ? 9'd255 : p_Val2_38_fu_809_p2);

assign p_neg_fu_971_p2 = ($signed(10'd0) - $signed(tmp_122_tr_fu_968_p1));

assign p_neg_t_fu_991_p2 = (9'd0 - p_lshr_cast_fu_987_p1);

assign p_s_fu_886_p3 = ((underflow_fu_860_p2[0:0] === 1'b1) ? 9'd256 : p_Val2_38_fu_809_p2);

assign p_shl1_cast_fu_672_p3 = {{tmp_1141_reg_1057}, {4'd0}};

assign p_shl2_cast_fu_930_p1 = tmp_146_fu_923_p3;

assign p_shl3_cast_fu_503_p1 = tmp_fu_495_p3;

assign p_shl4_cast_fu_515_p1 = tmp_144_fu_507_p3;

assign p_shl_cast_fu_688_p3 = {{tmp_1142_reg_1067}, {4'd0}};

assign r_V_fu_1004_p3 = ((tmp_1148_reg_1120[0:0] === 1'b1) ? p_neg_t_fu_991_p2 : p_lshr_f_cast_fu_1000_p1);

assign ret_V_5_fu_777_p2 = ($signed(lhs_V_3_fu_768_p1) + $signed(rhs_V_3_fu_771_p1));

assign ret_V_6_fu_789_p2 = ($signed(ret_V_5_fu_777_p2) + $signed(rhs_V_6_cast_fu_783_p1));

assign ret_V_fu_748_p2 = ($signed(lhs_V_fu_730_p1) + $signed(rhs_V_fu_744_p1));

assign rhs_V_3_fu_771_p1 = p_Val2_34_reg_1103;

assign rhs_V_6_cast_fu_783_p1 = p_Val2_36_reg_1109;

assign rhs_V_fu_744_p1 = $signed(p_Val2_32_fu_734_p4);

assign tmp1_fu_803_p2 = ($signed(tmp_133_fu_774_p1) + $signed(tmp_134_fu_786_p1));

assign tmp_1141_fu_607_p1 = tmp_150_fu_601_p2[8:0];

assign tmp_1142_fu_635_p1 = tmp_152_fu_629_p2[8:0];

assign tmp_1147_fu_822_p3 = ret_V_6_fu_789_p2[32'd9];

assign tmp_122_tr_fu_968_p1 = p_Val2_41_reg_1115;

assign tmp_132_cast_fu_701_p1 = tmp_131_reg_1072;

assign tmp_133_fu_774_p1 = p_Val2_34_reg_1103;

assign tmp_134_fu_786_p1 = p_Val2_36_reg_1109;

assign tmp_134_mid1_fu_571_p4 = {{height_2_fu_557_p2[4:1]}};

assign tmp_138_fu_997_p1 = $signed(tmp_137_reg_1125);

assign tmp_144_fu_507_p3 = {{tmp_mid2_v_fu_487_p3}, {1'd0}};

assign tmp_145_fu_519_p2 = (p_shl3_cast_fu_503_p1 - p_shl4_cast_fu_515_p1);

assign tmp_146_fu_923_p3 = {{tmp_mid2_v_reg_1035_pp0_iter3_reg}, {4'd0}};

assign tmp_147_fu_934_p2 = (p_shl2_cast_fu_930_p1 - tmp_mid2_cast_fu_920_p1);

assign tmp_148_fu_545_p2 = ((width_reg_420 < 5'd29) ? 1'b1 : 1'b0);

assign tmp_149_fu_943_p2 = (tmp_38_mid2_cast_fu_940_p1 + tmp_147_fu_934_p2);

assign tmp_150_fu_601_p2 = ($signed(tmp_39_mid2_cast_fu_597_p1) + $signed(tmp_277_cast_fu_525_p1));

assign tmp_151_fu_679_p2 = ($signed(p_shl1_cast_fu_672_p3) - $signed(tmp_281_cast_fu_669_p1));

assign tmp_152_fu_629_p2 = ($signed(tmp_41_mid2_cast_fu_625_p1) + $signed(tmp_277_cast_fu_525_p1));

assign tmp_153_fu_695_p2 = ($signed(p_shl_cast_fu_688_p3) - $signed(tmp_284_cast_fu_685_p1));

assign tmp_154_fu_704_p2 = (tmp_132_cast_fu_701_p1 + tmp_151_fu_679_p2);

assign tmp_155_fu_715_p2 = (tmp_132_cast_fu_701_p1 + tmp_153_fu_695_p2);

assign tmp_156_fu_977_p4 = {{p_neg_fu_971_p2[9:2]}};

assign tmp_277_cast_fu_525_p1 = $signed(tmp_145_fu_519_p2);

assign tmp_280_cast_fu_949_p1 = $signed(tmp_149_fu_943_p2);

assign tmp_281_cast_fu_669_p1 = tmp_150_reg_1052;

assign tmp_284_cast_fu_685_p1 = tmp_152_reg_1062;

assign tmp_287_cast_fu_710_p1 = tmp_154_fu_704_p2;

assign tmp_288_cast_fu_721_p1 = tmp_155_fu_715_p2;

assign tmp_38_mid2_cast_fu_940_p1 = tmp_38_mid2_reg_1042_pp0_iter3_reg;

assign tmp_38_mid2_fu_581_p3 = ((tmp_42_mid_fu_551_p2[0:0] === 1'b1) ? tmp_38_mid_fu_529_p3 : tmp_134_mid1_fu_571_p4);

assign tmp_38_mid_fu_529_p3 = ((exitcond_flatten_fu_465_p2[0:0] === 1'b1) ? 4'd0 : tmp_s_fu_431_p4);

assign tmp_39_mid2_cast_fu_597_p1 = tmp_39_mid2_fu_589_p3;

assign tmp_39_mid2_fu_589_p3 = ((tmp_42_mid_fu_551_p2[0:0] === 1'b1) ? height_mid_fu_471_p3 : height_2_fu_557_p2);

assign tmp_40_fu_441_p2 = (ap_phi_mux_height_phi_fu_413_p4 | 5'd1);

assign tmp_40_mid1_fu_611_p2 = (height_2_fu_557_p2 | 5'd1);

assign tmp_41_mid2_cast_fu_625_p1 = tmp_41_mid2_fu_617_p3;

assign tmp_41_mid2_fu_617_p3 = ((tmp_42_mid_fu_551_p2[0:0] === 1'b1) ? tmp_41_mid_fu_537_p3 : tmp_40_mid1_fu_611_p2);

assign tmp_41_mid_fu_537_p3 = ((exitcond_flatten_fu_465_p2[0:0] === 1'b1) ? 5'd1 : tmp_40_fu_441_p2);

assign tmp_42_mid_fu_551_p2 = (tmp_148_fu_545_p2 | exitcond_flatten_fu_465_p2);

assign tmp_43_fu_836_p2 = (p_Result_s_fu_795_p3 ^ 1'd1);

assign tmp_fu_495_p3 = {{tmp_mid2_v_fu_487_p3}, {5'd0}};

assign tmp_mid2_cast_fu_920_p1 = tmp_mid2_v_reg_1035_pp0_iter3_reg;

assign tmp_mid2_v_fu_487_p3 = ((exitcond_flatten_fu_465_p2[0:0] === 1'b1) ? fmap_2_fu_459_p2 : ap_phi_mux_fmap_phi_fu_391_p4);

assign tmp_s_fu_431_p4 = {{ap_phi_mux_height_phi_fu_413_p4[4:1]}};

assign underflow_fu_860_p2 = (p_Result_s_fu_795_p3 & brmerge20_fu_854_p2);

assign width_2_fu_649_p2 = (width_mid2_fu_563_p3 + 5'd2);

assign width_mid2_fu_563_p3 = ((tmp_42_mid_fu_551_p2[0:0] === 1'b1) ? width_mid_fu_479_p3 : 5'd0);

assign width_mid_fu_479_p3 = ((exitcond_flatten_fu_465_p2[0:0] === 1'b1) ? 5'd0 : width_reg_420);

always @ (posedge ap_clk) begin
    tmp_152_reg_1062[0] <= 1'b1;
    tmp_1142_reg_1067[0] <= 1'b1;
end

endmodule //avg_pooling_layer1
