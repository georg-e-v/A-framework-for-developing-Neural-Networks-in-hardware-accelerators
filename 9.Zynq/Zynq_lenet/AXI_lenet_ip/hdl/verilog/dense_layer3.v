// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dense_layer3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_V_address0,
        input_V_ce0,
        input_V_q0,
        output_V_address0,
        output_V_ce0,
        output_V_we0,
        output_V_d0
);

parameter    ap_ST_fsm_state1 = 25'd1;
parameter    ap_ST_fsm_state2 = 25'd2;
parameter    ap_ST_fsm_pp0_stage0 = 25'd4;
parameter    ap_ST_fsm_state6 = 25'd8;
parameter    ap_ST_fsm_state7 = 25'd16;
parameter    ap_ST_fsm_state8 = 25'd32;
parameter    ap_ST_fsm_state9 = 25'd64;
parameter    ap_ST_fsm_state10 = 25'd128;
parameter    ap_ST_fsm_state11 = 25'd256;
parameter    ap_ST_fsm_state12 = 25'd512;
parameter    ap_ST_fsm_state13 = 25'd1024;
parameter    ap_ST_fsm_state14 = 25'd2048;
parameter    ap_ST_fsm_state15 = 25'd4096;
parameter    ap_ST_fsm_state16 = 25'd8192;
parameter    ap_ST_fsm_state17 = 25'd16384;
parameter    ap_ST_fsm_state18 = 25'd32768;
parameter    ap_ST_fsm_state19 = 25'd65536;
parameter    ap_ST_fsm_state20 = 25'd131072;
parameter    ap_ST_fsm_state21 = 25'd262144;
parameter    ap_ST_fsm_state22 = 25'd524288;
parameter    ap_ST_fsm_state23 = 25'd1048576;
parameter    ap_ST_fsm_state24 = 25'd2097152;
parameter    ap_ST_fsm_state25 = 25'd4194304;
parameter    ap_ST_fsm_state26 = 25'd8388608;
parameter    ap_ST_fsm_state27 = 25'd16777216;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] input_V_address0;
output   input_V_ce0;
input  [6:0] input_V_q0;
output  [3:0] output_V_address0;
output   output_V_ce0;
output   output_V_we0;
output  [9:0] output_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_V_ce0;
reg output_V_ce0;
reg output_V_we0;

(* fsm_encoding = "none" *) reg   [24:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [9:0] dense_3_weights_V_address0;
reg    dense_3_weights_V_ce0;
wire   [3:0] dense_3_weights_V_q0;
reg  signed [9:0] p_Val2_11_reg_193;
reg   [6:0] i_reg_205;
wire   [9:0] next_mul_fu_227_p2;
reg   [9:0] next_mul_reg_793;
wire    ap_CS_fsm_state2;
wire   [0:0] exitcond1_fu_233_p2;
wire   [3:0] p_1_fu_239_p2;
reg   [3:0] p_1_reg_802;
wire   [63:0] tmp_s_fu_245_p1;
reg   [63:0] tmp_s_reg_807;
wire  signed [13:0] tmp_tr_cast_fu_249_p1;
reg  signed [13:0] tmp_tr_cast_reg_812;
wire   [0:0] exitcond2_fu_253_p2;
reg   [0:0] exitcond2_reg_817;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] exitcond2_reg_817_pp0_iter1_reg;
wire   [6:0] i_2_fu_259_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [0:0] p_Result_s_reg_836;
wire   [9:0] p_Val2_9_fu_307_p1;
reg   [9:0] p_Val2_9_reg_843;
reg   [0:0] p_Result_1_reg_849;
reg   [0:0] tmp_22_reg_855;
wire   [9:0] p_0557_2_fu_484_p3;
reg    ap_enable_reg_pp0_iter2;
wire   [9:0] p_0316_5_fu_631_p3;
wire    ap_CS_fsm_state6;
wire   [3:0] j_1_fu_645_p2;
reg   [3:0] j_1_reg_874;
wire    ap_CS_fsm_state7;
wire   [63:0] tmp_1_fu_651_p1;
reg   [63:0] tmp_1_reg_879;
wire   [0:0] exitcond_fu_639_p2;
wire    ap_CS_fsm_state8;
wire   [9:0] p_0721_1_fu_785_p3;
reg   [9:0] p_0721_1_reg_894;
wire    ap_CS_fsm_state26;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter1;
reg   [3:0] temp_V_address0;
reg    temp_V_ce0;
reg    temp_V_we0;
reg   [8:0] temp_V_d0;
wire   [8:0] temp_V_q0;
reg  signed [9:0] p_Val2_4_reg_158;
reg   [3:0] p_reg_170;
reg   [9:0] phi_mul_reg_181;
reg   [3:0] j_reg_216;
wire    ap_CS_fsm_state27;
wire   [63:0] tmp_16_cast_fu_280_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] tmp_6_fu_265_p1;
wire   [8:0] read_value_V_fu_536_p3;
wire   [9:0] tmp_6_cast_fu_270_p1;
wire   [9:0] tmp_15_fu_274_p2;
wire  signed [3:0] r_V_fu_293_p0;
wire   [6:0] r_V_fu_293_p1;
wire   [10:0] r_V_fu_293_p2;
wire   [0:0] brmerge2_fu_327_p2;
wire   [0:0] tmp_9_fu_331_p2;
wire   [0:0] brmerge9_demorgan_fu_342_p2;
wire   [0:0] brmerge9_fu_346_p2;
wire   [0:0] underflow_fu_352_p2;
wire   [0:0] overflow_fu_336_p2;
wire   [0:0] p_Result_not_fu_363_p2;
wire   [0:0] p_1371_not_fu_368_p2;
wire   [0:0] brmerge1_fu_357_p2;
wire   [0:0] brmerge6_fu_374_p2;
wire   [9:0] p_mux_fu_380_p3;
wire   [9:0] p_s_fu_387_p3;
wire  signed [9:0] p_Val2_10_fu_394_p3;
wire  signed [10:0] lhs_V_1_fu_402_p1;
wire  signed [10:0] rhs_V_1_fu_406_p1;
wire   [10:0] ret_V_fu_410_p2;
wire   [9:0] inner_state_V_fu_424_p2;
wire   [0:0] p_Result_3_fu_430_p3;
wire   [0:0] p_Result_2_fu_416_p3;
wire   [0:0] tmp_10_fu_438_p2;
wire   [0:0] signbit_i_i145_0_not_fu_456_p2;
wire   [0:0] brmerge10_fu_450_p2;
wire   [0:0] underflow_3_fu_444_p2;
wire   [0:0] brmerge11_fu_462_p2;
wire   [9:0] p_mux4_fu_468_p3;
wire   [9:0] p_2_fu_476_p3;
wire   [0:0] tmp_14_fu_496_p3;
wire   [8:0] tmp_13_fu_492_p1;
wire   [8:0] inner_state_V_2_fu_504_p3;
wire   [9:0] inner_state_V_2_cast_fu_512_p1;
wire   [9:0] p_Val2_3_fu_516_p2;
wire   [0:0] p_Result_4_fu_528_p3;
wire   [8:0] p_Val2_5_cast_fu_522_p2;
wire  signed [10:0] lhs_V_fu_549_p1;
wire   [10:0] rhs_V_fu_553_p1;
wire   [10:0] ret_V_2_fu_557_p2;
wire   [9:0] read_value_V_cast_fu_545_p1;
wire   [9:0] sum_V_fu_571_p2;
wire   [0:0] p_Result_6_fu_577_p3;
wire   [0:0] p_Result_5_fu_563_p3;
wire   [0:0] tmp_4_fu_585_p2;
wire   [0:0] signbit_i_i_0_not_fu_603_p2;
wire   [0:0] brmerge7_fu_597_p2;
wire   [0:0] underflow_2_fu_591_p2;
wire   [0:0] brmerge8_fu_609_p2;
wire   [9:0] p_mux3_fu_615_p3;
wire   [9:0] p_1_29_fu_623_p3;
wire   [12:0] tmp_12_fu_656_p3;
wire   [14:0] grp_fu_668_p0;
wire  signed [9:0] grp_fu_668_p1;
wire   [13:0] grp_fu_668_p2;
wire   [3:0] tmp_3_fu_693_p4;
wire   [0:0] p_Result_8_fu_685_p3;
wire   [0:0] p_not_fu_703_p2;
wire   [0:0] p_Result_7_fu_673_p3;
wire   [0:0] brmerge_fu_709_p2;
wire   [0:0] tmp_8_fu_715_p2;
wire   [0:0] p_not3_fu_733_p2;
wire   [0:0] newsignbit_i_i_i_i_fu_727_p2;
wire   [0:0] brmerge3_fu_739_p2;
wire   [0:0] underflow_1_fu_745_p2;
wire   [0:0] overflow_1_fu_721_p2;
wire   [0:0] p_1383_not_fu_757_p2;
wire   [0:0] brmerge4_fu_751_p2;
wire   [9:0] p_Val2_1_fu_681_p1;
wire   [0:0] brmerge5_fu_763_p2;
wire   [9:0] p_mux1_fu_769_p3;
wire   [9:0] p_7_fu_777_p3;
reg    grp_fu_668_ap_start;
wire    grp_fu_668_ap_done;
reg   [24:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [13:0] grp_fu_668_p00;
wire   [10:0] r_V_fu_293_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 25'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

dense_layer3_dense_3_weights_V #(
    .DataWidth( 4 ),
    .AddressRange( 840 ),
    .AddressWidth( 10 ))
dense_3_weights_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_3_weights_V_address0),
    .ce0(dense_3_weights_V_ce0),
    .q0(dense_3_weights_V_q0)
);

dense_layer3_temp_V #(
    .DataWidth( 9 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
temp_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(temp_V_address0),
    .ce0(temp_V_ce0),
    .we0(temp_V_we0),
    .d0(temp_V_d0),
    .q0(temp_V_q0)
);

ActivateNetwork_sdiv_15ns_10s_14_19_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 19 ),
    .din0_WIDTH( 15 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 14 ))
ActivateNetwork_sdiv_15ns_10s_14_19_seq_1_U92(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_668_ap_start),
    .done(grp_fu_668_ap_done),
    .din0(grp_fu_668_p0),
    .din1(grp_fu_668_p1),
    .ce(1'b1),
    .dout(grp_fu_668_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((exitcond1_fu_233_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((exitcond1_fu_233_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_253_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_reg_205 <= i_2_fu_259_p2;
    end else if (((exitcond1_fu_233_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_205 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_233_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        j_reg_216 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        j_reg_216 <= j_1_reg_874;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_reg_817_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_Val2_11_reg_193 <= p_0557_2_fu_484_p3;
    end else if (((exitcond1_fu_233_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        p_Val2_11_reg_193 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_Val2_4_reg_158 <= 10'd0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        p_Val2_4_reg_158 <= p_0316_5_fu_631_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_reg_170 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        p_reg_170 <= p_1_reg_802;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_mul_reg_181 <= 10'd0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        phi_mul_reg_181 <= next_mul_reg_793;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exitcond2_reg_817 <= exitcond2_fu_253_p2;
        exitcond2_reg_817_pp0_iter1_reg <= exitcond2_reg_817;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        j_1_reg_874 <= j_1_fu_645_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        next_mul_reg_793 <= next_mul_fu_227_p2;
        p_1_reg_802 <= p_1_fu_239_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        p_0721_1_reg_894 <= p_0721_1_fu_785_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_reg_817 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_Result_1_reg_849 <= r_V_fu_293_p2[32'd9];
        p_Result_s_reg_836 <= r_V_fu_293_p2[32'd10];
        p_Val2_9_reg_843 <= p_Val2_9_fu_307_p1;
        tmp_22_reg_855 <= r_V_fu_293_p2[32'd10];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_639_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        tmp_1_reg_879[3 : 0] <= tmp_1_fu_651_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_233_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_s_reg_807[3 : 0] <= tmp_s_fu_245_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_233_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_tr_cast_reg_812 <= tmp_tr_cast_fu_249_p1;
    end
end

always @ (*) begin
    if ((exitcond2_fu_253_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((exitcond_fu_639_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_639_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        dense_3_weights_V_ce0 = 1'b1;
    end else begin
        dense_3_weights_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_668_ap_start = 1'b1;
    end else begin
        grp_fu_668_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        input_V_ce0 = 1'b1;
    end else begin
        input_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        output_V_ce0 = 1'b1;
    end else begin
        output_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        output_V_we0 = 1'b1;
    end else begin
        output_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        temp_V_address0 = tmp_1_fu_651_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        temp_V_address0 = tmp_s_reg_807;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        temp_V_address0 = 64'd0;
    end else begin
        temp_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        temp_V_ce0 = 1'b1;
    end else begin
        temp_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        temp_V_d0 = read_value_V_fu_536_p3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        temp_V_d0 = 9'd0;
    end else begin
        temp_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        temp_V_we0 = 1'b1;
    end else begin
        temp_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond1_fu_233_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((exitcond2_fu_253_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((exitcond2_fu_253_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state7 : begin
            if (((exitcond_fu_639_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign brmerge10_fu_450_p2 = (p_Result_3_fu_430_p3 ^ p_Result_2_fu_416_p3);

assign brmerge11_fu_462_p2 = (signbit_i_i145_0_not_fu_456_p2 | p_Result_3_fu_430_p3);

assign brmerge1_fu_357_p2 = (underflow_fu_352_p2 | overflow_fu_336_p2);

assign brmerge2_fu_327_p2 = (tmp_22_reg_855 | p_Result_1_reg_849);

assign brmerge3_fu_739_p2 = (p_not3_fu_733_p2 | newsignbit_i_i_i_i_fu_727_p2);

assign brmerge4_fu_751_p2 = (underflow_1_fu_745_p2 | overflow_1_fu_721_p2);

assign brmerge5_fu_763_p2 = (p_1383_not_fu_757_p2 | overflow_1_fu_721_p2);

assign brmerge6_fu_374_p2 = (p_1371_not_fu_368_p2 | overflow_fu_336_p2);

assign brmerge7_fu_597_p2 = (p_Result_6_fu_577_p3 ^ p_Result_5_fu_563_p3);

assign brmerge8_fu_609_p2 = (signbit_i_i_0_not_fu_603_p2 | p_Result_6_fu_577_p3);

assign brmerge9_demorgan_fu_342_p2 = (tmp_22_reg_855 & p_Result_1_reg_849);

assign brmerge9_fu_346_p2 = (brmerge9_demorgan_fu_342_p2 ^ 1'd1);

assign brmerge_fu_709_p2 = (p_not_fu_703_p2 | p_Result_8_fu_685_p3);

assign dense_3_weights_V_address0 = tmp_16_cast_fu_280_p1;

assign exitcond1_fu_233_p2 = ((p_reg_170 == 4'd10) ? 1'b1 : 1'b0);

assign exitcond2_fu_253_p2 = ((i_reg_205 == 7'd84) ? 1'b1 : 1'b0);

assign exitcond_fu_639_p2 = ((j_reg_216 == 4'd10) ? 1'b1 : 1'b0);

assign grp_fu_668_p0 = grp_fu_668_p00;

assign grp_fu_668_p00 = tmp_12_fu_656_p3;

assign grp_fu_668_p1 = tmp_tr_cast_reg_812;

assign i_2_fu_259_p2 = (i_reg_205 + 7'd1);

assign inner_state_V_2_cast_fu_512_p1 = inner_state_V_2_fu_504_p3;

assign inner_state_V_2_fu_504_p3 = ((tmp_14_fu_496_p3[0:0] === 1'b1) ? 9'd0 : tmp_13_fu_492_p1);

assign inner_state_V_fu_424_p2 = ($signed(p_Val2_10_fu_394_p3) + $signed(p_Val2_11_reg_193));

assign input_V_address0 = tmp_6_fu_265_p1;

assign j_1_fu_645_p2 = (j_reg_216 + 4'd1);

assign lhs_V_1_fu_402_p1 = p_Val2_11_reg_193;

assign lhs_V_fu_549_p1 = p_Val2_4_reg_158;

assign newsignbit_i_i_i_i_fu_727_p2 = (p_Result_8_fu_685_p3 ^ 1'd1);

assign next_mul_fu_227_p2 = (phi_mul_reg_181 + 10'd84);

assign output_V_address0 = tmp_1_reg_879;

assign output_V_d0 = p_0721_1_reg_894;

assign overflow_1_fu_721_p2 = (tmp_8_fu_715_p2 & brmerge_fu_709_p2);

assign overflow_fu_336_p2 = (tmp_9_fu_331_p2 & brmerge2_fu_327_p2);

assign p_0316_5_fu_631_p3 = ((brmerge8_fu_609_p2[0:0] === 1'b1) ? p_mux3_fu_615_p3 : p_1_29_fu_623_p3);

assign p_0557_2_fu_484_p3 = ((brmerge11_fu_462_p2[0:0] === 1'b1) ? p_mux4_fu_468_p3 : p_2_fu_476_p3);

assign p_0721_1_fu_785_p3 = ((brmerge5_fu_763_p2[0:0] === 1'b1) ? p_mux1_fu_769_p3 : p_7_fu_777_p3);

assign p_1371_not_fu_368_p2 = (p_Result_not_fu_363_p2 | brmerge9_demorgan_fu_342_p2);

assign p_1383_not_fu_757_p2 = (underflow_1_fu_745_p2 ^ 1'd1);

assign p_1_29_fu_623_p3 = ((underflow_2_fu_591_p2[0:0] === 1'b1) ? 10'd512 : sum_V_fu_571_p2);

assign p_1_fu_239_p2 = (p_reg_170 + 4'd1);

assign p_2_fu_476_p3 = ((underflow_3_fu_444_p2[0:0] === 1'b1) ? 10'd512 : inner_state_V_fu_424_p2);

assign p_7_fu_777_p3 = ((underflow_1_fu_745_p2[0:0] === 1'b1) ? 10'd512 : p_Val2_1_fu_681_p1);

assign p_Result_2_fu_416_p3 = ret_V_fu_410_p2[32'd10];

assign p_Result_3_fu_430_p3 = inner_state_V_fu_424_p2[32'd9];

assign p_Result_4_fu_528_p3 = p_Val2_3_fu_516_p2[32'd9];

assign p_Result_5_fu_563_p3 = ret_V_2_fu_557_p2[32'd10];

assign p_Result_6_fu_577_p3 = sum_V_fu_571_p2[32'd9];

assign p_Result_7_fu_673_p3 = grp_fu_668_p2[32'd13];

assign p_Result_8_fu_685_p3 = grp_fu_668_p2[32'd9];

assign p_Result_not_fu_363_p2 = (p_Result_s_reg_836 ^ 1'd1);

assign p_Val2_10_fu_394_p3 = ((brmerge6_fu_374_p2[0:0] === 1'b1) ? p_mux_fu_380_p3 : p_s_fu_387_p3);

assign p_Val2_1_fu_681_p1 = grp_fu_668_p2[9:0];

assign p_Val2_3_fu_516_p2 = (10'd16 + inner_state_V_2_cast_fu_512_p1);

assign p_Val2_5_cast_fu_522_p2 = (9'd16 + inner_state_V_2_fu_504_p3);

assign p_Val2_9_fu_307_p1 = r_V_fu_293_p2[9:0];

assign p_mux1_fu_769_p3 = ((brmerge4_fu_751_p2[0:0] === 1'b1) ? 10'd511 : p_Val2_1_fu_681_p1);

assign p_mux3_fu_615_p3 = ((brmerge7_fu_597_p2[0:0] === 1'b1) ? 10'd511 : sum_V_fu_571_p2);

assign p_mux4_fu_468_p3 = ((brmerge10_fu_450_p2[0:0] === 1'b1) ? 10'd511 : inner_state_V_fu_424_p2);

assign p_mux_fu_380_p3 = ((brmerge1_fu_357_p2[0:0] === 1'b1) ? 10'd511 : p_Val2_9_reg_843);

assign p_not3_fu_733_p2 = ((tmp_3_fu_693_p4 != 4'd15) ? 1'b1 : 1'b0);

assign p_not_fu_703_p2 = ((tmp_3_fu_693_p4 != 4'd0) ? 1'b1 : 1'b0);

assign p_s_fu_387_p3 = ((underflow_fu_352_p2[0:0] === 1'b1) ? 10'd512 : p_Val2_9_reg_843);

assign r_V_fu_293_p0 = dense_3_weights_V_q0;

assign r_V_fu_293_p1 = r_V_fu_293_p10;

assign r_V_fu_293_p10 = input_V_q0;

assign r_V_fu_293_p2 = ($signed(r_V_fu_293_p0) * $signed({{1'b0}, {r_V_fu_293_p1}}));

assign read_value_V_cast_fu_545_p1 = read_value_V_fu_536_p3;

assign read_value_V_fu_536_p3 = ((p_Result_4_fu_528_p3[0:0] === 1'b1) ? 9'd511 : p_Val2_5_cast_fu_522_p2);

assign ret_V_2_fu_557_p2 = ($signed(lhs_V_fu_549_p1) + $signed(rhs_V_fu_553_p1));

assign ret_V_fu_410_p2 = ($signed(lhs_V_1_fu_402_p1) + $signed(rhs_V_1_fu_406_p1));

assign rhs_V_1_fu_406_p1 = p_Val2_10_fu_394_p3;

assign rhs_V_fu_553_p1 = read_value_V_fu_536_p3;

assign signbit_i_i145_0_not_fu_456_p2 = (p_Result_2_fu_416_p3 ^ 1'd1);

assign signbit_i_i_0_not_fu_603_p2 = (p_Result_5_fu_563_p3 ^ 1'd1);

assign sum_V_fu_571_p2 = ($signed(read_value_V_cast_fu_545_p1) + $signed(p_Val2_4_reg_158));

assign tmp_10_fu_438_p2 = (p_Result_3_fu_430_p3 ^ 1'd1);

assign tmp_12_fu_656_p3 = {{temp_V_q0}, {4'd0}};

assign tmp_13_fu_492_p1 = p_Val2_11_reg_193[8:0];

assign tmp_14_fu_496_p3 = p_Val2_11_reg_193[32'd9];

assign tmp_15_fu_274_p2 = (phi_mul_reg_181 + tmp_6_cast_fu_270_p1);

assign tmp_16_cast_fu_280_p1 = tmp_15_fu_274_p2;

assign tmp_1_fu_651_p1 = j_reg_216;

assign tmp_3_fu_693_p4 = {{grp_fu_668_p2[13:10]}};

assign tmp_4_fu_585_p2 = (p_Result_6_fu_577_p3 ^ 1'd1);

assign tmp_6_cast_fu_270_p1 = i_reg_205;

assign tmp_6_fu_265_p1 = i_reg_205;

assign tmp_8_fu_715_p2 = (p_Result_7_fu_673_p3 ^ 1'd1);

assign tmp_9_fu_331_p2 = (p_Result_s_reg_836 ^ 1'd1);

assign tmp_s_fu_245_p1 = p_reg_170;

assign tmp_tr_cast_fu_249_p1 = p_Val2_4_reg_158;

assign underflow_1_fu_745_p2 = (p_Result_7_fu_673_p3 & brmerge3_fu_739_p2);

assign underflow_2_fu_591_p2 = (tmp_4_fu_585_p2 & p_Result_5_fu_563_p3);

assign underflow_3_fu_444_p2 = (tmp_10_fu_438_p2 & p_Result_2_fu_416_p3);

assign underflow_fu_352_p2 = (p_Result_s_reg_836 & brmerge9_fu_346_p2);

always @ (posedge ap_clk) begin
    tmp_s_reg_807[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    tmp_1_reg_879[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end

endmodule //dense_layer3
