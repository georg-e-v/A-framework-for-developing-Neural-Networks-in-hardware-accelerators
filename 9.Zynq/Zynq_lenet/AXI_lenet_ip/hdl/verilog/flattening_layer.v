// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module flattening_layer (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_V_address0,
        input_V_ce0,
        input_V_q0,
        output_V_address0,
        output_V_ce0,
        output_V_we0,
        output_V_d0
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state5 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] input_V_address0;
output   input_V_ce0;
input  [7:0] input_V_q0;
output  [9:0] output_V_address0;
output   output_V_ce0;
output   output_V_we0;
output  [7:0] output_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_V_ce0;
reg output_V_ce0;
reg output_V_we0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [9:0] indvar_flatten1_reg_103;
reg   [2:0] y_reg_114;
reg   [7:0] indvar_flatten_reg_125;
reg   [2:0] x_reg_136;
reg   [4:0] i_reg_147;
wire   [0:0] exitcond_flatten1_fu_188_p2;
reg   [0:0] exitcond_flatten1_reg_474;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] exitcond_flatten1_reg_474_pp0_iter1_reg;
wire   [9:0] indvar_flatten_next1_fu_194_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [2:0] tmp_1_mid2_v_fu_258_p3;
reg   [2:0] tmp_1_mid2_v_reg_483;
wire   [2:0] tmp_4_mid2_fu_340_p3;
reg   [2:0] tmp_4_mid2_reg_488;
wire   [10:0] tmp_7_fu_362_p2;
reg   [10:0] tmp_7_reg_494;
reg   [10:0] tmp_7_reg_494_pp0_iter1_reg;
wire   [9:0] tmp_9_fu_402_p2;
reg   [9:0] tmp_9_reg_499;
wire   [7:0] tmp_4_fu_408_p1;
reg   [7:0] tmp_4_reg_504;
wire   [4:0] i_1_fu_412_p2;
wire   [7:0] indvar_flatten_next_fu_424_p3;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg   [2:0] ap_phi_mux_y_phi_fu_118_p4;
wire    ap_block_pp0_stage0;
reg   [2:0] ap_phi_mux_x_phi_fu_140_p4;
wire   [63:0] tmp_13_cast_fu_461_p1;
wire   [63:0] tmp_8_fu_469_p1;
wire   [9:0] p_shl_fu_158_p3;
wire   [7:0] p_shl5_fu_170_p3;
wire   [10:0] p_shl_cast_fu_166_p1;
wire   [10:0] p_shl5_cast_fu_178_p1;
wire   [0:0] exitcond_flatten_fu_206_p2;
wire   [2:0] y_1_fu_200_p2;
wire   [9:0] p_shl_mid1_fu_220_p3;
wire   [7:0] p_shl5_mid1_fu_232_p3;
wire   [10:0] p_shl_cast_mid1_fu_228_p1;
wire   [10:0] p_shl5_cast_mid1_fu_240_p1;
wire   [10:0] tmp_mid1_fu_244_p2;
wire   [10:0] tmp_fu_182_p2;
wire   [6:0] tmp_3_fu_270_p3;
wire   [0:0] exitcond_fu_292_p2;
wire   [0:0] not_exitcond_flatten_fu_286_p2;
wire   [2:0] x_mid_fu_212_p3;
wire   [0:0] exitcond_mid_fu_298_p2;
wire   [0:0] tmp_1_fu_310_p2;
wire   [2:0] x_1_fu_304_p2;
wire   [6:0] tmp_3_mid1_fu_324_p3;
wire   [6:0] tmp_3_mid_fu_278_p3;
wire   [4:0] i_mid2_fu_316_p3;
wire   [6:0] tmp_3_mid2_fu_332_p3;
wire   [6:0] i_cast3_fu_348_p1;
wire   [6:0] tmp1_fu_352_p2;
wire   [10:0] tmp1_cast_fu_358_p1;
wire   [10:0] tmp_mid2_fu_250_p3;
wire   [7:0] tmp_2_fu_368_p3;
wire   [5:0] tmp_5_fu_380_p3;
wire   [8:0] p_shl3_cast_fu_376_p1;
wire   [8:0] p_shl4_cast_fu_388_p1;
wire   [8:0] tmp_6_fu_392_p2;
wire   [9:0] tmp_1_mid2_cast_fu_266_p1;
wire  signed [9:0] tmp_6_cast_fu_398_p1;
wire   [7:0] indvar_flatten_op_fu_418_p2;
wire   [10:0] p_shl1_cast_fu_435_p3;
wire   [10:0] p_shl2_cast_fu_442_p3;
wire   [10:0] tmp_4_mid2_cast_fu_432_p1;
wire   [10:0] tmp_10_fu_449_p2;
wire   [10:0] tmp_11_fu_455_p2;
wire  signed [31:0] tmp_7_cast_fu_466_p1;
wire    ap_CS_fsm_state5;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten1_fu_188_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_147 <= i_1_fu_412_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_147 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten1_fu_188_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten1_reg_103 <= indvar_flatten_next1_fu_194_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten1_reg_103 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten1_fu_188_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_125 <= indvar_flatten_next_fu_424_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_125 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten1_reg_474 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        x_reg_136 <= tmp_4_mid2_reg_488;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        x_reg_136 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten1_reg_474 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        y_reg_114 <= tmp_1_mid2_v_reg_483;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        y_reg_114 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond_flatten1_reg_474 <= exitcond_flatten1_fu_188_p2;
        exitcond_flatten1_reg_474_pp0_iter1_reg <= exitcond_flatten1_reg_474;
        tmp_7_reg_494_pp0_iter1_reg <= tmp_7_reg_494;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten1_fu_188_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_1_mid2_v_reg_483 <= tmp_1_mid2_v_fu_258_p3;
        tmp_4_mid2_reg_488 <= tmp_4_mid2_fu_340_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten1_fu_188_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_4_reg_504 <= tmp_4_fu_408_p1;
        tmp_7_reg_494 <= tmp_7_fu_362_p2;
        tmp_9_reg_499 <= tmp_9_fu_402_p2;
    end
end

always @ (*) begin
    if ((exitcond_flatten1_fu_188_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten1_reg_474 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_x_phi_fu_140_p4 = tmp_4_mid2_reg_488;
    end else begin
        ap_phi_mux_x_phi_fu_140_p4 = x_reg_136;
    end
end

always @ (*) begin
    if (((exitcond_flatten1_reg_474 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_y_phi_fu_118_p4 = tmp_1_mid2_v_reg_483;
    end else begin
        ap_phi_mux_y_phi_fu_118_p4 = y_reg_114;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        input_V_ce0 = 1'b1;
    end else begin
        input_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        output_V_ce0 = 1'b1;
    end else begin
        output_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten1_reg_474_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        output_V_we0 = 1'b1;
    end else begin
        output_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (exitcond_flatten1_fu_188_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (exitcond_flatten1_fu_188_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign exitcond_flatten1_fu_188_p2 = ((indvar_flatten1_reg_103 == 10'd576) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_206_p2 = ((indvar_flatten_reg_125 == 8'd96) ? 1'b1 : 1'b0);

assign exitcond_fu_292_p2 = ((i_reg_147 == 5'd16) ? 1'b1 : 1'b0);

assign exitcond_mid_fu_298_p2 = (not_exitcond_flatten_fu_286_p2 & exitcond_fu_292_p2);

assign i_1_fu_412_p2 = (5'd1 + i_mid2_fu_316_p3);

assign i_cast3_fu_348_p1 = i_mid2_fu_316_p3;

assign i_mid2_fu_316_p3 = ((tmp_1_fu_310_p2[0:0] === 1'b1) ? 5'd0 : i_reg_147);

assign indvar_flatten_next1_fu_194_p2 = (indvar_flatten1_reg_103 + 10'd1);

assign indvar_flatten_next_fu_424_p3 = ((exitcond_flatten_fu_206_p2[0:0] === 1'b1) ? 8'd1 : indvar_flatten_op_fu_418_p2);

assign indvar_flatten_op_fu_418_p2 = (8'd1 + indvar_flatten_reg_125);

assign input_V_address0 = tmp_13_cast_fu_461_p1;

assign not_exitcond_flatten_fu_286_p2 = (exitcond_flatten_fu_206_p2 ^ 1'd1);

assign output_V_address0 = tmp_8_fu_469_p1;

assign output_V_d0 = input_V_q0;

assign p_shl1_cast_fu_435_p3 = {{tmp_4_reg_504}, {3'd0}};

assign p_shl2_cast_fu_442_p3 = {{tmp_9_reg_499}, {1'd0}};

assign p_shl3_cast_fu_376_p1 = tmp_2_fu_368_p3;

assign p_shl4_cast_fu_388_p1 = tmp_5_fu_380_p3;

assign p_shl5_cast_fu_178_p1 = p_shl5_fu_170_p3;

assign p_shl5_cast_mid1_fu_240_p1 = p_shl5_mid1_fu_232_p3;

assign p_shl5_fu_170_p3 = {{ap_phi_mux_y_phi_fu_118_p4}, {5'd0}};

assign p_shl5_mid1_fu_232_p3 = {{y_1_fu_200_p2}, {5'd0}};

assign p_shl_cast_fu_166_p1 = p_shl_fu_158_p3;

assign p_shl_cast_mid1_fu_228_p1 = p_shl_mid1_fu_220_p3;

assign p_shl_fu_158_p3 = {{ap_phi_mux_y_phi_fu_118_p4}, {7'd0}};

assign p_shl_mid1_fu_220_p3 = {{y_1_fu_200_p2}, {7'd0}};

assign tmp1_cast_fu_358_p1 = tmp1_fu_352_p2;

assign tmp1_fu_352_p2 = (tmp_3_mid2_fu_332_p3 + i_cast3_fu_348_p1);

assign tmp_10_fu_449_p2 = (p_shl1_cast_fu_435_p3 - p_shl2_cast_fu_442_p3);

assign tmp_11_fu_455_p2 = (tmp_4_mid2_cast_fu_432_p1 + tmp_10_fu_449_p2);

assign tmp_13_cast_fu_461_p1 = tmp_11_fu_455_p2;

assign tmp_1_fu_310_p2 = (exitcond_mid_fu_298_p2 | exitcond_flatten_fu_206_p2);

assign tmp_1_mid2_cast_fu_266_p1 = tmp_1_mid2_v_fu_258_p3;

assign tmp_1_mid2_v_fu_258_p3 = ((exitcond_flatten_fu_206_p2[0:0] === 1'b1) ? y_1_fu_200_p2 : ap_phi_mux_y_phi_fu_118_p4);

assign tmp_2_fu_368_p3 = {{i_mid2_fu_316_p3}, {3'd0}};

assign tmp_3_fu_270_p3 = {{ap_phi_mux_x_phi_fu_140_p4}, {4'd0}};

assign tmp_3_mid1_fu_324_p3 = {{x_1_fu_304_p2}, {4'd0}};

assign tmp_3_mid2_fu_332_p3 = ((exitcond_mid_fu_298_p2[0:0] === 1'b1) ? tmp_3_mid1_fu_324_p3 : tmp_3_mid_fu_278_p3);

assign tmp_3_mid_fu_278_p3 = ((exitcond_flatten_fu_206_p2[0:0] === 1'b1) ? 7'd0 : tmp_3_fu_270_p3);

assign tmp_4_fu_408_p1 = tmp_9_fu_402_p2[7:0];

assign tmp_4_mid2_cast_fu_432_p1 = tmp_4_mid2_reg_488;

assign tmp_4_mid2_fu_340_p3 = ((exitcond_mid_fu_298_p2[0:0] === 1'b1) ? x_1_fu_304_p2 : x_mid_fu_212_p3);

assign tmp_5_fu_380_p3 = {{i_mid2_fu_316_p3}, {1'd0}};

assign tmp_6_cast_fu_398_p1 = $signed(tmp_6_fu_392_p2);

assign tmp_6_fu_392_p2 = (p_shl3_cast_fu_376_p1 - p_shl4_cast_fu_388_p1);

assign tmp_7_cast_fu_466_p1 = $signed(tmp_7_reg_494_pp0_iter1_reg);

assign tmp_7_fu_362_p2 = (tmp1_cast_fu_358_p1 + tmp_mid2_fu_250_p3);

assign tmp_8_fu_469_p1 = $unsigned(tmp_7_cast_fu_466_p1);

assign tmp_9_fu_402_p2 = ($signed(tmp_1_mid2_cast_fu_266_p1) + $signed(tmp_6_cast_fu_398_p1));

assign tmp_fu_182_p2 = (p_shl_cast_fu_166_p1 - p_shl5_cast_fu_178_p1);

assign tmp_mid1_fu_244_p2 = (p_shl_cast_mid1_fu_228_p1 - p_shl5_cast_mid1_fu_240_p1);

assign tmp_mid2_fu_250_p3 = ((exitcond_flatten_fu_206_p2[0:0] === 1'b1) ? tmp_mid1_fu_244_p2 : tmp_fu_182_p2);

assign x_1_fu_304_p2 = (3'd1 + x_mid_fu_212_p3);

assign x_mid_fu_212_p3 = ((exitcond_flatten_fu_206_p2[0:0] === 1'b1) ? 3'd0 : ap_phi_mux_x_phi_fu_140_p4);

assign y_1_fu_200_p2 = (3'd1 + ap_phi_mux_y_phi_fu_118_p4);

endmodule //flattening_layer
