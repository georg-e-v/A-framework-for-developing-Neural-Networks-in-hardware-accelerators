// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module avg_pooling_layer2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_0_V_address0,
        input_0_V_ce0,
        input_0_V_q0,
        input_0_V_address1,
        input_0_V_ce1,
        input_0_V_q1,
        input_1_V_address0,
        input_1_V_ce0,
        input_1_V_q0,
        input_1_V_address1,
        input_1_V_ce1,
        input_1_V_q1,
        input_2_V_address0,
        input_2_V_ce0,
        input_2_V_q0,
        input_2_V_address1,
        input_2_V_ce1,
        input_2_V_q1,
        input_3_V_address0,
        input_3_V_ce0,
        input_3_V_q0,
        input_3_V_address1,
        input_3_V_ce1,
        input_3_V_q1,
        input_4_V_address0,
        input_4_V_ce0,
        input_4_V_q0,
        input_4_V_address1,
        input_4_V_ce1,
        input_4_V_q1,
        input_5_V_address0,
        input_5_V_ce0,
        input_5_V_q0,
        input_5_V_address1,
        input_5_V_ce1,
        input_5_V_q1,
        input_6_V_address0,
        input_6_V_ce0,
        input_6_V_q0,
        input_6_V_address1,
        input_6_V_ce1,
        input_6_V_q1,
        input_7_V_address0,
        input_7_V_ce0,
        input_7_V_q0,
        input_7_V_address1,
        input_7_V_ce1,
        input_7_V_q1,
        input_8_V_address0,
        input_8_V_ce0,
        input_8_V_q0,
        input_8_V_address1,
        input_8_V_ce1,
        input_8_V_q1,
        input_9_V_address0,
        input_9_V_ce0,
        input_9_V_q0,
        input_9_V_address1,
        input_9_V_ce1,
        input_9_V_q1,
        input_10_V_address0,
        input_10_V_ce0,
        input_10_V_q0,
        input_10_V_address1,
        input_10_V_ce1,
        input_10_V_q1,
        input_11_V_address0,
        input_11_V_ce0,
        input_11_V_q0,
        input_11_V_address1,
        input_11_V_ce1,
        input_11_V_q1,
        output_V_address0,
        output_V_ce0,
        output_V_we0,
        output_V_d0
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state7 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] input_0_V_address0;
output   input_0_V_ce0;
input  [7:0] input_0_V_q0;
output  [7:0] input_0_V_address1;
output   input_0_V_ce1;
input  [7:0] input_0_V_q1;
output  [7:0] input_1_V_address0;
output   input_1_V_ce0;
input  [7:0] input_1_V_q0;
output  [7:0] input_1_V_address1;
output   input_1_V_ce1;
input  [7:0] input_1_V_q1;
output  [7:0] input_2_V_address0;
output   input_2_V_ce0;
input  [7:0] input_2_V_q0;
output  [7:0] input_2_V_address1;
output   input_2_V_ce1;
input  [7:0] input_2_V_q1;
output  [7:0] input_3_V_address0;
output   input_3_V_ce0;
input  [7:0] input_3_V_q0;
output  [7:0] input_3_V_address1;
output   input_3_V_ce1;
input  [7:0] input_3_V_q1;
output  [7:0] input_4_V_address0;
output   input_4_V_ce0;
input  [7:0] input_4_V_q0;
output  [7:0] input_4_V_address1;
output   input_4_V_ce1;
input  [7:0] input_4_V_q1;
output  [7:0] input_5_V_address0;
output   input_5_V_ce0;
input  [7:0] input_5_V_q0;
output  [7:0] input_5_V_address1;
output   input_5_V_ce1;
input  [7:0] input_5_V_q1;
output  [7:0] input_6_V_address0;
output   input_6_V_ce0;
input  [7:0] input_6_V_q0;
output  [7:0] input_6_V_address1;
output   input_6_V_ce1;
input  [7:0] input_6_V_q1;
output  [7:0] input_7_V_address0;
output   input_7_V_ce0;
input  [7:0] input_7_V_q0;
output  [7:0] input_7_V_address1;
output   input_7_V_ce1;
input  [7:0] input_7_V_q1;
output  [7:0] input_8_V_address0;
output   input_8_V_ce0;
input  [7:0] input_8_V_q0;
output  [7:0] input_8_V_address1;
output   input_8_V_ce1;
input  [7:0] input_8_V_q1;
output  [7:0] input_9_V_address0;
output   input_9_V_ce0;
input  [7:0] input_9_V_q0;
output  [7:0] input_9_V_address1;
output   input_9_V_ce1;
input  [7:0] input_9_V_q1;
output  [7:0] input_10_V_address0;
output   input_10_V_ce0;
input  [7:0] input_10_V_q0;
output  [7:0] input_10_V_address1;
output   input_10_V_ce1;
input  [7:0] input_10_V_q1;
output  [7:0] input_11_V_address0;
output   input_11_V_ce0;
input  [7:0] input_11_V_q0;
output  [7:0] input_11_V_address1;
output   input_11_V_ce1;
input  [7:0] input_11_V_q1;
output  [9:0] output_V_address0;
output   output_V_ce0;
output   output_V_we0;
output  [7:0] output_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_0_V_ce0;
reg input_0_V_ce1;
reg input_1_V_ce0;
reg input_1_V_ce1;
reg input_2_V_ce0;
reg input_2_V_ce1;
reg input_3_V_ce0;
reg input_3_V_ce1;
reg input_4_V_ce0;
reg input_4_V_ce1;
reg input_5_V_ce0;
reg input_5_V_ce1;
reg input_6_V_ce0;
reg input_6_V_ce1;
reg input_7_V_ce0;
reg input_7_V_ce1;
reg input_8_V_ce0;
reg input_8_V_ce1;
reg input_9_V_ce0;
reg input_9_V_ce1;
reg input_10_V_ce0;
reg input_10_V_ce1;
reg input_11_V_ce0;
reg input_11_V_ce1;
reg output_V_ce0;
reg output_V_we0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [9:0] indvar_flatten3_reg_458;
reg   [4:0] fmap_reg_469;
reg   [5:0] indvar_flatten_reg_480;
reg   [3:0] height_reg_491;
reg   [3:0] width_reg_502;
reg  signed [7:0] p_Val2_26_reg_559;
wire   [3:0] tmp_29_fu_610_p2;
reg   [3:0] tmp_29_reg_1174;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] exitcond_flatten3_fu_616_p2;
reg   [0:0] exitcond_flatten3_reg_1179;
reg   [0:0] exitcond_flatten3_reg_1179_pp0_iter1_reg;
reg   [0:0] exitcond_flatten3_reg_1179_pp0_iter2_reg;
reg   [0:0] exitcond_flatten3_reg_1179_pp0_iter3_reg;
wire   [9:0] indvar_flatten_next3_fu_622_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] exitcond_flatten_fu_634_p2;
reg   [0:0] exitcond_flatten_reg_1188;
wire   [4:0] tmp_mid2_v_fu_656_p3;
reg   [4:0] tmp_mid2_v_reg_1193;
wire   [0:0] tmp_31_mid_fu_712_p2;
reg   [0:0] tmp_31_mid_reg_1199;
wire   [3:0] height_1_fu_718_p2;
reg   [3:0] height_1_reg_1204;
wire   [3:0] width_mid2_fu_724_p3;
reg   [3:0] width_mid2_reg_1209;
reg   [3:0] width_mid2_reg_1209_pp0_iter1_reg;
wire   [9:0] tmp_138_fu_754_p2;
reg   [9:0] tmp_138_reg_1214;
wire   [7:0] tmp_1132_fu_760_p1;
reg   [7:0] tmp_1132_reg_1219;
wire   [3:0] tmp_28_mid2_fu_764_p3;
reg   [3:0] tmp_28_mid2_reg_1224;
reg   [2:0] tmp_1133_reg_1230;
wire   [3:0] width_1_fu_782_p2;
wire   [5:0] indvar_flatten_next_fu_794_p3;
reg   [9:0] output_V_addr_reg_1365;
reg   [9:0] output_V_addr_reg_1365_pp0_iter2_reg;
reg   [9:0] output_V_addr_reg_1365_pp0_iter3_reg;
wire   [3:0] tmp_102_t_fu_914_p2;
reg   [3:0] tmp_102_t_reg_1370;
wire   [6:0] tmp_1134_fu_927_p1;
reg   [6:0] tmp_1134_reg_1374;
wire   [8:0] ret_V_fu_935_p2;
reg   [8:0] ret_V_reg_1379;
reg    ap_enable_reg_pp0_iter2;
wire   [6:0] tmp3_fu_945_p2;
reg   [6:0] tmp3_reg_1414;
wire  signed [7:0] p_Val2_31_fu_1104_p3;
reg  signed [7:0] p_Val2_31_reg_1419;
reg   [0:0] tmp_1140_reg_1424;
reg   [5:0] tmp_128_reg_1429;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg   [4:0] ap_phi_mux_fmap_phi_fu_473_p4;
wire    ap_block_pp0_stage0;
reg   [3:0] ap_phi_mux_height_phi_fu_495_p4;
reg  signed [7:0] ap_phi_mux_p_Val2_s_phi_fu_516_p12;
wire  signed [7:0] ap_phi_reg_pp0_iter2_p_Val2_s_reg_513;
reg  signed [7:0] ap_phi_mux_p_Val2_22_phi_fu_539_p12;
wire  signed [7:0] ap_phi_reg_pp0_iter2_p_Val2_22_reg_536;
reg  signed [7:0] ap_phi_mux_p_Val2_26_phi_fu_562_p12;
wire  signed [7:0] ap_phi_reg_pp0_iter2_p_Val2_26_reg_559;
wire  signed [7:0] ap_phi_reg_pp0_iter0_p_Val2_24_reg_583;
reg  signed [7:0] ap_phi_reg_pp0_iter1_p_Val2_24_reg_583;
reg  signed [7:0] ap_phi_reg_pp0_iter2_p_Val2_24_reg_583;
reg  signed [7:0] ap_phi_reg_pp0_iter3_p_Val2_24_reg_583;
wire  signed [63:0] tmp_272_cast_fu_846_p1;
wire  signed [63:0] tmp_273_cast_fu_884_p1;
wire   [63:0] tmp_274_cast_fu_909_p1;
wire   [4:0] fmap_1_fu_628_p2;
wire   [7:0] tmp_134_fu_664_p3;
wire   [5:0] tmp_135_fu_676_p3;
wire   [8:0] p_shl2_cast_fu_672_p1;
wire   [8:0] p_shl3_cast_fu_684_p1;
wire   [8:0] tmp_136_fu_688_p2;
wire   [2:0] tmp_s_fu_600_p4;
wire   [0:0] tmp_137_fu_706_p2;
wire   [3:0] height_mid_fu_640_p3;
wire   [3:0] width_mid_fu_648_p3;
wire   [2:0] tmp_27_mid_fu_698_p3;
wire   [2:0] tmp_120_mid1_fu_732_p4;
wire   [2:0] tmp_27_mid2_fu_742_p3;
wire   [9:0] tmp_27_mid2_cast_fu_750_p1;
wire  signed [9:0] tmp_267_cast_fu_694_p1;
wire   [5:0] indvar_flatten_op_fu_788_p2;
wire   [4:0] tmp_fu_805_p1;
wire   [10:0] p_shl_cast_fu_817_p3;
wire   [10:0] p_shl1_cast_fu_824_p3;
wire   [8:0] tmp_28_mid2_cast_fu_837_p1;
wire   [8:0] tmp_fu_805_p2;
wire   [8:0] tmp_140_fu_840_p2;
wire   [3:0] tmp_30_mid_fu_811_p3;
wire   [3:0] tmp_29_mid1_fu_862_p2;
wire   [3:0] tmp_30_mid2_fu_867_p3;
wire   [8:0] tmp_30_mid2_cast_fu_874_p1;
wire   [8:0] tmp_141_fu_878_p2;
wire   [10:0] tmp_32_cast_fu_900_p1;
wire   [10:0] tmp_139_fu_831_p2;
wire   [10:0] tmp_142_fu_903_p2;
wire  signed [8:0] rhs_V_fu_923_p1;
wire  signed [8:0] lhs_V_fu_919_p1;
wire   [6:0] tmp_1135_fu_931_p1;
wire   [6:0] tmp_1138_fu_941_p1;
wire  signed [9:0] lhs_V_2_fu_951_p1;
wire  signed [9:0] rhs_V_2_fu_954_p1;
wire   [9:0] ret_V_3_fu_962_p2;
wire  signed [9:0] rhs_V_4_cast_fu_968_p1;
wire   [9:0] ret_V_4_fu_972_p2;
wire   [6:0] tmp_1136_fu_958_p1;
wire   [6:0] tmp2_fu_986_p2;
wire   [6:0] tmp_33_fu_991_p2;
wire   [2:0] tmp_126_fu_1012_p4;
wire   [0:0] p_Result_12_fu_1004_p3;
wire   [0:0] p_not_fu_1022_p2;
wire   [0:0] p_Result_s_fu_978_p3;
wire   [0:0] brmerge_fu_1028_p2;
wire   [0:0] tmp_35_fu_1034_p2;
wire   [0:0] p_not7_fu_1052_p2;
wire   [0:0] newsignbit_i_i_i_i_fu_1046_p2;
wire   [0:0] brmerge17_fu_1058_p2;
wire   [0:0] underflow_fu_1064_p2;
wire   [0:0] overflow_fu_1040_p2;
wire   [0:0] p_392_not_fu_1076_p2;
wire   [0:0] brmerge18_fu_1070_p2;
wire   [7:0] p_Val2_28_fu_996_p3;
wire   [0:0] brmerge19_fu_1082_p2;
wire   [7:0] p_mux_fu_1088_p3;
wire   [7:0] p_s_fu_1096_p3;
wire  signed [8:0] tmp_106_tr_fu_1130_p1;
wire   [8:0] p_neg_fu_1133_p2;
wire   [6:0] tmp_143_fu_1139_p4;
wire   [7:0] p_lshr_cast_fu_1149_p1;
wire  signed [6:0] tmp_129_fu_1159_p1;
wire   [7:0] p_neg_t_fu_1153_p2;
wire   [7:0] p_lshr_f_cast_fu_1162_p1;
wire    ap_CS_fsm_state7;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [8:0] tmp_fu_805_p10;
reg    ap_condition_834;
reg    ap_condition_830;
reg    ap_condition_842;
reg    ap_condition_318;
reg    ap_condition_409;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((1'b1 == ap_condition_318)) begin
            ap_phi_reg_pp0_iter3_p_Val2_24_reg_583 <= input_10_V_q1;
        end else if (((width_mid2_reg_1209_pp0_iter1_reg == 4'd8) & (exitcond_flatten3_reg_1179_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_p_Val2_24_reg_583 <= input_8_V_q1;
        end else if (((width_mid2_reg_1209_pp0_iter1_reg == 4'd6) & (exitcond_flatten3_reg_1179_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_p_Val2_24_reg_583 <= input_6_V_q1;
        end else if (((width_mid2_reg_1209_pp0_iter1_reg == 4'd4) & (exitcond_flatten3_reg_1179_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_p_Val2_24_reg_583 <= input_4_V_q1;
        end else if (((width_mid2_reg_1209_pp0_iter1_reg == 4'd2) & (exitcond_flatten3_reg_1179_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_p_Val2_24_reg_583 <= input_2_V_q1;
        end else if (((width_mid2_reg_1209_pp0_iter1_reg == 4'd0) & (exitcond_flatten3_reg_1179_pp0_iter1_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter3_p_Val2_24_reg_583 <= input_0_V_q1;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_p_Val2_24_reg_583 <= ap_phi_reg_pp0_iter2_p_Val2_24_reg_583;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten3_reg_1179 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        fmap_reg_469 <= tmp_mid2_v_reg_1193;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        fmap_reg_469 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten3_reg_1179 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        height_reg_491 <= tmp_28_mid2_reg_1224;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        height_reg_491 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten3_fu_616_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten3_reg_458 <= indvar_flatten_next3_fu_622_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten3_reg_458 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten3_fu_616_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_480 <= indvar_flatten_next_fu_794_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_480 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((1'b1 == ap_condition_409)) begin
            p_Val2_26_reg_559 <= input_11_V_q1;
        end else if (((tmp_102_t_reg_1370 == 4'd9) & (exitcond_flatten3_reg_1179_pp0_iter1_reg == 1'd0))) begin
            p_Val2_26_reg_559 <= input_9_V_q1;
        end else if (((tmp_102_t_reg_1370 == 4'd7) & (exitcond_flatten3_reg_1179_pp0_iter1_reg == 1'd0))) begin
            p_Val2_26_reg_559 <= input_7_V_q1;
        end else if (((tmp_102_t_reg_1370 == 4'd5) & (exitcond_flatten3_reg_1179_pp0_iter1_reg == 1'd0))) begin
            p_Val2_26_reg_559 <= input_5_V_q1;
        end else if (((tmp_102_t_reg_1370 == 4'd3) & (exitcond_flatten3_reg_1179_pp0_iter1_reg == 1'd0))) begin
            p_Val2_26_reg_559 <= input_3_V_q1;
        end else if (((tmp_102_t_reg_1370 == 4'd1) & (exitcond_flatten3_reg_1179_pp0_iter1_reg == 1'd0))) begin
            p_Val2_26_reg_559 <= input_1_V_q1;
        end else if ((1'b1 == 1'b1)) begin
            p_Val2_26_reg_559 <= ap_phi_reg_pp0_iter2_p_Val2_26_reg_559;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten3_fu_616_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        width_reg_502 <= width_1_fu_782_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        width_reg_502 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter1_p_Val2_24_reg_583 <= ap_phi_reg_pp0_iter0_p_Val2_24_reg_583;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter2_p_Val2_24_reg_583 <= ap_phi_reg_pp0_iter1_p_Val2_24_reg_583;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exitcond_flatten3_reg_1179 <= exitcond_flatten3_fu_616_p2;
        exitcond_flatten3_reg_1179_pp0_iter1_reg <= exitcond_flatten3_reg_1179;
        tmp_102_t_reg_1370[3 : 1] <= tmp_102_t_fu_914_p2[3 : 1];
        tmp_29_reg_1174[3 : 1] <= tmp_29_fu_610_p2[3 : 1];
        width_mid2_reg_1209_pp0_iter1_reg <= width_mid2_reg_1209;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        exitcond_flatten3_reg_1179_pp0_iter2_reg <= exitcond_flatten3_reg_1179_pp0_iter1_reg;
        exitcond_flatten3_reg_1179_pp0_iter3_reg <= exitcond_flatten3_reg_1179_pp0_iter2_reg;
        output_V_addr_reg_1365_pp0_iter2_reg <= output_V_addr_reg_1365;
        output_V_addr_reg_1365_pp0_iter3_reg <= output_V_addr_reg_1365_pp0_iter2_reg;
        ret_V_reg_1379 <= ret_V_fu_935_p2;
        tmp_1134_reg_1374 <= tmp_1134_fu_927_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten3_fu_616_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exitcond_flatten_reg_1188 <= exitcond_flatten_fu_634_p2;
        height_1_reg_1204 <= height_1_fu_718_p2;
        tmp_1132_reg_1219 <= tmp_1132_fu_760_p1;
        tmp_1133_reg_1230 <= {{width_mid2_fu_724_p3[3:1]}};
        tmp_138_reg_1214 <= tmp_138_fu_754_p2;
        tmp_31_mid_reg_1199 <= tmp_31_mid_fu_712_p2;
        width_mid2_reg_1209 <= width_mid2_fu_724_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten3_reg_1179 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_V_addr_reg_1365 <= tmp_274_cast_fu_909_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten3_reg_1179_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_Val2_31_reg_1419 <= p_Val2_31_fu_1104_p3;
        tmp_1140_reg_1424 <= p_Val2_31_fu_1104_p3[32'd7];
        tmp_128_reg_1429 <= {{p_Val2_31_fu_1104_p3[7:2]}};
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten3_reg_1179_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp3_reg_1414 <= tmp3_fu_945_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten3_fu_616_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_28_mid2_reg_1224 <= tmp_28_mid2_fu_764_p3;
        tmp_mid2_v_reg_1193 <= tmp_mid2_v_fu_656_p3;
    end
end

always @ (*) begin
    if ((exitcond_flatten3_fu_616_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten3_reg_1179 == 1'd0))) begin
        ap_phi_mux_fmap_phi_fu_473_p4 = tmp_mid2_v_reg_1193;
    end else begin
        ap_phi_mux_fmap_phi_fu_473_p4 = fmap_reg_469;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten3_reg_1179 == 1'd0))) begin
        ap_phi_mux_height_phi_fu_495_p4 = tmp_28_mid2_reg_1224;
    end else begin
        ap_phi_mux_height_phi_fu_495_p4 = height_reg_491;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_830)) begin
        if ((1'b1 == ap_condition_834)) begin
            ap_phi_mux_p_Val2_22_phi_fu_539_p12 = input_11_V_q0;
        end else if ((tmp_102_t_reg_1370 == 4'd9)) begin
            ap_phi_mux_p_Val2_22_phi_fu_539_p12 = input_9_V_q0;
        end else if ((tmp_102_t_reg_1370 == 4'd7)) begin
            ap_phi_mux_p_Val2_22_phi_fu_539_p12 = input_7_V_q0;
        end else if ((tmp_102_t_reg_1370 == 4'd5)) begin
            ap_phi_mux_p_Val2_22_phi_fu_539_p12 = input_5_V_q0;
        end else if ((tmp_102_t_reg_1370 == 4'd3)) begin
            ap_phi_mux_p_Val2_22_phi_fu_539_p12 = input_3_V_q0;
        end else if ((tmp_102_t_reg_1370 == 4'd1)) begin
            ap_phi_mux_p_Val2_22_phi_fu_539_p12 = input_1_V_q0;
        end else begin
            ap_phi_mux_p_Val2_22_phi_fu_539_p12 = ap_phi_reg_pp0_iter2_p_Val2_22_reg_536;
        end
    end else begin
        ap_phi_mux_p_Val2_22_phi_fu_539_p12 = ap_phi_reg_pp0_iter2_p_Val2_22_reg_536;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_830)) begin
        if ((1'b1 == ap_condition_834)) begin
            ap_phi_mux_p_Val2_26_phi_fu_562_p12 = input_11_V_q1;
        end else if ((tmp_102_t_reg_1370 == 4'd9)) begin
            ap_phi_mux_p_Val2_26_phi_fu_562_p12 = input_9_V_q1;
        end else if ((tmp_102_t_reg_1370 == 4'd7)) begin
            ap_phi_mux_p_Val2_26_phi_fu_562_p12 = input_7_V_q1;
        end else if ((tmp_102_t_reg_1370 == 4'd5)) begin
            ap_phi_mux_p_Val2_26_phi_fu_562_p12 = input_5_V_q1;
        end else if ((tmp_102_t_reg_1370 == 4'd3)) begin
            ap_phi_mux_p_Val2_26_phi_fu_562_p12 = input_3_V_q1;
        end else if ((tmp_102_t_reg_1370 == 4'd1)) begin
            ap_phi_mux_p_Val2_26_phi_fu_562_p12 = input_1_V_q1;
        end else begin
            ap_phi_mux_p_Val2_26_phi_fu_562_p12 = ap_phi_reg_pp0_iter2_p_Val2_26_reg_559;
        end
    end else begin
        ap_phi_mux_p_Val2_26_phi_fu_562_p12 = ap_phi_reg_pp0_iter2_p_Val2_26_reg_559;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_830)) begin
        if ((1'b1 == ap_condition_842)) begin
            ap_phi_mux_p_Val2_s_phi_fu_516_p12 = input_10_V_q0;
        end else if ((width_mid2_reg_1209_pp0_iter1_reg == 4'd8)) begin
            ap_phi_mux_p_Val2_s_phi_fu_516_p12 = input_8_V_q0;
        end else if ((width_mid2_reg_1209_pp0_iter1_reg == 4'd6)) begin
            ap_phi_mux_p_Val2_s_phi_fu_516_p12 = input_6_V_q0;
        end else if ((width_mid2_reg_1209_pp0_iter1_reg == 4'd4)) begin
            ap_phi_mux_p_Val2_s_phi_fu_516_p12 = input_4_V_q0;
        end else if ((width_mid2_reg_1209_pp0_iter1_reg == 4'd2)) begin
            ap_phi_mux_p_Val2_s_phi_fu_516_p12 = input_2_V_q0;
        end else if ((width_mid2_reg_1209_pp0_iter1_reg == 4'd0)) begin
            ap_phi_mux_p_Val2_s_phi_fu_516_p12 = input_0_V_q0;
        end else begin
            ap_phi_mux_p_Val2_s_phi_fu_516_p12 = ap_phi_reg_pp0_iter2_p_Val2_s_reg_513;
        end
    end else begin
        ap_phi_mux_p_Val2_s_phi_fu_516_p12 = ap_phi_reg_pp0_iter2_p_Val2_s_reg_513;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        input_0_V_ce0 = 1'b1;
    end else begin
        input_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        input_0_V_ce1 = 1'b1;
    end else begin
        input_0_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        input_10_V_ce0 = 1'b1;
    end else begin
        input_10_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        input_10_V_ce1 = 1'b1;
    end else begin
        input_10_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        input_11_V_ce0 = 1'b1;
    end else begin
        input_11_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        input_11_V_ce1 = 1'b1;
    end else begin
        input_11_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        input_1_V_ce0 = 1'b1;
    end else begin
        input_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        input_1_V_ce1 = 1'b1;
    end else begin
        input_1_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        input_2_V_ce0 = 1'b1;
    end else begin
        input_2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        input_2_V_ce1 = 1'b1;
    end else begin
        input_2_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        input_3_V_ce0 = 1'b1;
    end else begin
        input_3_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        input_3_V_ce1 = 1'b1;
    end else begin
        input_3_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        input_4_V_ce0 = 1'b1;
    end else begin
        input_4_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        input_4_V_ce1 = 1'b1;
    end else begin
        input_4_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        input_5_V_ce0 = 1'b1;
    end else begin
        input_5_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        input_5_V_ce1 = 1'b1;
    end else begin
        input_5_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        input_6_V_ce0 = 1'b1;
    end else begin
        input_6_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        input_6_V_ce1 = 1'b1;
    end else begin
        input_6_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        input_7_V_ce0 = 1'b1;
    end else begin
        input_7_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        input_7_V_ce1 = 1'b1;
    end else begin
        input_7_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        input_8_V_ce0 = 1'b1;
    end else begin
        input_8_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        input_8_V_ce1 = 1'b1;
    end else begin
        input_8_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        input_9_V_ce0 = 1'b1;
    end else begin
        input_9_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        input_9_V_ce1 = 1'b1;
    end else begin
        input_9_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_V_ce0 = 1'b1;
    end else begin
        output_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (exitcond_flatten3_reg_1179_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_V_we0 = 1'b1;
    end else begin
        output_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_flatten3_fu_616_p2 == 1'd1)) & ~((ap_enable_reg_pp0_iter3 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter4 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter3 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_flatten3_fu_616_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_318 = (~(width_mid2_reg_1209_pp0_iter1_reg == 4'd0) & ~(width_mid2_reg_1209_pp0_iter1_reg == 4'd2) & ~(width_mid2_reg_1209_pp0_iter1_reg == 4'd4) & ~(width_mid2_reg_1209_pp0_iter1_reg == 4'd6) & ~(width_mid2_reg_1209_pp0_iter1_reg == 4'd8) & (exitcond_flatten3_reg_1179_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_condition_409 = (~(tmp_102_t_reg_1370 == 4'd9) & ~(tmp_102_t_reg_1370 == 4'd7) & ~(tmp_102_t_reg_1370 == 4'd5) & ~(tmp_102_t_reg_1370 == 4'd3) & ~(tmp_102_t_reg_1370 == 4'd1) & (exitcond_flatten3_reg_1179_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_condition_830 = ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (exitcond_flatten3_reg_1179_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_condition_834 = (~(tmp_102_t_reg_1370 == 4'd9) & ~(tmp_102_t_reg_1370 == 4'd7) & ~(tmp_102_t_reg_1370 == 4'd5) & ~(tmp_102_t_reg_1370 == 4'd3) & ~(tmp_102_t_reg_1370 == 4'd1));
end

always @ (*) begin
    ap_condition_842 = (~(width_mid2_reg_1209_pp0_iter1_reg == 4'd0) & ~(width_mid2_reg_1209_pp0_iter1_reg == 4'd2) & ~(width_mid2_reg_1209_pp0_iter1_reg == 4'd4) & ~(width_mid2_reg_1209_pp0_iter1_reg == 4'd6) & ~(width_mid2_reg_1209_pp0_iter1_reg == 4'd8));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_p_Val2_24_reg_583 = 'bx;

assign ap_phi_reg_pp0_iter2_p_Val2_22_reg_536 = 'bx;

assign ap_phi_reg_pp0_iter2_p_Val2_26_reg_559 = 'bx;

assign ap_phi_reg_pp0_iter2_p_Val2_s_reg_513 = 'bx;

assign brmerge17_fu_1058_p2 = (p_not7_fu_1052_p2 | newsignbit_i_i_i_i_fu_1046_p2);

assign brmerge18_fu_1070_p2 = (underflow_fu_1064_p2 | overflow_fu_1040_p2);

assign brmerge19_fu_1082_p2 = (p_392_not_fu_1076_p2 | overflow_fu_1040_p2);

assign brmerge_fu_1028_p2 = (p_not_fu_1022_p2 | p_Result_12_fu_1004_p3);

assign exitcond_flatten3_fu_616_p2 = ((indvar_flatten3_reg_458 == 10'd576) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_634_p2 = ((indvar_flatten_reg_480 == 6'd36) ? 1'b1 : 1'b0);

assign fmap_1_fu_628_p2 = (5'd1 + ap_phi_mux_fmap_phi_fu_473_p4);

assign height_1_fu_718_p2 = (4'd2 + height_mid_fu_640_p3);

assign height_mid_fu_640_p3 = ((exitcond_flatten_fu_634_p2[0:0] === 1'b1) ? 4'd0 : ap_phi_mux_height_phi_fu_495_p4);

assign indvar_flatten_next3_fu_622_p2 = (indvar_flatten3_reg_458 + 10'd1);

assign indvar_flatten_next_fu_794_p3 = ((exitcond_flatten_fu_634_p2[0:0] === 1'b1) ? 6'd1 : indvar_flatten_op_fu_788_p2);

assign indvar_flatten_op_fu_788_p2 = (6'd1 + indvar_flatten_reg_480);

assign input_0_V_address0 = tmp_272_cast_fu_846_p1;

assign input_0_V_address1 = tmp_273_cast_fu_884_p1;

assign input_10_V_address0 = tmp_272_cast_fu_846_p1;

assign input_10_V_address1 = tmp_273_cast_fu_884_p1;

assign input_11_V_address0 = tmp_272_cast_fu_846_p1;

assign input_11_V_address1 = tmp_273_cast_fu_884_p1;

assign input_1_V_address0 = tmp_272_cast_fu_846_p1;

assign input_1_V_address1 = tmp_273_cast_fu_884_p1;

assign input_2_V_address0 = tmp_272_cast_fu_846_p1;

assign input_2_V_address1 = tmp_273_cast_fu_884_p1;

assign input_3_V_address0 = tmp_272_cast_fu_846_p1;

assign input_3_V_address1 = tmp_273_cast_fu_884_p1;

assign input_4_V_address0 = tmp_272_cast_fu_846_p1;

assign input_4_V_address1 = tmp_273_cast_fu_884_p1;

assign input_5_V_address0 = tmp_272_cast_fu_846_p1;

assign input_5_V_address1 = tmp_273_cast_fu_884_p1;

assign input_6_V_address0 = tmp_272_cast_fu_846_p1;

assign input_6_V_address1 = tmp_273_cast_fu_884_p1;

assign input_7_V_address0 = tmp_272_cast_fu_846_p1;

assign input_7_V_address1 = tmp_273_cast_fu_884_p1;

assign input_8_V_address0 = tmp_272_cast_fu_846_p1;

assign input_8_V_address1 = tmp_273_cast_fu_884_p1;

assign input_9_V_address0 = tmp_272_cast_fu_846_p1;

assign input_9_V_address1 = tmp_273_cast_fu_884_p1;

assign lhs_V_2_fu_951_p1 = $signed(ret_V_reg_1379);

assign lhs_V_fu_919_p1 = ap_phi_mux_p_Val2_s_phi_fu_516_p12;

assign newsignbit_i_i_i_i_fu_1046_p2 = (p_Result_12_fu_1004_p3 ^ 1'd1);

assign output_V_address0 = output_V_addr_reg_1365_pp0_iter3_reg;

assign output_V_d0 = ((tmp_1140_reg_1424[0:0] === 1'b1) ? p_neg_t_fu_1153_p2 : p_lshr_f_cast_fu_1162_p1);

assign overflow_fu_1040_p2 = (tmp_35_fu_1034_p2 & brmerge_fu_1028_p2);

assign p_392_not_fu_1076_p2 = (underflow_fu_1064_p2 ^ 1'd1);

assign p_Result_12_fu_1004_p3 = tmp_33_fu_991_p2[32'd6];

assign p_Result_s_fu_978_p3 = ret_V_4_fu_972_p2[32'd9];

assign p_Val2_28_fu_996_p3 = {{tmp_33_fu_991_p2}, {1'd0}};

assign p_Val2_31_fu_1104_p3 = ((brmerge19_fu_1082_p2[0:0] === 1'b1) ? p_mux_fu_1088_p3 : p_s_fu_1096_p3);

assign p_lshr_cast_fu_1149_p1 = tmp_143_fu_1139_p4;

assign p_lshr_f_cast_fu_1162_p1 = $unsigned(tmp_129_fu_1159_p1);

assign p_mux_fu_1088_p3 = ((brmerge18_fu_1070_p2[0:0] === 1'b1) ? 8'd127 : p_Val2_28_fu_996_p3);

assign p_neg_fu_1133_p2 = ($signed(9'd0) - $signed(tmp_106_tr_fu_1130_p1));

assign p_neg_t_fu_1153_p2 = (8'd0 - p_lshr_cast_fu_1149_p1);

assign p_not7_fu_1052_p2 = ((tmp_126_fu_1012_p4 != 3'd7) ? 1'b1 : 1'b0);

assign p_not_fu_1022_p2 = ((tmp_126_fu_1012_p4 != 3'd0) ? 1'b1 : 1'b0);

assign p_s_fu_1096_p3 = ((underflow_fu_1064_p2[0:0] === 1'b1) ? 8'd128 : p_Val2_28_fu_996_p3);

assign p_shl1_cast_fu_824_p3 = {{tmp_138_reg_1214}, {1'd0}};

assign p_shl2_cast_fu_672_p1 = tmp_134_fu_664_p3;

assign p_shl3_cast_fu_684_p1 = tmp_135_fu_676_p3;

assign p_shl_cast_fu_817_p3 = {{tmp_1132_reg_1219}, {3'd0}};

assign ret_V_3_fu_962_p2 = ($signed(lhs_V_2_fu_951_p1) + $signed(rhs_V_2_fu_954_p1));

assign ret_V_4_fu_972_p2 = ($signed(ret_V_3_fu_962_p2) + $signed(rhs_V_4_cast_fu_968_p1));

assign ret_V_fu_935_p2 = ($signed(rhs_V_fu_923_p1) + $signed(lhs_V_fu_919_p1));

assign rhs_V_2_fu_954_p1 = ap_phi_reg_pp0_iter3_p_Val2_24_reg_583;

assign rhs_V_4_cast_fu_968_p1 = p_Val2_26_reg_559;

assign rhs_V_fu_923_p1 = ap_phi_mux_p_Val2_22_phi_fu_539_p12;

assign tmp2_fu_986_p2 = (tmp_1134_reg_1374 + tmp_1136_fu_958_p1);

assign tmp3_fu_945_p2 = (tmp_1135_fu_931_p1 + tmp_1138_fu_941_p1);

assign tmp_102_t_fu_914_p2 = (width_mid2_reg_1209 | 4'd1);

assign tmp_106_tr_fu_1130_p1 = p_Val2_31_reg_1419;

assign tmp_1132_fu_760_p1 = tmp_138_fu_754_p2[7:0];

assign tmp_1134_fu_927_p1 = ap_phi_mux_p_Val2_22_phi_fu_539_p12[6:0];

assign tmp_1135_fu_931_p1 = ap_phi_mux_p_Val2_s_phi_fu_516_p12[6:0];

assign tmp_1136_fu_958_p1 = ap_phi_reg_pp0_iter3_p_Val2_24_reg_583[6:0];

assign tmp_1138_fu_941_p1 = ap_phi_mux_p_Val2_26_phi_fu_562_p12[6:0];

assign tmp_120_mid1_fu_732_p4 = {{height_1_fu_718_p2[3:1]}};

assign tmp_126_fu_1012_p4 = {{ret_V_4_fu_972_p2[9:7]}};

assign tmp_129_fu_1159_p1 = $signed(tmp_128_reg_1429);

assign tmp_134_fu_664_p3 = {{tmp_mid2_v_fu_656_p3}, {3'd0}};

assign tmp_135_fu_676_p3 = {{tmp_mid2_v_fu_656_p3}, {1'd0}};

assign tmp_136_fu_688_p2 = (p_shl2_cast_fu_672_p1 - p_shl3_cast_fu_684_p1);

assign tmp_137_fu_706_p2 = ((width_reg_502 < 4'd12) ? 1'b1 : 1'b0);

assign tmp_138_fu_754_p2 = ($signed(tmp_27_mid2_cast_fu_750_p1) + $signed(tmp_267_cast_fu_694_p1));

assign tmp_139_fu_831_p2 = (p_shl_cast_fu_817_p3 - p_shl1_cast_fu_824_p3);

assign tmp_140_fu_840_p2 = (tmp_28_mid2_cast_fu_837_p1 + tmp_fu_805_p2);

assign tmp_141_fu_878_p2 = (tmp_30_mid2_cast_fu_874_p1 + tmp_fu_805_p2);

assign tmp_142_fu_903_p2 = (tmp_32_cast_fu_900_p1 + tmp_139_fu_831_p2);

assign tmp_143_fu_1139_p4 = {{p_neg_fu_1133_p2[8:2]}};

assign tmp_267_cast_fu_694_p1 = $signed(tmp_136_fu_688_p2);

assign tmp_272_cast_fu_846_p1 = $signed(tmp_140_fu_840_p2);

assign tmp_273_cast_fu_884_p1 = $signed(tmp_141_fu_878_p2);

assign tmp_274_cast_fu_909_p1 = tmp_142_fu_903_p2;

assign tmp_27_mid2_cast_fu_750_p1 = tmp_27_mid2_fu_742_p3;

assign tmp_27_mid2_fu_742_p3 = ((tmp_31_mid_fu_712_p2[0:0] === 1'b1) ? tmp_27_mid_fu_698_p3 : tmp_120_mid1_fu_732_p4);

assign tmp_27_mid_fu_698_p3 = ((exitcond_flatten_fu_634_p2[0:0] === 1'b1) ? 3'd0 : tmp_s_fu_600_p4);

assign tmp_28_mid2_cast_fu_837_p1 = tmp_28_mid2_reg_1224;

assign tmp_28_mid2_fu_764_p3 = ((tmp_31_mid_fu_712_p2[0:0] === 1'b1) ? height_mid_fu_640_p3 : height_1_fu_718_p2);

assign tmp_29_fu_610_p2 = (ap_phi_mux_height_phi_fu_495_p4 | 4'd1);

assign tmp_29_mid1_fu_862_p2 = (height_1_reg_1204 | 4'd1);

assign tmp_30_mid2_cast_fu_874_p1 = tmp_30_mid2_fu_867_p3;

assign tmp_30_mid2_fu_867_p3 = ((tmp_31_mid_reg_1199[0:0] === 1'b1) ? tmp_30_mid_fu_811_p3 : tmp_29_mid1_fu_862_p2);

assign tmp_30_mid_fu_811_p3 = ((exitcond_flatten_reg_1188[0:0] === 1'b1) ? 4'd1 : tmp_29_reg_1174);

assign tmp_31_mid_fu_712_p2 = (tmp_137_fu_706_p2 | exitcond_flatten_fu_634_p2);

assign tmp_32_cast_fu_900_p1 = tmp_1133_reg_1230;

assign tmp_33_fu_991_p2 = (tmp3_reg_1414 + tmp2_fu_986_p2);

assign tmp_35_fu_1034_p2 = (p_Result_s_fu_978_p3 ^ 1'd1);

assign tmp_fu_805_p1 = tmp_fu_805_p10;

assign tmp_fu_805_p10 = tmp_mid2_v_reg_1193;

assign tmp_fu_805_p2 = (9'd13 * tmp_fu_805_p1);

assign tmp_mid2_v_fu_656_p3 = ((exitcond_flatten_fu_634_p2[0:0] === 1'b1) ? fmap_1_fu_628_p2 : ap_phi_mux_fmap_phi_fu_473_p4);

assign tmp_s_fu_600_p4 = {{ap_phi_mux_height_phi_fu_495_p4[3:1]}};

assign underflow_fu_1064_p2 = (p_Result_s_fu_978_p3 & brmerge17_fu_1058_p2);

assign width_1_fu_782_p2 = (4'd2 + width_mid2_fu_724_p3);

assign width_mid2_fu_724_p3 = ((tmp_31_mid_fu_712_p2[0:0] === 1'b1) ? width_mid_fu_648_p3 : 4'd0);

assign width_mid_fu_648_p3 = ((exitcond_flatten_fu_634_p2[0:0] === 1'b1) ? 4'd0 : width_reg_502);

always @ (posedge ap_clk) begin
    tmp_29_reg_1174[0] <= 1'b1;
    tmp_102_t_reg_1370[0] <= 1'b1;
end

endmodule //avg_pooling_layer2
