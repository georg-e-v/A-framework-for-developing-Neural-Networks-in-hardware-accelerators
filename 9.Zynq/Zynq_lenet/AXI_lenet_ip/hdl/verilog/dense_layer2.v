// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dense_layer2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_V_address0,
        input_V_ce0,
        input_V_q0,
        output_V_address0,
        output_V_ce0,
        output_V_we0,
        output_V_d0
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_pp0_stage0 = 5'd8;
parameter    ap_ST_fsm_state7 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] input_V_address0;
output   input_V_ce0;
input  [6:0] input_V_q0;
output  [6:0] output_V_address0;
output   output_V_ce0;
output   output_V_we0;
output  [6:0] output_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_V_ce0;
reg output_V_ce0;
reg output_V_we0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [6:0] dense_2_biases_V_address0;
reg    dense_2_biases_V_ce0;
wire   [1:0] dense_2_biases_V_q0;
wire   [13:0] dense_2_weights_V_address0;
reg    dense_2_weights_V_ce0;
wire   [3:0] dense_2_weights_V_q0;
reg  signed [7:0] p_Val2_17_reg_146;
reg   [6:0] i_reg_156;
wire   [6:0] p_2_fu_173_p2;
reg   [6:0] p_2_reg_462;
wire    ap_CS_fsm_state2;
wire   [63:0] tmp_fu_179_p1;
reg   [63:0] tmp_reg_467;
wire   [0:0] exitcond3_fu_167_p2;
wire   [14:0] tmp_18_fu_208_p2;
reg   [14:0] tmp_18_reg_477;
wire    ap_CS_fsm_state3;
wire  signed [7:0] p_Val2_23_cast_fu_240_p1;
wire   [0:0] exitcond_fu_244_p2;
reg   [0:0] exitcond_reg_487;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state4_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_state6_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] exitcond_reg_487_pp0_iter1_reg;
wire   [6:0] i_3_fu_250_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [10:0] r_V_fu_283_p2;
reg   [10:0] r_V_reg_506;
reg   [6:0] tmp_28_reg_511;
reg   [0:0] tmp_29_reg_516;
wire   [7:0] p_0249_3_fu_432_p3;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state4;
reg    ap_enable_reg_pp0_iter1;
reg   [6:0] p_reg_134;
wire    ap_CS_fsm_state7;
wire  signed [63:0] tmp_22_cast_fu_270_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] tmp_13_fu_256_p1;
wire   [13:0] tmp_16_fu_184_p3;
wire   [9:0] tmp_17_fu_196_p3;
wire   [14:0] p_shl_cast_fu_192_p1;
wire   [14:0] p_shl1_cast_fu_204_p1;
wire   [0:0] tmp_25_fu_214_p3;
wire   [1:0] inner_state_V_cast_fu_222_p3;
wire   [1:0] tmp_cast_fu_230_p1;
wire   [1:0] p_Val2_20_fu_234_p2;
wire   [14:0] tmp_13_cast_fu_261_p1;
wire   [14:0] tmp_19_fu_265_p2;
wire  signed [3:0] r_V_fu_283_p0;
wire   [6:0] r_V_fu_283_p1;
wire   [7:0] tmp_18_cast_fu_317_p1;
wire  signed [7:0] p_Val2_12_fu_314_p1;
wire   [7:0] p_Val2_13_fu_320_p2;
wire   [0:0] p_Result_s_fu_307_p3;
wire   [0:0] p_Result_9_fu_326_p3;
wire   [7:0] phitmp_fu_334_p3;
wire  signed [7:0] p_Val2_14_fu_342_p3;
wire  signed [8:0] lhs_V_fu_350_p1;
wire  signed [8:0] rhs_V_fu_354_p1;
wire   [8:0] ret_V_fu_358_p2;
wire   [7:0] inner_state_V_fu_372_p2;
wire   [0:0] p_Result_11_fu_378_p3;
wire   [0:0] p_Result_10_fu_364_p3;
wire   [0:0] tmp_15_fu_386_p2;
wire   [0:0] signbit_i_i_0_not_fu_404_p2;
wire   [0:0] brmerge_fu_398_p2;
wire   [0:0] underflow_fu_392_p2;
wire   [0:0] brmerge12_fu_410_p2;
wire   [7:0] p_mux_fu_416_p3;
wire   [7:0] p_s_fu_424_p3;
wire   [0:0] tmp_11_fu_444_p2;
wire   [6:0] tmp_26_fu_440_p1;
reg   [4:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [10:0] r_V_fu_283_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

dense_layer2_dense_2_biases_V #(
    .DataWidth( 2 ),
    .AddressRange( 84 ),
    .AddressWidth( 7 ))
dense_2_biases_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_2_biases_V_address0),
    .ce0(dense_2_biases_V_ce0),
    .q0(dense_2_biases_V_q0)
);

dense_layer2_dense_2_weights_V #(
    .DataWidth( 4 ),
    .AddressRange( 10080 ),
    .AddressWidth( 14 ))
dense_2_weights_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_2_weights_V_address0),
    .ce0(dense_2_weights_V_ce0),
    .q0(dense_2_weights_V_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state4) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state4)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state4);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_fu_244_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_156 <= i_3_fu_250_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        i_reg_156 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_reg_487_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        p_Val2_17_reg_146 <= p_0249_3_fu_432_p3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        p_Val2_17_reg_146 <= p_Val2_23_cast_fu_240_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        p_reg_134 <= p_2_reg_462;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        p_reg_134 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond_reg_487 <= exitcond_fu_244_p2;
        exitcond_reg_487_pp0_iter1_reg <= exitcond_reg_487;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        p_2_reg_462 <= p_2_fu_173_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_reg_487 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        r_V_reg_506 <= r_V_fu_283_p2;
        tmp_28_reg_511 <= {{r_V_fu_283_p2[10:4]}};
        tmp_29_reg_516 <= r_V_fu_283_p2[32'd3];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_18_reg_477[14 : 3] <= tmp_18_fu_208_p2[14 : 3];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_167_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_reg_467[6 : 0] <= tmp_fu_179_p1[6 : 0];
    end
end

always @ (*) begin
    if ((exitcond_fu_244_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if ((((exitcond3_fu_167_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond3_fu_167_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        dense_2_biases_V_ce0 = 1'b1;
    end else begin
        dense_2_biases_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dense_2_weights_V_ce0 = 1'b1;
    end else begin
        dense_2_weights_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_V_ce0 = 1'b1;
    end else begin
        input_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        output_V_ce0 = 1'b1;
    end else begin
        output_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        output_V_we0 = 1'b1;
    end else begin
        output_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond3_fu_167_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((exitcond_fu_244_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((exitcond_fu_244_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign brmerge12_fu_410_p2 = (signbit_i_i_0_not_fu_404_p2 | p_Result_11_fu_378_p3);

assign brmerge_fu_398_p2 = (p_Result_11_fu_378_p3 ^ p_Result_10_fu_364_p3);

assign dense_2_biases_V_address0 = tmp_fu_179_p1;

assign dense_2_weights_V_address0 = tmp_22_cast_fu_270_p1;

assign exitcond3_fu_167_p2 = ((p_reg_134 == 7'd84) ? 1'b1 : 1'b0);

assign exitcond_fu_244_p2 = ((i_reg_156 == 7'd120) ? 1'b1 : 1'b0);

assign i_3_fu_250_p2 = (i_reg_156 + 7'd1);

assign inner_state_V_cast_fu_222_p3 = ((tmp_25_fu_214_p3[0:0] === 1'b1) ? 2'd3 : 2'd0);

assign inner_state_V_fu_372_p2 = ($signed(p_Val2_14_fu_342_p3) + $signed(p_Val2_17_reg_146));

assign input_V_address0 = tmp_13_fu_256_p1;

assign lhs_V_fu_350_p1 = p_Val2_17_reg_146;

assign output_V_address0 = tmp_reg_467;

assign output_V_d0 = ((tmp_11_fu_444_p2[0:0] === 1'b1) ? tmp_26_fu_440_p1 : 7'd0);

assign p_0249_3_fu_432_p3 = ((brmerge12_fu_410_p2[0:0] === 1'b1) ? p_mux_fu_416_p3 : p_s_fu_424_p3);

assign p_2_fu_173_p2 = (p_reg_134 + 7'd1);

assign p_Result_10_fu_364_p3 = ret_V_fu_358_p2[32'd8];

assign p_Result_11_fu_378_p3 = inner_state_V_fu_372_p2[32'd7];

assign p_Result_9_fu_326_p3 = p_Val2_13_fu_320_p2[32'd7];

assign p_Result_s_fu_307_p3 = r_V_reg_506[32'd10];

assign p_Val2_12_fu_314_p1 = $signed(tmp_28_reg_511);

assign p_Val2_13_fu_320_p2 = ($signed(tmp_18_cast_fu_317_p1) + $signed(p_Val2_12_fu_314_p1));

assign p_Val2_14_fu_342_p3 = ((p_Result_9_fu_326_p3[0:0] === 1'b1) ? phitmp_fu_334_p3 : p_Val2_13_fu_320_p2);

assign p_Val2_20_fu_234_p2 = (inner_state_V_cast_fu_222_p3 + tmp_cast_fu_230_p1);

assign p_Val2_23_cast_fu_240_p1 = $signed(p_Val2_20_fu_234_p2);

assign p_mux_fu_416_p3 = ((brmerge_fu_398_p2[0:0] === 1'b1) ? 8'd127 : inner_state_V_fu_372_p2);

assign p_s_fu_424_p3 = ((underflow_fu_392_p2[0:0] === 1'b1) ? 8'd128 : inner_state_V_fu_372_p2);

assign p_shl1_cast_fu_204_p1 = tmp_17_fu_196_p3;

assign p_shl_cast_fu_192_p1 = tmp_16_fu_184_p3;

assign phitmp_fu_334_p3 = ((p_Result_s_fu_307_p3[0:0] === 1'b1) ? p_Val2_13_fu_320_p2 : 8'd127);

assign r_V_fu_283_p0 = dense_2_weights_V_q0;

assign r_V_fu_283_p1 = r_V_fu_283_p10;

assign r_V_fu_283_p10 = input_V_q0;

assign r_V_fu_283_p2 = ($signed(r_V_fu_283_p0) * $signed({{1'b0}, {r_V_fu_283_p1}}));

assign ret_V_fu_358_p2 = ($signed(lhs_V_fu_350_p1) + $signed(rhs_V_fu_354_p1));

assign rhs_V_fu_354_p1 = p_Val2_14_fu_342_p3;

assign signbit_i_i_0_not_fu_404_p2 = (p_Result_10_fu_364_p3 ^ 1'd1);

assign tmp_11_fu_444_p2 = (($signed(p_Val2_17_reg_146) > $signed(8'd0)) ? 1'b1 : 1'b0);

assign tmp_13_cast_fu_261_p1 = i_reg_156;

assign tmp_13_fu_256_p1 = i_reg_156;

assign tmp_15_fu_386_p2 = (p_Result_11_fu_378_p3 ^ 1'd1);

assign tmp_16_fu_184_p3 = {{p_reg_134}, {7'd0}};

assign tmp_17_fu_196_p3 = {{p_reg_134}, {3'd0}};

assign tmp_18_cast_fu_317_p1 = tmp_29_reg_516;

assign tmp_18_fu_208_p2 = (p_shl_cast_fu_192_p1 - p_shl1_cast_fu_204_p1);

assign tmp_19_fu_265_p2 = (tmp_18_reg_477 + tmp_13_cast_fu_261_p1);

assign tmp_22_cast_fu_270_p1 = $signed(tmp_19_fu_265_p2);

assign tmp_25_fu_214_p3 = dense_2_biases_V_q0[32'd1];

assign tmp_26_fu_440_p1 = p_Val2_17_reg_146[6:0];

assign tmp_cast_fu_230_p1 = tmp_25_fu_214_p3;

assign tmp_fu_179_p1 = p_reg_134;

assign underflow_fu_392_p2 = (tmp_15_fu_386_p2 & p_Result_10_fu_364_p3);

always @ (posedge ap_clk) begin
    tmp_reg_467[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    tmp_18_reg_477[2:0] <= 3'b000;
end

endmodule //dense_layer2
