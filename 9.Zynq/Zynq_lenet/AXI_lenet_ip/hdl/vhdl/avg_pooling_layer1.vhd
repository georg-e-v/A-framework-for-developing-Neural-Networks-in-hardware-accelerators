-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity avg_pooling_layer1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    input_V_ce0 : OUT STD_LOGIC;
    input_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    input_V_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    input_V_ce1 : OUT STD_LOGIC;
    input_V_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    output_0_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    output_0_V_ce0 : OUT STD_LOGIC;
    output_0_V_we0 : OUT STD_LOGIC;
    output_0_V_d0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    output_1_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    output_1_V_ce0 : OUT STD_LOGIC;
    output_1_V_we0 : OUT STD_LOGIC;
    output_1_V_d0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    output_2_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    output_2_V_ce0 : OUT STD_LOGIC;
    output_2_V_we0 : OUT STD_LOGIC;
    output_2_V_d0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    output_3_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    output_3_V_ce0 : OUT STD_LOGIC;
    output_3_V_we0 : OUT STD_LOGIC;
    output_3_V_d0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    output_4_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    output_4_V_ce0 : OUT STD_LOGIC;
    output_4_V_we0 : OUT STD_LOGIC;
    output_4_V_d0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    output_5_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    output_5_V_ce0 : OUT STD_LOGIC;
    output_5_V_we0 : OUT STD_LOGIC;
    output_5_V_d0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    output_6_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    output_6_V_ce0 : OUT STD_LOGIC;
    output_6_V_we0 : OUT STD_LOGIC;
    output_6_V_d0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    output_7_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    output_7_V_ce0 : OUT STD_LOGIC;
    output_7_V_we0 : OUT STD_LOGIC;
    output_7_V_d0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    output_8_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    output_8_V_ce0 : OUT STD_LOGIC;
    output_8_V_we0 : OUT STD_LOGIC;
    output_8_V_d0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    output_9_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    output_9_V_ce0 : OUT STD_LOGIC;
    output_9_V_we0 : OUT STD_LOGIC;
    output_9_V_d0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    output_10_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    output_10_V_ce0 : OUT STD_LOGIC;
    output_10_V_we0 : OUT STD_LOGIC;
    output_10_V_d0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    output_11_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    output_11_V_ce0 : OUT STD_LOGIC;
    output_11_V_we0 : OUT STD_LOGIC;
    output_11_V_d0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    output_12_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    output_12_V_ce0 : OUT STD_LOGIC;
    output_12_V_we0 : OUT STD_LOGIC;
    output_12_V_d0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    output_13_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    output_13_V_ce0 : OUT STD_LOGIC;
    output_13_V_we0 : OUT STD_LOGIC;
    output_13_V_d0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    output_14_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    output_14_V_ce0 : OUT STD_LOGIC;
    output_14_V_we0 : OUT STD_LOGIC;
    output_14_V_d0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
end;


architecture behav of avg_pooling_layer1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv11_546 : STD_LOGIC_VECTOR (10 downto 0) := "10101000110";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv8_E1 : STD_LOGIC_VECTOR (7 downto 0) := "11100001";
    constant ap_const_lv5_1D : STD_LOGIC_VECTOR (4 downto 0) := "11101";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv9_FF : STD_LOGIC_VECTOR (8 downto 0) := "011111111";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten4_reg_376 : STD_LOGIC_VECTOR (10 downto 0);
    signal fmap_reg_387 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten_reg_398 : STD_LOGIC_VECTOR (7 downto 0);
    signal height_reg_409 : STD_LOGIC_VECTOR (4 downto 0);
    signal width_reg_420 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond_flatten4_fu_447_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten4_reg_1026 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal exitcond_flatten4_reg_1026_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten4_reg_1026_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next4_fu_453_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_mid2_v_fu_487_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_mid2_v_reg_1035 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_mid2_v_reg_1035_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_mid2_v_reg_1035_pp0_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_mid2_v_reg_1035_pp0_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_38_mid2_fu_581_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_38_mid2_reg_1042 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_38_mid2_reg_1042_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_38_mid2_reg_1042_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_38_mid2_reg_1042_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_39_mid2_fu_589_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_39_mid2_reg_1047 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_150_fu_601_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_150_reg_1052 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_1141_fu_607_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_1141_reg_1057 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_152_fu_629_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_152_reg_1062 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_1142_fu_635_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_1142_reg_1067 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_131_reg_1072 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_131_reg_1072_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_131_reg_1072_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_131_reg_1072_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal width_2_fu_649_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_next_fu_661_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_fu_748_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_reg_1097 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Val2_34_fu_754_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_34_reg_1103 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_36_reg_1109 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_41_fu_894_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Val2_41_reg_1115 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_1148_reg_1120 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_137_reg_1125 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_phi_mux_fmap_phi_fu_391_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_height_phi_fu_413_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_287_cast_fu_710_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_288_cast_fu_721_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_280_cast_fu_949_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_fu_1004_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond_flatten_fu_465_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal fmap_2_fu_459_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_495_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_144_fu_507_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl3_cast_fu_503_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl4_cast_fu_515_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_145_fu_519_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_s_fu_431_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_40_fu_441_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_148_fu_545_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal height_mid_fu_471_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_42_mid_fu_551_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal width_mid_fu_479_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal height_2_fu_557_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_38_mid_fu_529_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_134_mid1_fu_571_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_39_mid2_cast_fu_597_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_277_cast_fu_525_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_41_mid_fu_537_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_40_mid1_fu_611_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_41_mid2_fu_617_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_41_mid2_cast_fu_625_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal width_mid2_fu_563_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_op_fu_655_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl1_cast_fu_672_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_281_cast_fu_669_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl_cast_fu_688_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_284_cast_fu_685_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_132_cast_fu_701_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_151_fu_679_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_154_fu_704_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_153_fu_695_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_155_fu_715_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_Val2_s_fu_726_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_32_fu_734_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_V_fu_730_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal rhs_V_fu_744_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal lhs_V_3_fu_768_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal rhs_V_3_fu_771_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal ret_V_5_fu_777_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal rhs_V_6_cast_fu_783_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal ret_V_6_fu_789_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_133_fu_774_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_134_fu_786_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp1_fu_803_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Val2_38_fu_809_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_13_fu_814_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1147_fu_822_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_fu_795_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_fu_830_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_43_fu_836_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge23_demorgan_fu_848_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge20_fu_854_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_fu_860_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_fu_842_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge21_fu_866_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_392_not_fu_872_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_mux_fu_878_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_s_fu_886_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_146_fu_923_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl2_cast_fu_930_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_mid2_cast_fu_920_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_38_mid2_cast_fu_940_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_147_fu_934_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_149_fu_943_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_122_tr_fu_968_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_neg_fu_971_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_156_fu_977_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_lshr_cast_fu_987_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_138_fu_997_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_neg_t_fu_991_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_lshr_f_cast_fu_1000_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    fmap_reg_387_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten4_reg_1026 = ap_const_lv1_0))) then 
                fmap_reg_387 <= tmp_mid2_v_reg_1035;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                fmap_reg_387 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    height_reg_409_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten4_reg_1026 = ap_const_lv1_0))) then 
                height_reg_409 <= tmp_39_mid2_reg_1047;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                height_reg_409 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    indvar_flatten4_reg_376_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten4_fu_447_p2 = ap_const_lv1_0))) then 
                indvar_flatten4_reg_376 <= indvar_flatten_next4_fu_453_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten4_reg_376 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_398_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten4_fu_447_p2 = ap_const_lv1_0))) then 
                indvar_flatten_reg_398 <= indvar_flatten_next_fu_661_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_398 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    width_reg_420_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten4_fu_447_p2 = ap_const_lv1_0))) then 
                width_reg_420 <= width_2_fu_649_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                width_reg_420 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                exitcond_flatten4_reg_1026 <= exitcond_flatten4_fu_447_p2;
                exitcond_flatten4_reg_1026_pp0_iter1_reg <= exitcond_flatten4_reg_1026;
                tmp_131_reg_1072_pp0_iter1_reg <= tmp_131_reg_1072;
                tmp_38_mid2_reg_1042_pp0_iter1_reg <= tmp_38_mid2_reg_1042;
                tmp_mid2_v_reg_1035_pp0_iter1_reg <= tmp_mid2_v_reg_1035;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                exitcond_flatten4_reg_1026_pp0_iter2_reg <= exitcond_flatten4_reg_1026_pp0_iter1_reg;
                tmp_131_reg_1072_pp0_iter2_reg <= tmp_131_reg_1072_pp0_iter1_reg;
                tmp_131_reg_1072_pp0_iter3_reg <= tmp_131_reg_1072_pp0_iter2_reg;
                tmp_38_mid2_reg_1042_pp0_iter2_reg <= tmp_38_mid2_reg_1042_pp0_iter1_reg;
                tmp_38_mid2_reg_1042_pp0_iter3_reg <= tmp_38_mid2_reg_1042_pp0_iter2_reg;
                tmp_mid2_v_reg_1035_pp0_iter2_reg <= tmp_mid2_v_reg_1035_pp0_iter1_reg;
                tmp_mid2_v_reg_1035_pp0_iter3_reg <= tmp_mid2_v_reg_1035_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten4_reg_1026_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                p_Val2_34_reg_1103 <= p_Val2_34_fu_754_p1;
                p_Val2_36_reg_1109 <= input_V_q1(15 downto 8);
                ret_V_reg_1097 <= ret_V_fu_748_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten4_reg_1026_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                p_Val2_41_reg_1115 <= p_Val2_41_fu_894_p3;
                tmp_1148_reg_1120 <= p_Val2_41_fu_894_p3(8 downto 8);
                tmp_137_reg_1125 <= p_Val2_41_fu_894_p3(8 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten4_fu_447_p2 = ap_const_lv1_0))) then
                tmp_1141_reg_1057 <= tmp_1141_fu_607_p1;
                    tmp_1142_reg_1067(8 downto 1) <= tmp_1142_fu_635_p1(8 downto 1);
                tmp_131_reg_1072 <= width_mid2_fu_563_p3(4 downto 1);
                tmp_150_reg_1052 <= tmp_150_fu_601_p2;
                    tmp_152_reg_1062(9 downto 1) <= tmp_152_fu_629_p2(9 downto 1);
                tmp_38_mid2_reg_1042 <= tmp_38_mid2_fu_581_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten4_fu_447_p2 = ap_const_lv1_0))) then
                tmp_39_mid2_reg_1047 <= tmp_39_mid2_fu_589_p3;
                tmp_mid2_v_reg_1035 <= tmp_mid2_v_fu_487_p3;
            end if;
        end if;
    end process;
    tmp_152_reg_1062(0) <= '1';
    tmp_1142_reg_1067(0) <= '1';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, exitcond_flatten4_fu_447_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond_flatten4_fu_447_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond_flatten4_fu_447_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state7 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(exitcond_flatten4_fu_447_p2)
    begin
        if ((exitcond_flatten4_fu_447_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_fmap_phi_fu_391_p4_assign_proc : process(fmap_reg_387, exitcond_flatten4_reg_1026, ap_CS_fsm_pp0_stage0, tmp_mid2_v_reg_1035, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten4_reg_1026 = ap_const_lv1_0))) then 
            ap_phi_mux_fmap_phi_fu_391_p4 <= tmp_mid2_v_reg_1035;
        else 
            ap_phi_mux_fmap_phi_fu_391_p4 <= fmap_reg_387;
        end if; 
    end process;


    ap_phi_mux_height_phi_fu_413_p4_assign_proc : process(height_reg_409, exitcond_flatten4_reg_1026, ap_CS_fsm_pp0_stage0, tmp_39_mid2_reg_1047, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten4_reg_1026 = ap_const_lv1_0))) then 
            ap_phi_mux_height_phi_fu_413_p4 <= tmp_39_mid2_reg_1047;
        else 
            ap_phi_mux_height_phi_fu_413_p4 <= height_reg_409;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    brmerge20_fu_854_p2 <= (brmerge23_demorgan_fu_848_p2 xor ap_const_lv1_1);
    brmerge21_fu_866_p2 <= (underflow_fu_860_p2 or overflow_fu_842_p2);
    brmerge23_demorgan_fu_848_p2 <= (tmp_1147_fu_822_p3 and p_Result_13_fu_814_p3);
    brmerge_fu_830_p2 <= (tmp_1147_fu_822_p3 or p_Result_13_fu_814_p3);
    exitcond_flatten4_fu_447_p2 <= "1" when (indvar_flatten4_reg_376 = ap_const_lv11_546) else "0";
    exitcond_flatten_fu_465_p2 <= "1" when (indvar_flatten_reg_398 = ap_const_lv8_E1) else "0";
    fmap_2_fu_459_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(ap_phi_mux_fmap_phi_fu_391_p4));
    height_2_fu_557_p2 <= std_logic_vector(unsigned(ap_const_lv5_2) + unsigned(height_mid_fu_471_p3));
    height_mid_fu_471_p3 <= 
        ap_const_lv5_0 when (exitcond_flatten_fu_465_p2(0) = '1') else 
        ap_phi_mux_height_phi_fu_413_p4;
    indvar_flatten_next4_fu_453_p2 <= std_logic_vector(unsigned(indvar_flatten4_reg_376) + unsigned(ap_const_lv11_1));
    indvar_flatten_next_fu_661_p3 <= 
        ap_const_lv8_1 when (exitcond_flatten_fu_465_p2(0) = '1') else 
        indvar_flatten_op_fu_655_p2;
    indvar_flatten_op_fu_655_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_398) + unsigned(ap_const_lv8_1));
    input_V_address0 <= tmp_287_cast_fu_710_p1(12 - 1 downto 0);
    input_V_address1 <= tmp_288_cast_fu_721_p1(12 - 1 downto 0);

    input_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_V_ce0 <= ap_const_logic_1;
        else 
            input_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_V_ce1 <= ap_const_logic_1;
        else 
            input_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

        lhs_V_3_fu_768_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_reg_1097),10));

        lhs_V_fu_730_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_s_fu_726_p1),9));

    output_0_V_address0 <= tmp_280_cast_fu_949_p1(7 - 1 downto 0);

    output_0_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_0_V_ce0 <= ap_const_logic_1;
        else 
            output_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_0_V_d0 <= r_V_fu_1004_p3;

    output_0_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, tmp_131_reg_1072_pp0_iter3_reg, ap_enable_reg_pp0_iter4)
    begin
        if (((tmp_131_reg_1072_pp0_iter3_reg = ap_const_lv4_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_0_V_we0 <= ap_const_logic_1;
        else 
            output_0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_10_V_address0 <= tmp_280_cast_fu_949_p1(7 - 1 downto 0);

    output_10_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_10_V_ce0 <= ap_const_logic_1;
        else 
            output_10_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_10_V_d0 <= r_V_fu_1004_p3;

    output_10_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, tmp_131_reg_1072_pp0_iter3_reg, ap_enable_reg_pp0_iter4)
    begin
        if (((tmp_131_reg_1072_pp0_iter3_reg = ap_const_lv4_A) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_10_V_we0 <= ap_const_logic_1;
        else 
            output_10_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_11_V_address0 <= tmp_280_cast_fu_949_p1(7 - 1 downto 0);

    output_11_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_11_V_ce0 <= ap_const_logic_1;
        else 
            output_11_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_11_V_d0 <= r_V_fu_1004_p3;

    output_11_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, tmp_131_reg_1072_pp0_iter3_reg, ap_enable_reg_pp0_iter4)
    begin
        if (((tmp_131_reg_1072_pp0_iter3_reg = ap_const_lv4_B) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_11_V_we0 <= ap_const_logic_1;
        else 
            output_11_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_12_V_address0 <= tmp_280_cast_fu_949_p1(7 - 1 downto 0);

    output_12_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_12_V_ce0 <= ap_const_logic_1;
        else 
            output_12_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_12_V_d0 <= r_V_fu_1004_p3;

    output_12_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, tmp_131_reg_1072_pp0_iter3_reg, ap_enable_reg_pp0_iter4)
    begin
        if (((tmp_131_reg_1072_pp0_iter3_reg = ap_const_lv4_C) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_12_V_we0 <= ap_const_logic_1;
        else 
            output_12_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_13_V_address0 <= tmp_280_cast_fu_949_p1(7 - 1 downto 0);

    output_13_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_13_V_ce0 <= ap_const_logic_1;
        else 
            output_13_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_13_V_d0 <= r_V_fu_1004_p3;

    output_13_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, tmp_131_reg_1072_pp0_iter3_reg, ap_enable_reg_pp0_iter4)
    begin
        if (((tmp_131_reg_1072_pp0_iter3_reg = ap_const_lv4_D) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_13_V_we0 <= ap_const_logic_1;
        else 
            output_13_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_14_V_address0 <= tmp_280_cast_fu_949_p1(7 - 1 downto 0);

    output_14_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_14_V_ce0 <= ap_const_logic_1;
        else 
            output_14_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_14_V_d0 <= r_V_fu_1004_p3;

    output_14_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, tmp_131_reg_1072_pp0_iter3_reg, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and ((tmp_131_reg_1072_pp0_iter3_reg = ap_const_lv4_E) or (tmp_131_reg_1072_pp0_iter3_reg = ap_const_lv4_F)))) then 
            output_14_V_we0 <= ap_const_logic_1;
        else 
            output_14_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_1_V_address0 <= tmp_280_cast_fu_949_p1(7 - 1 downto 0);

    output_1_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_1_V_ce0 <= ap_const_logic_1;
        else 
            output_1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_1_V_d0 <= r_V_fu_1004_p3;

    output_1_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, tmp_131_reg_1072_pp0_iter3_reg, ap_enable_reg_pp0_iter4)
    begin
        if (((tmp_131_reg_1072_pp0_iter3_reg = ap_const_lv4_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_1_V_we0 <= ap_const_logic_1;
        else 
            output_1_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_2_V_address0 <= tmp_280_cast_fu_949_p1(7 - 1 downto 0);

    output_2_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_2_V_ce0 <= ap_const_logic_1;
        else 
            output_2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_2_V_d0 <= r_V_fu_1004_p3;

    output_2_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, tmp_131_reg_1072_pp0_iter3_reg, ap_enable_reg_pp0_iter4)
    begin
        if (((tmp_131_reg_1072_pp0_iter3_reg = ap_const_lv4_2) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_2_V_we0 <= ap_const_logic_1;
        else 
            output_2_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_3_V_address0 <= tmp_280_cast_fu_949_p1(7 - 1 downto 0);

    output_3_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_3_V_ce0 <= ap_const_logic_1;
        else 
            output_3_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_3_V_d0 <= r_V_fu_1004_p3;

    output_3_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, tmp_131_reg_1072_pp0_iter3_reg, ap_enable_reg_pp0_iter4)
    begin
        if (((tmp_131_reg_1072_pp0_iter3_reg = ap_const_lv4_3) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_3_V_we0 <= ap_const_logic_1;
        else 
            output_3_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_4_V_address0 <= tmp_280_cast_fu_949_p1(7 - 1 downto 0);

    output_4_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_4_V_ce0 <= ap_const_logic_1;
        else 
            output_4_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_4_V_d0 <= r_V_fu_1004_p3;

    output_4_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, tmp_131_reg_1072_pp0_iter3_reg, ap_enable_reg_pp0_iter4)
    begin
        if (((tmp_131_reg_1072_pp0_iter3_reg = ap_const_lv4_4) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_4_V_we0 <= ap_const_logic_1;
        else 
            output_4_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_5_V_address0 <= tmp_280_cast_fu_949_p1(7 - 1 downto 0);

    output_5_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_5_V_ce0 <= ap_const_logic_1;
        else 
            output_5_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_5_V_d0 <= r_V_fu_1004_p3;

    output_5_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, tmp_131_reg_1072_pp0_iter3_reg, ap_enable_reg_pp0_iter4)
    begin
        if (((tmp_131_reg_1072_pp0_iter3_reg = ap_const_lv4_5) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_5_V_we0 <= ap_const_logic_1;
        else 
            output_5_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_6_V_address0 <= tmp_280_cast_fu_949_p1(7 - 1 downto 0);

    output_6_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_6_V_ce0 <= ap_const_logic_1;
        else 
            output_6_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_6_V_d0 <= r_V_fu_1004_p3;

    output_6_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, tmp_131_reg_1072_pp0_iter3_reg, ap_enable_reg_pp0_iter4)
    begin
        if (((tmp_131_reg_1072_pp0_iter3_reg = ap_const_lv4_6) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_6_V_we0 <= ap_const_logic_1;
        else 
            output_6_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_7_V_address0 <= tmp_280_cast_fu_949_p1(7 - 1 downto 0);

    output_7_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_7_V_ce0 <= ap_const_logic_1;
        else 
            output_7_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_7_V_d0 <= r_V_fu_1004_p3;

    output_7_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, tmp_131_reg_1072_pp0_iter3_reg, ap_enable_reg_pp0_iter4)
    begin
        if (((tmp_131_reg_1072_pp0_iter3_reg = ap_const_lv4_7) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_7_V_we0 <= ap_const_logic_1;
        else 
            output_7_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_8_V_address0 <= tmp_280_cast_fu_949_p1(7 - 1 downto 0);

    output_8_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_8_V_ce0 <= ap_const_logic_1;
        else 
            output_8_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_8_V_d0 <= r_V_fu_1004_p3;

    output_8_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, tmp_131_reg_1072_pp0_iter3_reg, ap_enable_reg_pp0_iter4)
    begin
        if (((tmp_131_reg_1072_pp0_iter3_reg = ap_const_lv4_8) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_8_V_we0 <= ap_const_logic_1;
        else 
            output_8_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_9_V_address0 <= tmp_280_cast_fu_949_p1(7 - 1 downto 0);

    output_9_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_9_V_ce0 <= ap_const_logic_1;
        else 
            output_9_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_9_V_d0 <= r_V_fu_1004_p3;

    output_9_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, tmp_131_reg_1072_pp0_iter3_reg, ap_enable_reg_pp0_iter4)
    begin
        if (((tmp_131_reg_1072_pp0_iter3_reg = ap_const_lv4_9) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_9_V_we0 <= ap_const_logic_1;
        else 
            output_9_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    overflow_fu_842_p2 <= (tmp_43_fu_836_p2 and brmerge_fu_830_p2);
    p_392_not_fu_872_p2 <= (tmp_43_fu_836_p2 or brmerge23_demorgan_fu_848_p2);
    p_Result_13_fu_814_p3 <= p_Val2_38_fu_809_p2(8 downto 8);
    p_Result_s_fu_795_p3 <= ret_V_6_fu_789_p2(9 downto 9);
    p_Val2_32_fu_734_p4 <= input_V_q0(15 downto 8);
    p_Val2_34_fu_754_p1 <= input_V_q1(8 - 1 downto 0);
    p_Val2_38_fu_809_p2 <= std_logic_vector(unsigned(tmp1_fu_803_p2) + unsigned(ret_V_reg_1097));
    p_Val2_41_fu_894_p3 <= 
        p_mux_fu_878_p3 when (p_392_not_fu_872_p2(0) = '1') else 
        p_s_fu_886_p3;
    p_Val2_s_fu_726_p1 <= input_V_q0(8 - 1 downto 0);
    p_lshr_cast_fu_987_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_156_fu_977_p4),9));
    p_lshr_f_cast_fu_1000_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_138_fu_997_p1),9));
    p_mux_fu_878_p3 <= 
        ap_const_lv9_FF when (brmerge21_fu_866_p2(0) = '1') else 
        p_Val2_38_fu_809_p2;
    p_neg_fu_971_p2 <= std_logic_vector(unsigned(ap_const_lv10_0) - unsigned(tmp_122_tr_fu_968_p1));
    p_neg_t_fu_991_p2 <= std_logic_vector(unsigned(ap_const_lv9_0) - unsigned(p_lshr_cast_fu_987_p1));
    p_s_fu_886_p3 <= 
        ap_const_lv9_100 when (underflow_fu_860_p2(0) = '1') else 
        p_Val2_38_fu_809_p2;
    p_shl1_cast_fu_672_p3 <= (tmp_1141_reg_1057 & ap_const_lv4_0);
    p_shl2_cast_fu_930_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_146_fu_923_p3),8));
    p_shl3_cast_fu_503_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_495_p3),9));
    p_shl4_cast_fu_515_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_144_fu_507_p3),9));
    p_shl_cast_fu_688_p3 <= (tmp_1142_reg_1067 & ap_const_lv4_0);
    r_V_fu_1004_p3 <= 
        p_neg_t_fu_991_p2 when (tmp_1148_reg_1120(0) = '1') else 
        p_lshr_f_cast_fu_1000_p1;
    ret_V_5_fu_777_p2 <= std_logic_vector(signed(lhs_V_3_fu_768_p1) + signed(rhs_V_3_fu_771_p1));
    ret_V_6_fu_789_p2 <= std_logic_vector(unsigned(ret_V_5_fu_777_p2) + unsigned(rhs_V_6_cast_fu_783_p1));
    ret_V_fu_748_p2 <= std_logic_vector(signed(lhs_V_fu_730_p1) + signed(rhs_V_fu_744_p1));
        rhs_V_3_fu_771_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_34_reg_1103),10));

        rhs_V_6_cast_fu_783_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_36_reg_1109),10));

        rhs_V_fu_744_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_32_fu_734_p4),9));

    tmp1_fu_803_p2 <= std_logic_vector(signed(tmp_133_fu_774_p1) + signed(tmp_134_fu_786_p1));
    tmp_1141_fu_607_p1 <= tmp_150_fu_601_p2(9 - 1 downto 0);
    tmp_1142_fu_635_p1 <= tmp_152_fu_629_p2(9 - 1 downto 0);
    tmp_1147_fu_822_p3 <= ret_V_6_fu_789_p2(9 downto 9);
        tmp_122_tr_fu_968_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_41_reg_1115),10));

    tmp_132_cast_fu_701_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_131_reg_1072),13));
        tmp_133_fu_774_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_34_reg_1103),9));

        tmp_134_fu_786_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_36_reg_1109),9));

    tmp_134_mid1_fu_571_p4 <= height_2_fu_557_p2(4 downto 1);
        tmp_138_fu_997_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_137_reg_1125),8));

    tmp_144_fu_507_p3 <= (tmp_mid2_v_fu_487_p3 & ap_const_lv1_0);
    tmp_145_fu_519_p2 <= std_logic_vector(unsigned(p_shl3_cast_fu_503_p1) - unsigned(p_shl4_cast_fu_515_p1));
    tmp_146_fu_923_p3 <= (tmp_mid2_v_reg_1035_pp0_iter3_reg & ap_const_lv4_0);
    tmp_147_fu_934_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_930_p1) - unsigned(tmp_mid2_cast_fu_920_p1));
    tmp_148_fu_545_p2 <= "1" when (unsigned(width_reg_420) < unsigned(ap_const_lv5_1D)) else "0";
    tmp_149_fu_943_p2 <= std_logic_vector(unsigned(tmp_38_mid2_cast_fu_940_p1) + unsigned(tmp_147_fu_934_p2));
    tmp_150_fu_601_p2 <= std_logic_vector(unsigned(tmp_39_mid2_cast_fu_597_p1) + unsigned(tmp_277_cast_fu_525_p1));
    tmp_151_fu_679_p2 <= std_logic_vector(unsigned(p_shl1_cast_fu_672_p3) - unsigned(tmp_281_cast_fu_669_p1));
    tmp_152_fu_629_p2 <= std_logic_vector(unsigned(tmp_41_mid2_cast_fu_625_p1) + unsigned(tmp_277_cast_fu_525_p1));
    tmp_153_fu_695_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_688_p3) - unsigned(tmp_284_cast_fu_685_p1));
    tmp_154_fu_704_p2 <= std_logic_vector(unsigned(tmp_132_cast_fu_701_p1) + unsigned(tmp_151_fu_679_p2));
    tmp_155_fu_715_p2 <= std_logic_vector(unsigned(tmp_132_cast_fu_701_p1) + unsigned(tmp_153_fu_695_p2));
    tmp_156_fu_977_p4 <= p_neg_fu_971_p2(9 downto 2);
        tmp_277_cast_fu_525_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_145_fu_519_p2),10));

        tmp_280_cast_fu_949_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_149_fu_943_p2),64));

        tmp_281_cast_fu_669_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_150_reg_1052),13));

        tmp_284_cast_fu_685_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_152_reg_1062),13));

    tmp_287_cast_fu_710_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_154_fu_704_p2),64));
    tmp_288_cast_fu_721_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_155_fu_715_p2),64));
    tmp_38_mid2_cast_fu_940_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_38_mid2_reg_1042_pp0_iter3_reg),8));
    tmp_38_mid2_fu_581_p3 <= 
        tmp_38_mid_fu_529_p3 when (tmp_42_mid_fu_551_p2(0) = '1') else 
        tmp_134_mid1_fu_571_p4;
    tmp_38_mid_fu_529_p3 <= 
        ap_const_lv4_0 when (exitcond_flatten_fu_465_p2(0) = '1') else 
        tmp_s_fu_431_p4;
    tmp_39_mid2_cast_fu_597_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_39_mid2_fu_589_p3),10));
    tmp_39_mid2_fu_589_p3 <= 
        height_mid_fu_471_p3 when (tmp_42_mid_fu_551_p2(0) = '1') else 
        height_2_fu_557_p2;
    tmp_40_fu_441_p2 <= (ap_phi_mux_height_phi_fu_413_p4 or ap_const_lv5_1);
    tmp_40_mid1_fu_611_p2 <= (height_2_fu_557_p2 or ap_const_lv5_1);
    tmp_41_mid2_cast_fu_625_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_41_mid2_fu_617_p3),10));
    tmp_41_mid2_fu_617_p3 <= 
        tmp_41_mid_fu_537_p3 when (tmp_42_mid_fu_551_p2(0) = '1') else 
        tmp_40_mid1_fu_611_p2;
    tmp_41_mid_fu_537_p3 <= 
        ap_const_lv5_1 when (exitcond_flatten_fu_465_p2(0) = '1') else 
        tmp_40_fu_441_p2;
    tmp_42_mid_fu_551_p2 <= (tmp_148_fu_545_p2 or exitcond_flatten_fu_465_p2);
    tmp_43_fu_836_p2 <= (p_Result_s_fu_795_p3 xor ap_const_lv1_1);
    tmp_fu_495_p3 <= (tmp_mid2_v_fu_487_p3 & ap_const_lv5_0);
    tmp_mid2_cast_fu_920_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_mid2_v_reg_1035_pp0_iter3_reg),8));
    tmp_mid2_v_fu_487_p3 <= 
        fmap_2_fu_459_p2 when (exitcond_flatten_fu_465_p2(0) = '1') else 
        ap_phi_mux_fmap_phi_fu_391_p4;
    tmp_s_fu_431_p4 <= ap_phi_mux_height_phi_fu_413_p4(4 downto 1);
    underflow_fu_860_p2 <= (p_Result_s_fu_795_p3 and brmerge20_fu_854_p2);
    width_2_fu_649_p2 <= std_logic_vector(unsigned(width_mid2_fu_563_p3) + unsigned(ap_const_lv5_2));
    width_mid2_fu_563_p3 <= 
        width_mid_fu_479_p3 when (tmp_42_mid_fu_551_p2(0) = '1') else 
        ap_const_lv5_0;
    width_mid_fu_479_p3 <= 
        ap_const_lv5_0 when (exitcond_flatten_fu_465_p2(0) = '1') else 
        width_reg_420;
end behav;
