-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity avg_pooling_layer2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_0_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    input_0_V_ce0 : OUT STD_LOGIC;
    input_0_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    input_0_V_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    input_0_V_ce1 : OUT STD_LOGIC;
    input_0_V_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    input_1_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    input_1_V_ce0 : OUT STD_LOGIC;
    input_1_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    input_1_V_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    input_1_V_ce1 : OUT STD_LOGIC;
    input_1_V_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    input_2_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    input_2_V_ce0 : OUT STD_LOGIC;
    input_2_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    input_2_V_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    input_2_V_ce1 : OUT STD_LOGIC;
    input_2_V_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    input_3_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    input_3_V_ce0 : OUT STD_LOGIC;
    input_3_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    input_3_V_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    input_3_V_ce1 : OUT STD_LOGIC;
    input_3_V_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    input_4_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    input_4_V_ce0 : OUT STD_LOGIC;
    input_4_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    input_4_V_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    input_4_V_ce1 : OUT STD_LOGIC;
    input_4_V_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    input_5_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    input_5_V_ce0 : OUT STD_LOGIC;
    input_5_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    input_5_V_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    input_5_V_ce1 : OUT STD_LOGIC;
    input_5_V_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    input_6_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    input_6_V_ce0 : OUT STD_LOGIC;
    input_6_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    input_6_V_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    input_6_V_ce1 : OUT STD_LOGIC;
    input_6_V_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    input_7_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    input_7_V_ce0 : OUT STD_LOGIC;
    input_7_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    input_7_V_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    input_7_V_ce1 : OUT STD_LOGIC;
    input_7_V_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    input_8_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    input_8_V_ce0 : OUT STD_LOGIC;
    input_8_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    input_8_V_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    input_8_V_ce1 : OUT STD_LOGIC;
    input_8_V_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    input_9_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    input_9_V_ce0 : OUT STD_LOGIC;
    input_9_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    input_9_V_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    input_9_V_ce1 : OUT STD_LOGIC;
    input_9_V_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    input_10_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    input_10_V_ce0 : OUT STD_LOGIC;
    input_10_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    input_10_V_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    input_10_V_ce1 : OUT STD_LOGIC;
    input_10_V_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    input_11_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    input_11_V_ce0 : OUT STD_LOGIC;
    input_11_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    input_11_V_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    input_11_V_ce1 : OUT STD_LOGIC;
    input_11_V_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    output_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    output_V_ce0 : OUT STD_LOGIC;
    output_V_we0 : OUT STD_LOGIC;
    output_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of avg_pooling_layer2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv10_240 : STD_LOGIC_VECTOR (9 downto 0) := "1001000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv6_24 : STD_LOGIC_VECTOR (5 downto 0) := "100100";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv9_D : STD_LOGIC_VECTOR (8 downto 0) := "000001101";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten3_reg_458 : STD_LOGIC_VECTOR (9 downto 0);
    signal fmap_reg_469 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_reg_480 : STD_LOGIC_VECTOR (5 downto 0);
    signal height_reg_491 : STD_LOGIC_VECTOR (3 downto 0);
    signal width_reg_502 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Val2_26_reg_559 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_29_fu_610_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_29_reg_1174 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal exitcond_flatten3_fu_616_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten3_reg_1179 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten3_reg_1179_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten3_reg_1179_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten3_reg_1179_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next3_fu_622_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal exitcond_flatten_fu_634_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_1188 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_mid2_v_fu_656_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_mid2_v_reg_1193 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_31_mid_fu_712_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_31_mid_reg_1199 : STD_LOGIC_VECTOR (0 downto 0);
    signal height_1_fu_718_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal height_1_reg_1204 : STD_LOGIC_VECTOR (3 downto 0);
    signal width_mid2_fu_724_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal width_mid2_reg_1209 : STD_LOGIC_VECTOR (3 downto 0);
    signal width_mid2_reg_1209_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_138_fu_754_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_138_reg_1214 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_1132_fu_760_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1132_reg_1219 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_28_mid2_fu_764_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_28_mid2_reg_1224 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1133_reg_1230 : STD_LOGIC_VECTOR (2 downto 0);
    signal width_1_fu_782_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten_next_fu_794_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal output_V_addr_reg_1365 : STD_LOGIC_VECTOR (9 downto 0);
    signal output_V_addr_reg_1365_pp0_iter2_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal output_V_addr_reg_1365_pp0_iter3_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_102_t_fu_914_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_102_t_reg_1370 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1134_fu_927_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_1134_reg_1374 : STD_LOGIC_VECTOR (6 downto 0);
    signal ret_V_fu_935_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_reg_1379 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal tmp3_fu_945_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp3_reg_1414 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Val2_31_fu_1104_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_31_reg_1419 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1140_reg_1424 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_128_reg_1429 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_phi_mux_fmap_phi_fu_473_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_height_phi_fu_495_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_p_Val2_s_phi_fu_516_p12 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter2_p_Val2_s_reg_513 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_p_Val2_22_phi_fu_539_p12 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter2_p_Val2_22_reg_536 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_p_Val2_26_phi_fu_562_p12 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter2_p_Val2_26_reg_559 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter0_p_Val2_24_reg_583 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter1_p_Val2_24_reg_583 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter2_p_Val2_24_reg_583 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter3_p_Val2_24_reg_583 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_272_cast_fu_846_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_273_cast_fu_884_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_274_cast_fu_909_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal fmap_1_fu_628_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_134_fu_664_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_135_fu_676_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl2_cast_fu_672_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl3_cast_fu_684_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_136_fu_688_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_s_fu_600_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_137_fu_706_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal height_mid_fu_640_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal width_mid_fu_648_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_27_mid_fu_698_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_120_mid1_fu_732_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_27_mid2_fu_742_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_27_mid2_cast_fu_750_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_267_cast_fu_694_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal indvar_flatten_op_fu_788_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_805_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl_cast_fu_817_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl1_cast_fu_824_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_28_mid2_cast_fu_837_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_fu_805_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_140_fu_840_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_30_mid_fu_811_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_29_mid1_fu_862_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_30_mid2_fu_867_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_30_mid2_cast_fu_874_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_141_fu_878_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_32_cast_fu_900_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_139_fu_831_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_142_fu_903_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal rhs_V_fu_923_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal lhs_V_fu_919_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_1135_fu_931_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_1138_fu_941_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal lhs_V_2_fu_951_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal rhs_V_2_fu_954_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal ret_V_3_fu_962_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal rhs_V_4_cast_fu_968_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal ret_V_4_fu_972_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_1136_fu_958_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp2_fu_986_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_33_fu_991_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_126_fu_1012_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Result_12_fu_1004_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not_fu_1022_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_fu_978_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_fu_1028_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_35_fu_1034_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not7_fu_1052_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newsignbit_i_i_i_i_fu_1046_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge17_fu_1058_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_fu_1064_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_fu_1040_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_392_not_fu_1076_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge18_fu_1070_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_28_fu_996_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal brmerge19_fu_1082_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_mux_fu_1088_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_s_fu_1096_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_106_tr_fu_1130_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_neg_fu_1133_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_143_fu_1139_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_lshr_cast_fu_1149_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_129_fu_1159_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_neg_t_fu_1153_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_lshr_f_cast_fu_1162_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal tmp_fu_805_p10 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_condition_834 : BOOLEAN;
    signal ap_condition_830 : BOOLEAN;
    signal ap_condition_842 : BOOLEAN;
    signal ap_condition_318 : BOOLEAN;
    signal ap_condition_409 : BOOLEAN;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter3_p_Val2_24_reg_583_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_const_boolean_1 = ap_condition_318)) then 
                    ap_phi_reg_pp0_iter3_p_Val2_24_reg_583 <= input_10_V_q1;
                elsif (((width_mid2_reg_1209_pp0_iter1_reg = ap_const_lv4_8) and (exitcond_flatten3_reg_1179_pp0_iter1_reg = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter3_p_Val2_24_reg_583 <= input_8_V_q1;
                elsif (((width_mid2_reg_1209_pp0_iter1_reg = ap_const_lv4_6) and (exitcond_flatten3_reg_1179_pp0_iter1_reg = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter3_p_Val2_24_reg_583 <= input_6_V_q1;
                elsif (((width_mid2_reg_1209_pp0_iter1_reg = ap_const_lv4_4) and (exitcond_flatten3_reg_1179_pp0_iter1_reg = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter3_p_Val2_24_reg_583 <= input_4_V_q1;
                elsif (((width_mid2_reg_1209_pp0_iter1_reg = ap_const_lv4_2) and (exitcond_flatten3_reg_1179_pp0_iter1_reg = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter3_p_Val2_24_reg_583 <= input_2_V_q1;
                elsif (((width_mid2_reg_1209_pp0_iter1_reg = ap_const_lv4_0) and (exitcond_flatten3_reg_1179_pp0_iter1_reg = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter3_p_Val2_24_reg_583 <= input_0_V_q1;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter3_p_Val2_24_reg_583 <= ap_phi_reg_pp0_iter2_p_Val2_24_reg_583;
                end if;
            end if; 
        end if;
    end process;

    fmap_reg_469_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten3_reg_1179 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                fmap_reg_469 <= tmp_mid2_v_reg_1193;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                fmap_reg_469 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    height_reg_491_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten3_reg_1179 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                height_reg_491 <= tmp_28_mid2_reg_1224;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                height_reg_491 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    indvar_flatten3_reg_458_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten3_fu_616_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten3_reg_458 <= indvar_flatten_next3_fu_622_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten3_reg_458 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_480_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten3_fu_616_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_480 <= indvar_flatten_next_fu_794_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_480 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    p_Val2_26_reg_559_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_const_boolean_1 = ap_condition_409)) then 
                    p_Val2_26_reg_559 <= input_11_V_q1;
                elsif (((tmp_102_t_reg_1370 = ap_const_lv4_9) and (exitcond_flatten3_reg_1179_pp0_iter1_reg = ap_const_lv1_0))) then 
                    p_Val2_26_reg_559 <= input_9_V_q1;
                elsif (((tmp_102_t_reg_1370 = ap_const_lv4_7) and (exitcond_flatten3_reg_1179_pp0_iter1_reg = ap_const_lv1_0))) then 
                    p_Val2_26_reg_559 <= input_7_V_q1;
                elsif (((tmp_102_t_reg_1370 = ap_const_lv4_5) and (exitcond_flatten3_reg_1179_pp0_iter1_reg = ap_const_lv1_0))) then 
                    p_Val2_26_reg_559 <= input_5_V_q1;
                elsif (((tmp_102_t_reg_1370 = ap_const_lv4_3) and (exitcond_flatten3_reg_1179_pp0_iter1_reg = ap_const_lv1_0))) then 
                    p_Val2_26_reg_559 <= input_3_V_q1;
                elsif (((tmp_102_t_reg_1370 = ap_const_lv4_1) and (exitcond_flatten3_reg_1179_pp0_iter1_reg = ap_const_lv1_0))) then 
                    p_Val2_26_reg_559 <= input_1_V_q1;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    p_Val2_26_reg_559 <= ap_phi_reg_pp0_iter2_p_Val2_26_reg_559;
                end if;
            end if; 
        end if;
    end process;

    width_reg_502_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten3_fu_616_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                width_reg_502 <= width_1_fu_782_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                width_reg_502 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter1_p_Val2_24_reg_583 <= ap_phi_reg_pp0_iter0_p_Val2_24_reg_583;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter2_p_Val2_24_reg_583 <= ap_phi_reg_pp0_iter1_p_Val2_24_reg_583;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                exitcond_flatten3_reg_1179 <= exitcond_flatten3_fu_616_p2;
                exitcond_flatten3_reg_1179_pp0_iter1_reg <= exitcond_flatten3_reg_1179;
                    tmp_102_t_reg_1370(3 downto 1) <= tmp_102_t_fu_914_p2(3 downto 1);
                    tmp_29_reg_1174(3 downto 1) <= tmp_29_fu_610_p2(3 downto 1);
                width_mid2_reg_1209_pp0_iter1_reg <= width_mid2_reg_1209;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                exitcond_flatten3_reg_1179_pp0_iter2_reg <= exitcond_flatten3_reg_1179_pp0_iter1_reg;
                exitcond_flatten3_reg_1179_pp0_iter3_reg <= exitcond_flatten3_reg_1179_pp0_iter2_reg;
                output_V_addr_reg_1365_pp0_iter2_reg <= output_V_addr_reg_1365;
                output_V_addr_reg_1365_pp0_iter3_reg <= output_V_addr_reg_1365_pp0_iter2_reg;
                ret_V_reg_1379 <= ret_V_fu_935_p2;
                tmp_1134_reg_1374 <= tmp_1134_fu_927_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten3_fu_616_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                exitcond_flatten_reg_1188 <= exitcond_flatten_fu_634_p2;
                height_1_reg_1204 <= height_1_fu_718_p2;
                tmp_1132_reg_1219 <= tmp_1132_fu_760_p1;
                tmp_1133_reg_1230 <= width_mid2_fu_724_p3(3 downto 1);
                tmp_138_reg_1214 <= tmp_138_fu_754_p2;
                tmp_31_mid_reg_1199 <= tmp_31_mid_fu_712_p2;
                width_mid2_reg_1209 <= width_mid2_fu_724_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten3_reg_1179 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                output_V_addr_reg_1365 <= tmp_274_cast_fu_909_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten3_reg_1179_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                p_Val2_31_reg_1419 <= p_Val2_31_fu_1104_p3;
                tmp_1140_reg_1424 <= p_Val2_31_fu_1104_p3(7 downto 7);
                tmp_128_reg_1429 <= p_Val2_31_fu_1104_p3(7 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten3_reg_1179_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp3_reg_1414 <= tmp3_fu_945_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten3_fu_616_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_28_mid2_reg_1224 <= tmp_28_mid2_fu_764_p3;
                tmp_mid2_v_reg_1193 <= tmp_mid2_v_fu_656_p3;
            end if;
        end if;
    end process;
    tmp_29_reg_1174(0) <= '1';
    tmp_102_t_reg_1370(0) <= '1';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, exitcond_flatten3_fu_616_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond_flatten3_fu_616_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond_flatten3_fu_616_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state7 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_318_assign_proc : process(exitcond_flatten3_reg_1179_pp0_iter1_reg, width_mid2_reg_1209_pp0_iter1_reg)
    begin
                ap_condition_318 <= (not((width_mid2_reg_1209_pp0_iter1_reg = ap_const_lv4_0)) and not((width_mid2_reg_1209_pp0_iter1_reg = ap_const_lv4_2)) and not((width_mid2_reg_1209_pp0_iter1_reg = ap_const_lv4_4)) and not((width_mid2_reg_1209_pp0_iter1_reg = ap_const_lv4_6)) and not((width_mid2_reg_1209_pp0_iter1_reg = ap_const_lv4_8)) and (exitcond_flatten3_reg_1179_pp0_iter1_reg = ap_const_lv1_0));
    end process;


    ap_condition_409_assign_proc : process(exitcond_flatten3_reg_1179_pp0_iter1_reg, tmp_102_t_reg_1370)
    begin
                ap_condition_409 <= (not((tmp_102_t_reg_1370 = ap_const_lv4_9)) and not((tmp_102_t_reg_1370 = ap_const_lv4_7)) and not((tmp_102_t_reg_1370 = ap_const_lv4_5)) and not((tmp_102_t_reg_1370 = ap_const_lv4_3)) and not((tmp_102_t_reg_1370 = ap_const_lv4_1)) and (exitcond_flatten3_reg_1179_pp0_iter1_reg = ap_const_lv1_0));
    end process;


    ap_condition_830_assign_proc : process(exitcond_flatten3_reg_1179_pp0_iter1_reg, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0)
    begin
                ap_condition_830 <= ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (exitcond_flatten3_reg_1179_pp0_iter1_reg = ap_const_lv1_0));
    end process;


    ap_condition_834_assign_proc : process(tmp_102_t_reg_1370)
    begin
                ap_condition_834 <= (not((tmp_102_t_reg_1370 = ap_const_lv4_9)) and not((tmp_102_t_reg_1370 = ap_const_lv4_7)) and not((tmp_102_t_reg_1370 = ap_const_lv4_5)) and not((tmp_102_t_reg_1370 = ap_const_lv4_3)) and not((tmp_102_t_reg_1370 = ap_const_lv4_1)));
    end process;


    ap_condition_842_assign_proc : process(width_mid2_reg_1209_pp0_iter1_reg)
    begin
                ap_condition_842 <= (not((width_mid2_reg_1209_pp0_iter1_reg = ap_const_lv4_0)) and not((width_mid2_reg_1209_pp0_iter1_reg = ap_const_lv4_2)) and not((width_mid2_reg_1209_pp0_iter1_reg = ap_const_lv4_4)) and not((width_mid2_reg_1209_pp0_iter1_reg = ap_const_lv4_6)) and not((width_mid2_reg_1209_pp0_iter1_reg = ap_const_lv4_8)));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(exitcond_flatten3_fu_616_p2)
    begin
        if ((exitcond_flatten3_fu_616_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_fmap_phi_fu_473_p4_assign_proc : process(fmap_reg_469, ap_CS_fsm_pp0_stage0, exitcond_flatten3_reg_1179, tmp_mid2_v_reg_1193, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten3_reg_1179 = ap_const_lv1_0))) then 
            ap_phi_mux_fmap_phi_fu_473_p4 <= tmp_mid2_v_reg_1193;
        else 
            ap_phi_mux_fmap_phi_fu_473_p4 <= fmap_reg_469;
        end if; 
    end process;


    ap_phi_mux_height_phi_fu_495_p4_assign_proc : process(height_reg_491, ap_CS_fsm_pp0_stage0, exitcond_flatten3_reg_1179, tmp_28_mid2_reg_1224, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten3_reg_1179 = ap_const_lv1_0))) then 
            ap_phi_mux_height_phi_fu_495_p4 <= tmp_28_mid2_reg_1224;
        else 
            ap_phi_mux_height_phi_fu_495_p4 <= height_reg_491;
        end if; 
    end process;


    ap_phi_mux_p_Val2_22_phi_fu_539_p12_assign_proc : process(input_1_V_q0, input_3_V_q0, input_5_V_q0, input_7_V_q0, input_9_V_q0, input_11_V_q0, tmp_102_t_reg_1370, ap_phi_reg_pp0_iter2_p_Val2_22_reg_536, ap_condition_834, ap_condition_830)
    begin
        if ((ap_const_boolean_1 = ap_condition_830)) then
            if ((ap_const_boolean_1 = ap_condition_834)) then 
                ap_phi_mux_p_Val2_22_phi_fu_539_p12 <= input_11_V_q0;
            elsif ((tmp_102_t_reg_1370 = ap_const_lv4_9)) then 
                ap_phi_mux_p_Val2_22_phi_fu_539_p12 <= input_9_V_q0;
            elsif ((tmp_102_t_reg_1370 = ap_const_lv4_7)) then 
                ap_phi_mux_p_Val2_22_phi_fu_539_p12 <= input_7_V_q0;
            elsif ((tmp_102_t_reg_1370 = ap_const_lv4_5)) then 
                ap_phi_mux_p_Val2_22_phi_fu_539_p12 <= input_5_V_q0;
            elsif ((tmp_102_t_reg_1370 = ap_const_lv4_3)) then 
                ap_phi_mux_p_Val2_22_phi_fu_539_p12 <= input_3_V_q0;
            elsif ((tmp_102_t_reg_1370 = ap_const_lv4_1)) then 
                ap_phi_mux_p_Val2_22_phi_fu_539_p12 <= input_1_V_q0;
            else 
                ap_phi_mux_p_Val2_22_phi_fu_539_p12 <= ap_phi_reg_pp0_iter2_p_Val2_22_reg_536;
            end if;
        else 
            ap_phi_mux_p_Val2_22_phi_fu_539_p12 <= ap_phi_reg_pp0_iter2_p_Val2_22_reg_536;
        end if; 
    end process;


    ap_phi_mux_p_Val2_26_phi_fu_562_p12_assign_proc : process(input_1_V_q1, input_3_V_q1, input_5_V_q1, input_7_V_q1, input_9_V_q1, input_11_V_q1, tmp_102_t_reg_1370, ap_phi_reg_pp0_iter2_p_Val2_26_reg_559, ap_condition_834, ap_condition_830)
    begin
        if ((ap_const_boolean_1 = ap_condition_830)) then
            if ((ap_const_boolean_1 = ap_condition_834)) then 
                ap_phi_mux_p_Val2_26_phi_fu_562_p12 <= input_11_V_q1;
            elsif ((tmp_102_t_reg_1370 = ap_const_lv4_9)) then 
                ap_phi_mux_p_Val2_26_phi_fu_562_p12 <= input_9_V_q1;
            elsif ((tmp_102_t_reg_1370 = ap_const_lv4_7)) then 
                ap_phi_mux_p_Val2_26_phi_fu_562_p12 <= input_7_V_q1;
            elsif ((tmp_102_t_reg_1370 = ap_const_lv4_5)) then 
                ap_phi_mux_p_Val2_26_phi_fu_562_p12 <= input_5_V_q1;
            elsif ((tmp_102_t_reg_1370 = ap_const_lv4_3)) then 
                ap_phi_mux_p_Val2_26_phi_fu_562_p12 <= input_3_V_q1;
            elsif ((tmp_102_t_reg_1370 = ap_const_lv4_1)) then 
                ap_phi_mux_p_Val2_26_phi_fu_562_p12 <= input_1_V_q1;
            else 
                ap_phi_mux_p_Val2_26_phi_fu_562_p12 <= ap_phi_reg_pp0_iter2_p_Val2_26_reg_559;
            end if;
        else 
            ap_phi_mux_p_Val2_26_phi_fu_562_p12 <= ap_phi_reg_pp0_iter2_p_Val2_26_reg_559;
        end if; 
    end process;


    ap_phi_mux_p_Val2_s_phi_fu_516_p12_assign_proc : process(input_0_V_q0, input_2_V_q0, input_4_V_q0, input_6_V_q0, input_8_V_q0, input_10_V_q0, width_mid2_reg_1209_pp0_iter1_reg, ap_phi_reg_pp0_iter2_p_Val2_s_reg_513, ap_condition_830, ap_condition_842)
    begin
        if ((ap_const_boolean_1 = ap_condition_830)) then
            if ((ap_const_boolean_1 = ap_condition_842)) then 
                ap_phi_mux_p_Val2_s_phi_fu_516_p12 <= input_10_V_q0;
            elsif ((width_mid2_reg_1209_pp0_iter1_reg = ap_const_lv4_8)) then 
                ap_phi_mux_p_Val2_s_phi_fu_516_p12 <= input_8_V_q0;
            elsif ((width_mid2_reg_1209_pp0_iter1_reg = ap_const_lv4_6)) then 
                ap_phi_mux_p_Val2_s_phi_fu_516_p12 <= input_6_V_q0;
            elsif ((width_mid2_reg_1209_pp0_iter1_reg = ap_const_lv4_4)) then 
                ap_phi_mux_p_Val2_s_phi_fu_516_p12 <= input_4_V_q0;
            elsif ((width_mid2_reg_1209_pp0_iter1_reg = ap_const_lv4_2)) then 
                ap_phi_mux_p_Val2_s_phi_fu_516_p12 <= input_2_V_q0;
            elsif ((width_mid2_reg_1209_pp0_iter1_reg = ap_const_lv4_0)) then 
                ap_phi_mux_p_Val2_s_phi_fu_516_p12 <= input_0_V_q0;
            else 
                ap_phi_mux_p_Val2_s_phi_fu_516_p12 <= ap_phi_reg_pp0_iter2_p_Val2_s_reg_513;
            end if;
        else 
            ap_phi_mux_p_Val2_s_phi_fu_516_p12 <= ap_phi_reg_pp0_iter2_p_Val2_s_reg_513;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_p_Val2_24_reg_583 <= "XXXXXXXX";
    ap_phi_reg_pp0_iter2_p_Val2_22_reg_536 <= "XXXXXXXX";
    ap_phi_reg_pp0_iter2_p_Val2_26_reg_559 <= "XXXXXXXX";
    ap_phi_reg_pp0_iter2_p_Val2_s_reg_513 <= "XXXXXXXX";

    ap_ready_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    brmerge17_fu_1058_p2 <= (p_not7_fu_1052_p2 or newsignbit_i_i_i_i_fu_1046_p2);
    brmerge18_fu_1070_p2 <= (underflow_fu_1064_p2 or overflow_fu_1040_p2);
    brmerge19_fu_1082_p2 <= (p_392_not_fu_1076_p2 or overflow_fu_1040_p2);
    brmerge_fu_1028_p2 <= (p_not_fu_1022_p2 or p_Result_12_fu_1004_p3);
    exitcond_flatten3_fu_616_p2 <= "1" when (indvar_flatten3_reg_458 = ap_const_lv10_240) else "0";
    exitcond_flatten_fu_634_p2 <= "1" when (indvar_flatten_reg_480 = ap_const_lv6_24) else "0";
    fmap_1_fu_628_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(ap_phi_mux_fmap_phi_fu_473_p4));
    height_1_fu_718_p2 <= std_logic_vector(unsigned(ap_const_lv4_2) + unsigned(height_mid_fu_640_p3));
    height_mid_fu_640_p3 <= 
        ap_const_lv4_0 when (exitcond_flatten_fu_634_p2(0) = '1') else 
        ap_phi_mux_height_phi_fu_495_p4;
    indvar_flatten_next3_fu_622_p2 <= std_logic_vector(unsigned(indvar_flatten3_reg_458) + unsigned(ap_const_lv10_1));
    indvar_flatten_next_fu_794_p3 <= 
        ap_const_lv6_1 when (exitcond_flatten_fu_634_p2(0) = '1') else 
        indvar_flatten_op_fu_788_p2;
    indvar_flatten_op_fu_788_p2 <= std_logic_vector(unsigned(ap_const_lv6_1) + unsigned(indvar_flatten_reg_480));
    input_0_V_address0 <= tmp_272_cast_fu_846_p1(8 - 1 downto 0);
    input_0_V_address1 <= tmp_273_cast_fu_884_p1(8 - 1 downto 0);

    input_0_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_0_V_ce0 <= ap_const_logic_1;
        else 
            input_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_0_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_0_V_ce1 <= ap_const_logic_1;
        else 
            input_0_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    input_10_V_address0 <= tmp_272_cast_fu_846_p1(8 - 1 downto 0);
    input_10_V_address1 <= tmp_273_cast_fu_884_p1(8 - 1 downto 0);

    input_10_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_10_V_ce0 <= ap_const_logic_1;
        else 
            input_10_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_10_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_10_V_ce1 <= ap_const_logic_1;
        else 
            input_10_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    input_11_V_address0 <= tmp_272_cast_fu_846_p1(8 - 1 downto 0);
    input_11_V_address1 <= tmp_273_cast_fu_884_p1(8 - 1 downto 0);

    input_11_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_11_V_ce0 <= ap_const_logic_1;
        else 
            input_11_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_11_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_11_V_ce1 <= ap_const_logic_1;
        else 
            input_11_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    input_1_V_address0 <= tmp_272_cast_fu_846_p1(8 - 1 downto 0);
    input_1_V_address1 <= tmp_273_cast_fu_884_p1(8 - 1 downto 0);

    input_1_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_1_V_ce0 <= ap_const_logic_1;
        else 
            input_1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_1_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_1_V_ce1 <= ap_const_logic_1;
        else 
            input_1_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    input_2_V_address0 <= tmp_272_cast_fu_846_p1(8 - 1 downto 0);
    input_2_V_address1 <= tmp_273_cast_fu_884_p1(8 - 1 downto 0);

    input_2_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_2_V_ce0 <= ap_const_logic_1;
        else 
            input_2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_2_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_2_V_ce1 <= ap_const_logic_1;
        else 
            input_2_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    input_3_V_address0 <= tmp_272_cast_fu_846_p1(8 - 1 downto 0);
    input_3_V_address1 <= tmp_273_cast_fu_884_p1(8 - 1 downto 0);

    input_3_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_3_V_ce0 <= ap_const_logic_1;
        else 
            input_3_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_3_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_3_V_ce1 <= ap_const_logic_1;
        else 
            input_3_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    input_4_V_address0 <= tmp_272_cast_fu_846_p1(8 - 1 downto 0);
    input_4_V_address1 <= tmp_273_cast_fu_884_p1(8 - 1 downto 0);

    input_4_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_4_V_ce0 <= ap_const_logic_1;
        else 
            input_4_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_4_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_4_V_ce1 <= ap_const_logic_1;
        else 
            input_4_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    input_5_V_address0 <= tmp_272_cast_fu_846_p1(8 - 1 downto 0);
    input_5_V_address1 <= tmp_273_cast_fu_884_p1(8 - 1 downto 0);

    input_5_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_5_V_ce0 <= ap_const_logic_1;
        else 
            input_5_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_5_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_5_V_ce1 <= ap_const_logic_1;
        else 
            input_5_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    input_6_V_address0 <= tmp_272_cast_fu_846_p1(8 - 1 downto 0);
    input_6_V_address1 <= tmp_273_cast_fu_884_p1(8 - 1 downto 0);

    input_6_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_6_V_ce0 <= ap_const_logic_1;
        else 
            input_6_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_6_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_6_V_ce1 <= ap_const_logic_1;
        else 
            input_6_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    input_7_V_address0 <= tmp_272_cast_fu_846_p1(8 - 1 downto 0);
    input_7_V_address1 <= tmp_273_cast_fu_884_p1(8 - 1 downto 0);

    input_7_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_7_V_ce0 <= ap_const_logic_1;
        else 
            input_7_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_7_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_7_V_ce1 <= ap_const_logic_1;
        else 
            input_7_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    input_8_V_address0 <= tmp_272_cast_fu_846_p1(8 - 1 downto 0);
    input_8_V_address1 <= tmp_273_cast_fu_884_p1(8 - 1 downto 0);

    input_8_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_8_V_ce0 <= ap_const_logic_1;
        else 
            input_8_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_8_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_8_V_ce1 <= ap_const_logic_1;
        else 
            input_8_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    input_9_V_address0 <= tmp_272_cast_fu_846_p1(8 - 1 downto 0);
    input_9_V_address1 <= tmp_273_cast_fu_884_p1(8 - 1 downto 0);

    input_9_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_9_V_ce0 <= ap_const_logic_1;
        else 
            input_9_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_9_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_9_V_ce1 <= ap_const_logic_1;
        else 
            input_9_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

        lhs_V_2_fu_951_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_reg_1379),10));

        lhs_V_fu_919_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ap_phi_mux_p_Val2_s_phi_fu_516_p12),9));

    newsignbit_i_i_i_i_fu_1046_p2 <= (p_Result_12_fu_1004_p3 xor ap_const_lv1_1);
    output_V_address0 <= output_V_addr_reg_1365_pp0_iter3_reg;

    output_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_V_ce0 <= ap_const_logic_1;
        else 
            output_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_V_d0 <= 
        p_neg_t_fu_1153_p2 when (tmp_1140_reg_1424(0) = '1') else 
        p_lshr_f_cast_fu_1162_p1;

    output_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, exitcond_flatten3_reg_1179_pp0_iter3_reg, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (exitcond_flatten3_reg_1179_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_V_we0 <= ap_const_logic_1;
        else 
            output_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    overflow_fu_1040_p2 <= (tmp_35_fu_1034_p2 and brmerge_fu_1028_p2);
    p_392_not_fu_1076_p2 <= (underflow_fu_1064_p2 xor ap_const_lv1_1);
    p_Result_12_fu_1004_p3 <= tmp_33_fu_991_p2(6 downto 6);
    p_Result_s_fu_978_p3 <= ret_V_4_fu_972_p2(9 downto 9);
    p_Val2_28_fu_996_p3 <= (tmp_33_fu_991_p2 & ap_const_lv1_0);
    p_Val2_31_fu_1104_p3 <= 
        p_mux_fu_1088_p3 when (brmerge19_fu_1082_p2(0) = '1') else 
        p_s_fu_1096_p3;
    p_lshr_cast_fu_1149_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_143_fu_1139_p4),8));
    p_lshr_f_cast_fu_1162_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_129_fu_1159_p1),8));
    p_mux_fu_1088_p3 <= 
        ap_const_lv8_7F when (brmerge18_fu_1070_p2(0) = '1') else 
        p_Val2_28_fu_996_p3;
    p_neg_fu_1133_p2 <= std_logic_vector(unsigned(ap_const_lv9_0) - unsigned(tmp_106_tr_fu_1130_p1));
    p_neg_t_fu_1153_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(p_lshr_cast_fu_1149_p1));
    p_not7_fu_1052_p2 <= "0" when (tmp_126_fu_1012_p4 = ap_const_lv3_7) else "1";
    p_not_fu_1022_p2 <= "0" when (tmp_126_fu_1012_p4 = ap_const_lv3_0) else "1";
    p_s_fu_1096_p3 <= 
        ap_const_lv8_80 when (underflow_fu_1064_p2(0) = '1') else 
        p_Val2_28_fu_996_p3;
    p_shl1_cast_fu_824_p3 <= (tmp_138_reg_1214 & ap_const_lv1_0);
    p_shl2_cast_fu_672_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_134_fu_664_p3),9));
    p_shl3_cast_fu_684_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_135_fu_676_p3),9));
    p_shl_cast_fu_817_p3 <= (tmp_1132_reg_1219 & ap_const_lv3_0);
    ret_V_3_fu_962_p2 <= std_logic_vector(signed(lhs_V_2_fu_951_p1) + signed(rhs_V_2_fu_954_p1));
    ret_V_4_fu_972_p2 <= std_logic_vector(unsigned(ret_V_3_fu_962_p2) + unsigned(rhs_V_4_cast_fu_968_p1));
    ret_V_fu_935_p2 <= std_logic_vector(signed(rhs_V_fu_923_p1) + signed(lhs_V_fu_919_p1));
        rhs_V_2_fu_954_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ap_phi_reg_pp0_iter3_p_Val2_24_reg_583),10));

        rhs_V_4_cast_fu_968_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_26_reg_559),10));

        rhs_V_fu_923_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ap_phi_mux_p_Val2_22_phi_fu_539_p12),9));

    tmp2_fu_986_p2 <= std_logic_vector(unsigned(tmp_1134_reg_1374) + unsigned(tmp_1136_fu_958_p1));
    tmp3_fu_945_p2 <= std_logic_vector(unsigned(tmp_1135_fu_931_p1) + unsigned(tmp_1138_fu_941_p1));
    tmp_102_t_fu_914_p2 <= (width_mid2_reg_1209 or ap_const_lv4_1);
        tmp_106_tr_fu_1130_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_31_reg_1419),9));

    tmp_1132_fu_760_p1 <= tmp_138_fu_754_p2(8 - 1 downto 0);
    tmp_1134_fu_927_p1 <= ap_phi_mux_p_Val2_22_phi_fu_539_p12(7 - 1 downto 0);
    tmp_1135_fu_931_p1 <= ap_phi_mux_p_Val2_s_phi_fu_516_p12(7 - 1 downto 0);
    tmp_1136_fu_958_p1 <= ap_phi_reg_pp0_iter3_p_Val2_24_reg_583(7 - 1 downto 0);
    tmp_1138_fu_941_p1 <= ap_phi_mux_p_Val2_26_phi_fu_562_p12(7 - 1 downto 0);
    tmp_120_mid1_fu_732_p4 <= height_1_fu_718_p2(3 downto 1);
    tmp_126_fu_1012_p4 <= ret_V_4_fu_972_p2(9 downto 7);
        tmp_129_fu_1159_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_128_reg_1429),7));

    tmp_134_fu_664_p3 <= (tmp_mid2_v_fu_656_p3 & ap_const_lv3_0);
    tmp_135_fu_676_p3 <= (tmp_mid2_v_fu_656_p3 & ap_const_lv1_0);
    tmp_136_fu_688_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_672_p1) - unsigned(p_shl3_cast_fu_684_p1));
    tmp_137_fu_706_p2 <= "1" when (unsigned(width_reg_502) < unsigned(ap_const_lv4_C)) else "0";
    tmp_138_fu_754_p2 <= std_logic_vector(unsigned(tmp_27_mid2_cast_fu_750_p1) + unsigned(tmp_267_cast_fu_694_p1));
    tmp_139_fu_831_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_817_p3) - unsigned(p_shl1_cast_fu_824_p3));
    tmp_140_fu_840_p2 <= std_logic_vector(unsigned(tmp_28_mid2_cast_fu_837_p1) + unsigned(tmp_fu_805_p2));
    tmp_141_fu_878_p2 <= std_logic_vector(unsigned(tmp_30_mid2_cast_fu_874_p1) + unsigned(tmp_fu_805_p2));
    tmp_142_fu_903_p2 <= std_logic_vector(unsigned(tmp_32_cast_fu_900_p1) + unsigned(tmp_139_fu_831_p2));
    tmp_143_fu_1139_p4 <= p_neg_fu_1133_p2(8 downto 2);
        tmp_267_cast_fu_694_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_136_fu_688_p2),10));

        tmp_272_cast_fu_846_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_140_fu_840_p2),64));

        tmp_273_cast_fu_884_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_141_fu_878_p2),64));

    tmp_274_cast_fu_909_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_142_fu_903_p2),64));
    tmp_27_mid2_cast_fu_750_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_27_mid2_fu_742_p3),10));
    tmp_27_mid2_fu_742_p3 <= 
        tmp_27_mid_fu_698_p3 when (tmp_31_mid_fu_712_p2(0) = '1') else 
        tmp_120_mid1_fu_732_p4;
    tmp_27_mid_fu_698_p3 <= 
        ap_const_lv3_0 when (exitcond_flatten_fu_634_p2(0) = '1') else 
        tmp_s_fu_600_p4;
    tmp_28_mid2_cast_fu_837_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_28_mid2_reg_1224),9));
    tmp_28_mid2_fu_764_p3 <= 
        height_mid_fu_640_p3 when (tmp_31_mid_fu_712_p2(0) = '1') else 
        height_1_fu_718_p2;
    tmp_29_fu_610_p2 <= (ap_phi_mux_height_phi_fu_495_p4 or ap_const_lv4_1);
    tmp_29_mid1_fu_862_p2 <= (height_1_reg_1204 or ap_const_lv4_1);
    tmp_30_mid2_cast_fu_874_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_30_mid2_fu_867_p3),9));
    tmp_30_mid2_fu_867_p3 <= 
        tmp_30_mid_fu_811_p3 when (tmp_31_mid_reg_1199(0) = '1') else 
        tmp_29_mid1_fu_862_p2;
    tmp_30_mid_fu_811_p3 <= 
        ap_const_lv4_1 when (exitcond_flatten_reg_1188(0) = '1') else 
        tmp_29_reg_1174;
    tmp_31_mid_fu_712_p2 <= (tmp_137_fu_706_p2 or exitcond_flatten_fu_634_p2);
    tmp_32_cast_fu_900_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1133_reg_1230),11));
    tmp_33_fu_991_p2 <= std_logic_vector(unsigned(tmp3_reg_1414) + unsigned(tmp2_fu_986_p2));
    tmp_35_fu_1034_p2 <= (p_Result_s_fu_978_p3 xor ap_const_lv1_1);
    tmp_fu_805_p1 <= tmp_fu_805_p10(5 - 1 downto 0);
    tmp_fu_805_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_mid2_v_reg_1193),9));
    tmp_fu_805_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv9_D) * unsigned(tmp_fu_805_p1), 9));
    tmp_mid2_v_fu_656_p3 <= 
        fmap_1_fu_628_p2 when (exitcond_flatten_fu_634_p2(0) = '1') else 
        ap_phi_mux_fmap_phi_fu_473_p4;
    tmp_s_fu_600_p4 <= ap_phi_mux_height_phi_fu_495_p4(3 downto 1);
    underflow_fu_1064_p2 <= (p_Result_s_fu_978_p3 and brmerge17_fu_1058_p2);
    width_1_fu_782_p2 <= std_logic_vector(unsigned(ap_const_lv4_2) + unsigned(width_mid2_fu_724_p3));
    width_mid2_fu_724_p3 <= 
        width_mid_fu_648_p3 when (tmp_31_mid_fu_712_p2(0) = '1') else 
        ap_const_lv4_0;
    width_mid_fu_648_p3 <= 
        ap_const_lv4_0 when (exitcond_flatten_fu_634_p2(0) = '1') else 
        width_reg_502;
end behav;
