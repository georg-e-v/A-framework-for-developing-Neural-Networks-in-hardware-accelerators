-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity flattening_layer is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    input_V_ce0 : OUT STD_LOGIC;
    input_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    output_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    output_V_ce0 : OUT STD_LOGIC;
    output_V_we0 : OUT STD_LOGIC;
    output_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of flattening_layer is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv10_240 : STD_LOGIC_VECTOR (9 downto 0) := "1001000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv8_60 : STD_LOGIC_VECTOR (7 downto 0) := "01100000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten1_reg_103 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_reg_114 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten_reg_125 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_reg_136 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_147 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond_flatten1_fu_188_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten1_reg_474 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal exitcond_flatten1_reg_474_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next1_fu_194_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_1_mid2_v_fu_258_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_mid2_v_reg_483 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_4_mid2_fu_340_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_4_mid2_reg_488 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_7_fu_362_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_7_reg_494 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_7_reg_494_pp0_iter1_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_9_fu_402_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_9_reg_499 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_4_fu_408_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_reg_504 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_1_fu_412_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_next_fu_424_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_phi_mux_y_phi_fu_118_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_x_phi_fu_140_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_13_cast_fu_461_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_fu_469_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_shl_fu_158_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl5_fu_170_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl_cast_fu_166_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl5_cast_fu_178_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond_flatten_fu_206_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_1_fu_200_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_shl_mid1_fu_220_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl5_mid1_fu_232_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl_cast_mid1_fu_228_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl5_cast_mid1_fu_240_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_mid1_fu_244_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_fu_182_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_3_fu_270_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond_fu_292_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_exitcond_flatten_fu_286_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_mid_fu_212_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond_mid_fu_298_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_310_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_1_fu_304_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_3_mid1_fu_324_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_3_mid_fu_278_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_mid2_fu_316_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_3_mid2_fu_332_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_cast3_fu_348_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp1_fu_352_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp1_cast_fu_358_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_mid2_fu_250_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_2_fu_368_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_fu_380_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl3_cast_fu_376_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl4_cast_fu_388_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_6_fu_392_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_1_mid2_cast_fu_266_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_6_cast_fu_398_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal indvar_flatten_op_fu_418_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl1_cast_fu_435_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl2_cast_fu_442_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_4_mid2_cast_fu_432_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_10_fu_449_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_11_fu_455_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_7_cast_fu_466_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_147_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten1_fu_188_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_reg_147 <= i_1_fu_412_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_147 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    indvar_flatten1_reg_103_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten1_fu_188_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten1_reg_103 <= indvar_flatten_next1_fu_194_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten1_reg_103 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_125_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten1_fu_188_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_125 <= indvar_flatten_next_fu_424_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_125 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    x_reg_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten1_reg_474 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                x_reg_136 <= tmp_4_mid2_reg_488;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                x_reg_136 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    y_reg_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten1_reg_474 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                y_reg_114 <= tmp_1_mid2_v_reg_483;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                y_reg_114 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                exitcond_flatten1_reg_474 <= exitcond_flatten1_fu_188_p2;
                exitcond_flatten1_reg_474_pp0_iter1_reg <= exitcond_flatten1_reg_474;
                tmp_7_reg_494_pp0_iter1_reg <= tmp_7_reg_494;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten1_fu_188_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_1_mid2_v_reg_483 <= tmp_1_mid2_v_fu_258_p3;
                tmp_4_mid2_reg_488 <= tmp_4_mid2_fu_340_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten1_fu_188_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_4_reg_504 <= tmp_4_fu_408_p1;
                tmp_7_reg_494 <= tmp_7_fu_362_p2;
                tmp_9_reg_499 <= tmp_9_fu_402_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, exitcond_flatten1_fu_188_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond_flatten1_fu_188_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond_flatten1_fu_188_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state5 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(exitcond_flatten1_fu_188_p2)
    begin
        if ((exitcond_flatten1_fu_188_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_x_phi_fu_140_p4_assign_proc : process(x_reg_136, exitcond_flatten1_reg_474, ap_CS_fsm_pp0_stage0, tmp_4_mid2_reg_488, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((exitcond_flatten1_reg_474 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_x_phi_fu_140_p4 <= tmp_4_mid2_reg_488;
        else 
            ap_phi_mux_x_phi_fu_140_p4 <= x_reg_136;
        end if; 
    end process;


    ap_phi_mux_y_phi_fu_118_p4_assign_proc : process(y_reg_114, exitcond_flatten1_reg_474, ap_CS_fsm_pp0_stage0, tmp_1_mid2_v_reg_483, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((exitcond_flatten1_reg_474 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_y_phi_fu_118_p4 <= tmp_1_mid2_v_reg_483;
        else 
            ap_phi_mux_y_phi_fu_118_p4 <= y_reg_114;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_flatten1_fu_188_p2 <= "1" when (indvar_flatten1_reg_103 = ap_const_lv10_240) else "0";
    exitcond_flatten_fu_206_p2 <= "1" when (indvar_flatten_reg_125 = ap_const_lv8_60) else "0";
    exitcond_fu_292_p2 <= "1" when (i_reg_147 = ap_const_lv5_10) else "0";
    exitcond_mid_fu_298_p2 <= (not_exitcond_flatten_fu_286_p2 and exitcond_fu_292_p2);
    i_1_fu_412_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(i_mid2_fu_316_p3));
    i_cast3_fu_348_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_mid2_fu_316_p3),7));
    i_mid2_fu_316_p3 <= 
        ap_const_lv5_0 when (tmp_1_fu_310_p2(0) = '1') else 
        i_reg_147;
    indvar_flatten_next1_fu_194_p2 <= std_logic_vector(unsigned(indvar_flatten1_reg_103) + unsigned(ap_const_lv10_1));
    indvar_flatten_next_fu_424_p3 <= 
        ap_const_lv8_1 when (exitcond_flatten_fu_206_p2(0) = '1') else 
        indvar_flatten_op_fu_418_p2;
    indvar_flatten_op_fu_418_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(indvar_flatten_reg_125));
    input_V_address0 <= tmp_13_cast_fu_461_p1(10 - 1 downto 0);

    input_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            input_V_ce0 <= ap_const_logic_1;
        else 
            input_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    not_exitcond_flatten_fu_286_p2 <= (exitcond_flatten_fu_206_p2 xor ap_const_lv1_1);
    output_V_address0 <= tmp_8_fu_469_p1(10 - 1 downto 0);

    output_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            output_V_ce0 <= ap_const_logic_1;
        else 
            output_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_V_d0 <= input_V_q0;

    output_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, exitcond_flatten1_reg_474_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((exitcond_flatten1_reg_474_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            output_V_we0 <= ap_const_logic_1;
        else 
            output_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl1_cast_fu_435_p3 <= (tmp_4_reg_504 & ap_const_lv3_0);
    p_shl2_cast_fu_442_p3 <= (tmp_9_reg_499 & ap_const_lv1_0);
    p_shl3_cast_fu_376_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_368_p3),9));
    p_shl4_cast_fu_388_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_380_p3),9));
    p_shl5_cast_fu_178_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl5_fu_170_p3),11));
    p_shl5_cast_mid1_fu_240_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl5_mid1_fu_232_p3),11));
    p_shl5_fu_170_p3 <= (ap_phi_mux_y_phi_fu_118_p4 & ap_const_lv5_0);
    p_shl5_mid1_fu_232_p3 <= (y_1_fu_200_p2 & ap_const_lv5_0);
    p_shl_cast_fu_166_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_fu_158_p3),11));
    p_shl_cast_mid1_fu_228_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_mid1_fu_220_p3),11));
    p_shl_fu_158_p3 <= (ap_phi_mux_y_phi_fu_118_p4 & ap_const_lv7_0);
    p_shl_mid1_fu_220_p3 <= (y_1_fu_200_p2 & ap_const_lv7_0);
    tmp1_cast_fu_358_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp1_fu_352_p2),11));
    tmp1_fu_352_p2 <= std_logic_vector(unsigned(tmp_3_mid2_fu_332_p3) + unsigned(i_cast3_fu_348_p1));
    tmp_10_fu_449_p2 <= std_logic_vector(unsigned(p_shl1_cast_fu_435_p3) - unsigned(p_shl2_cast_fu_442_p3));
    tmp_11_fu_455_p2 <= std_logic_vector(unsigned(tmp_4_mid2_cast_fu_432_p1) + unsigned(tmp_10_fu_449_p2));
    tmp_13_cast_fu_461_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_455_p2),64));
    tmp_1_fu_310_p2 <= (exitcond_mid_fu_298_p2 or exitcond_flatten_fu_206_p2);
    tmp_1_mid2_cast_fu_266_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_mid2_v_fu_258_p3),10));
    tmp_1_mid2_v_fu_258_p3 <= 
        y_1_fu_200_p2 when (exitcond_flatten_fu_206_p2(0) = '1') else 
        ap_phi_mux_y_phi_fu_118_p4;
    tmp_2_fu_368_p3 <= (i_mid2_fu_316_p3 & ap_const_lv3_0);
    tmp_3_fu_270_p3 <= (ap_phi_mux_x_phi_fu_140_p4 & ap_const_lv4_0);
    tmp_3_mid1_fu_324_p3 <= (x_1_fu_304_p2 & ap_const_lv4_0);
    tmp_3_mid2_fu_332_p3 <= 
        tmp_3_mid1_fu_324_p3 when (exitcond_mid_fu_298_p2(0) = '1') else 
        tmp_3_mid_fu_278_p3;
    tmp_3_mid_fu_278_p3 <= 
        ap_const_lv7_0 when (exitcond_flatten_fu_206_p2(0) = '1') else 
        tmp_3_fu_270_p3;
    tmp_4_fu_408_p1 <= tmp_9_fu_402_p2(8 - 1 downto 0);
    tmp_4_mid2_cast_fu_432_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_mid2_reg_488),11));
    tmp_4_mid2_fu_340_p3 <= 
        x_1_fu_304_p2 when (exitcond_mid_fu_298_p2(0) = '1') else 
        x_mid_fu_212_p3;
    tmp_5_fu_380_p3 <= (i_mid2_fu_316_p3 & ap_const_lv1_0);
        tmp_6_cast_fu_398_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_6_fu_392_p2),10));

    tmp_6_fu_392_p2 <= std_logic_vector(unsigned(p_shl3_cast_fu_376_p1) - unsigned(p_shl4_cast_fu_388_p1));
        tmp_7_cast_fu_466_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_7_reg_494_pp0_iter1_reg),32));

    tmp_7_fu_362_p2 <= std_logic_vector(unsigned(tmp1_cast_fu_358_p1) + unsigned(tmp_mid2_fu_250_p3));
    tmp_8_fu_469_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_cast_fu_466_p1),64));
    tmp_9_fu_402_p2 <= std_logic_vector(unsigned(tmp_1_mid2_cast_fu_266_p1) + unsigned(tmp_6_cast_fu_398_p1));
    tmp_fu_182_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_166_p1) - unsigned(p_shl5_cast_fu_178_p1));
    tmp_mid1_fu_244_p2 <= std_logic_vector(unsigned(p_shl_cast_mid1_fu_228_p1) - unsigned(p_shl5_cast_mid1_fu_240_p1));
    tmp_mid2_fu_250_p3 <= 
        tmp_mid1_fu_244_p2 when (exitcond_flatten_fu_206_p2(0) = '1') else 
        tmp_fu_182_p2;
    x_1_fu_304_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(x_mid_fu_212_p3));
    x_mid_fu_212_p3 <= 
        ap_const_lv3_0 when (exitcond_flatten_fu_206_p2(0) = '1') else 
        ap_phi_mux_x_phi_fu_140_p4;
    y_1_fu_200_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(ap_phi_mux_y_phi_fu_118_p4));
end behav;
